{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "",
            "hash": "045c3a0d082fda9d7a1c81a5a612a5eaef4a8416",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'join_filter_1' block\n    join_filter_1(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4e45f9fe-c792-44f6-8a37-67cea101feb7",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 15,
                        "line_start": 7,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c4dc2c71-936e-4300-9834-9e3fa9ddc453",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bea5e44d-ee72-462e-bd2b-8836e6e84c36",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1e97bf3f-745e-4092-b46a-50bd46f25e1f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 29
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "644f7db1-9110-45a0-b4e0-dc5556f6066a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d8a1e732-3f26-4a19-ad39-1657a172ef63",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bea5e44d-ee72-462e-bd2b-8836e6e84c36",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 68
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "fe23a4f6-edd7-402b-8632-ccc4bc7528a6",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 232,
                        "line_start": 219,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 7,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1200,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 75
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "format search url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_search_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_search_url() called')\n    \n    id_value = container.get('id', None)\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.event_id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    format_search_url__note_search_url = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    # create dynamic url from static splunk url and event_id in container\n    \n    static_url = \"https://splunk-es.csoc.krungthai.local/en-GB/app/SplunkEnterpriseSecuritySuite/incident_review?earliest=-7d%40h&latest=now&search=event_id%3D\"\n    dynamic_url = static_url + container_item_0[0]\n    \n    # update artifact\n    artifactid = \"\"\n    parameters = []\n    cef_json = { '_incident_url': dynamic_url }\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    #url = url + '?_filter_cef__username=\"' + filtered_artifacts_item_1_0[0] +'\"'\n    #phantom.debug(url)\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid = key[item]\n                parameters.append({\n                    'artifact_id': artifactid,\n                   \t'name': \"\",\n                \t'label': \"\",\n\t\t            'severity': \"\",\n\t\t            'cef_json': cef_json,\n\t\t            'cef_types_json': { '_incident_url' : ['url'] },\n    \t            'tags': \"\",\n\t\t            'overwrite': \"\",\n                    'artifact_json': \"\",\n                })\n                phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_incident_url\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_search_url:note_search_url', value=json.dumps(format_search_url__note_search_url))\n    join_decision_2(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def format_search_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_search_url() called')\n    \n    id_value = container.get('id', None)\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.event_id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    format_search_url__note_search_url = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    # create dynamic url from static splunk url and event_id in container\n    \n    static_url = \"https://splunk-es.csoc.krungthai.local/en-GB/app/SplunkEnterpriseSecuritySuite/incident_review?earliest=-7d%40h&latest=now&search=event_id%3D\"\n    dynamic_url = static_url + container_item_0[0]\n    \n    # update artifact\n    artifactid = \"\"\n    parameters = []\n    cef_json = { '_incident_url': dynamic_url }\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    #url = url + '?_filter_cef__username=\"' + filtered_artifacts_item_1_0[0] +'\"'\n    #phantom.debug(url)\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid = key[item]\n                parameters.append({\n                    'artifact_id': artifactid,\n                   \t'name': \"\",\n                \t'label': \"\",\n\t\t            'severity': \"\",\n\t\t            'cef_json': cef_json,\n\t\t            'cef_types_json': { '_incident_url' : ['url'] },\n    \t            'tags': \"\",\n\t\t            'overwrite': \"\",\n                    'artifact_json': \"\",\n                })\n                phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_incident_url\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_search_url:note_search_url', value=json.dumps(format_search_url__note_search_url))\n\n    return",
                        "custom_join": "",
                        "custom_name": "format search url",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1e97bf3f-745e-4092-b46a-50bd46f25e1f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 79,
                        "line_start": 15,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "note_search_url"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.event_id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "container:id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 500,
                            "y": 300
                        },
                        "previous_function": "",
                        "previous_name": "format_search_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    \n    # create dynamic url from static splunk url and event_id in container\n    \n    static_url = \"https://splunk-es.csoc.krungthai.local/en-GB/app/SplunkEnterpriseSecuritySuite/incident_review?earliest=-7d%40h&latest=now&search=event_id%3D\"\n    dynamic_url = static_url + container_item_0[0]\n    \n    # update artifact\n    artifactid = \"\"\n    parameters = []\n    cef_json = { '_incident_url': dynamic_url }\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    #url = url + '?_filter_cef__username=\"' + filtered_artifacts_item_1_0[0] +'\"'\n    #phantom.debug(url)\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid = key[item]\n                parameters.append({\n                    'artifact_id': artifactid,\n                   \t'name': \"\",\n                \t'label': \"\",\n\t\t            'severity': \"\",\n\t\t            'cef_json': cef_json,\n\t\t            'cef_types_json': { '_incident_url' : ['url'] },\n    \t            'tags': \"\",\n\t\t            'overwrite': \"\",\n                    'artifact_json': \"\",\n                })\n                phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_incident_url\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 83
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bac4bbf5-62d5-4a9c-832b-6a8af31e0d88",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bea5e44d-ee72-462e-bd2b-8836e6e84c36",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "caabbb07-e08f-4503-970a-b0f7633dfae9",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 84
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0946c81a-11ba-4ce2-b17e-dba279127f62",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1e97bf3f-745e-4092-b46a-50bd46f25e1f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "eb077856-fc6f-4959-ac0c-e8ac302f79d3",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 88
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d6cf44f5-08d9-4cdf-be42-0225679cf509",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "eb077856-fc6f-4959-ac0c-e8ac302f79d3",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fe23a4f6-edd7-402b-8632-ccc4bc7528a6",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 95
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "delete original search"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def delete_original_search(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delete_original_search() called')\n    \n    input_parameter_0 = \"\"\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    updated_artifact = {}\n    artifacts = phantom.collect(container, 'artifacts:*', scope='all')\n    #phantom.debug(len(artifacts))\n    key = '_originating_search'    \n    for artifact in artifacts:\n        updated_artifact['cef'] = artifact['cef']\n        updated_artifact['cef_types'] = artifact['cef_types']\n        \n        if key in updated_artifact['cef']:\n            del updated_artifact['cef']['_originating_search']\n        if key in updated_artifact['cef']:\n            del updated_artifact['cef_types']['_originating_search']\n\n        artifact_id = artifact[\"id\"]\n        phantom.debug('updating artifact {} with the following attributes:\\n{}'.format(artifact_id, updated_artifact))\n        url = phantom.build_phantom_rest_url('artifact', artifact_id)\n        phantom.debug(url)\n        response = phantom.requests.post(url, json=updated_artifact, verify=False).json()\n\n        phantom.debug('POST /rest/artifact returned the following response:\\n{}'.format(response))\n        if 'success' not in response or response['success'] != True:\n            raise RuntimeError(\"POST /rest/artifact failed\") \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_decision_2(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def delete_original_search(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delete_original_search() called')\n    \n    input_parameter_0 = \"\"\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    updated_artifact = {}\n    artifacts = phantom.collect(container, 'artifacts:*', scope='all')\n    #phantom.debug(len(artifacts))\n    key = '_originating_search'    \n    for artifact in artifacts:\n        updated_artifact['cef'] = artifact['cef']\n        updated_artifact['cef_types'] = artifact['cef_types']\n        \n        if key in updated_artifact['cef']:\n            del updated_artifact['cef']['_originating_search']\n        if key in updated_artifact['cef']:\n            del updated_artifact['cef_types']['_originating_search']\n\n        artifact_id = artifact[\"id\"]\n        phantom.debug('updating artifact {} with the following attributes:\\n{}'.format(artifact_id, updated_artifact))\n        url = phantom.build_phantom_rest_url('artifact', artifact_id)\n        phantom.debug(url)\n        response = phantom.requests.post(url, json=updated_artifact, verify=False).json()\n\n        phantom.debug('POST /rest/artifact returned the following response:\\n{}'.format(response))\n        if 'success' not in response or response['success'] != True:\n            raise RuntimeError(\"POST /rest/artifact failed\") \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "delete original search",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "caabbb07-e08f-4503-970a-b0f7633dfae9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 189,
                        "line_start": 149,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 3,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 500,
                            "y": 440
                        },
                        "previous_function": "",
                        "previous_name": "delete_original_search",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    updated_artifact = {}\n    artifacts = phantom.collect(container, 'artifacts:*', scope='all')\n    #phantom.debug(len(artifacts))\n    key = '_originating_search'    \n    for artifact in artifacts:\n        updated_artifact['cef'] = artifact['cef']\n        updated_artifact['cef_types'] = artifact['cef_types']\n        \n        if key in updated_artifact['cef']:\n            del updated_artifact['cef']['_originating_search']\n        if key in updated_artifact['cef']:\n            del updated_artifact['cef_types']['_originating_search']\n\n        artifact_id = artifact[\"id\"]\n        phantom.debug('updating artifact {} with the following attributes:\\n{}'.format(artifact_id, updated_artifact))\n        url = phantom.build_phantom_rest_url('artifact', artifact_id)\n        phantom.debug(url)\n        response = phantom.requests.post(url, json=updated_artifact, verify=False).json()\n\n        phantom.debug('POST /rest/artifact returned the following response:\\n{}'.format(response))\n        if 'success' not in response or response['success'] != True:\n            raise RuntimeError(\"POST /rest/artifact failed\") \n\n",
                        "warn": false,
                        "z": 97
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d6115313-ae6a-4562-b319-c40165600493",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "caabbb07-e08f-4503-970a-b0f7633dfae9",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "eb077856-fc6f-4959-ac0c-e8ac302f79d3",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 98
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "da8b9e0b-a553-4b96-8010-762d40e9ff48",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4e45f9fe-c792-44f6-8a37-67cea101feb7",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bea5e44d-ee72-462e-bd2b-8836e6e84c36",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 100
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "delete duplicate artifact"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def delete_duplicate_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delete_duplicate_artifact() called')\n    \n    id_value = container.get('id', None)\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.event_id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    delete_duplicate_artifact__artifactid = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    artifactid = []\n    artifactcount = 0\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid.append(key[item])\n                artifactcount += 1\n    \n    phantom.debug(container_item_0)\n    if (container_item_0[0] == container_item_0[1]):\n        success = phantom.delete_artifact(artifact_id=artifactid[1])\n        phantom.debug('phantom.delete_artifact results: success: {} '.format(success))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='delete_duplicate_artifact:artifactid', value=json.dumps(delete_duplicate_artifact__artifactid))\n    join_filter_1(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def delete_duplicate_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('delete_duplicate_artifact() called')\n    \n    id_value = container.get('id', None)\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.event_id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    delete_duplicate_artifact__artifactid = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    artifactid = []\n    artifactcount = 0\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid.append(key[item])\n                artifactcount += 1\n    \n    phantom.debug(container_item_0)\n    if (container_item_0[0] == container_item_0[1]):\n        success = phantom.delete_artifact(artifact_id=artifactid[1])\n        phantom.debug('phantom.delete_artifact results: success: {} '.format(success))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='delete_duplicate_artifact:artifactid', value=json.dumps(delete_duplicate_artifact__artifactid))\n    join_filter_1(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "delete duplicate artifact",
                        "description": "compare event_id and delete one artifact if found identical",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d8a1e732-3f26-4a19-ad39-1657a172ef63",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 149,
                        "line_start": 110,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "compare event_id and delete one artifact if found identical",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifactid"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "container:id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.cef.event_id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 400,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "delete_duplicate_artifact",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "warn",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    artifactid = []\n    artifactcount = 0\n    \n    url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    response = phantom.requests.get(url, verify=False)\n    for key in response.json()['data']:\n        for item in key:\n            if item == 'id':\n                artifactid.append(key[item])\n                artifactcount += 1\n    \n    phantom.debug(container_item_0)\n    if (container_item_0[0] == container_item_0[1]):\n        success = phantom.delete_artifact(artifact_id=artifactid[1])\n        phantom.debug('phantom.delete_artifact results: success: {} '.format(success))\n\n",
                        "warn": false,
                        "z": 101
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def filter_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('filter_1() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.event_id\", \"!=\", \"\"],\n        ],\n        name=\"filter_1:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        format_search_url(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n        delete_original_search(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "bea5e44d-ee72-462e-bd2b-8836e6e84c36",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_filter_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_filter_1() called')\n\n    # no callbacks to check, call connected block \"filter_1\"\n    phantom.save_run_data(key='join_filter_1_called', value='filter_1', auto=True)\n\n    filter_1(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 97,
                        "line_end": 107,
                        "line_start": 79,
                        "name": "filter",
                        "notes": "",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.event_id",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 380
                        },
                        "previous_function": "",
                        "previous_name": "filter_1",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 102
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_2() called')\n    \n    label_param = container.get('label', None)\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [label_param, \"==\", \"account\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        return\n\n    # call connected blocks for 'else' condition 2\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "eb077856-fc6f-4959-ac0c-e8ac302f79d3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_decision_2() called')\n\n    # no callbacks to check, call connected block \"decision_2\"\n    phantom.save_run_data(key='join_decision_2_called', value='decision_2', auto=True)\n\n    decision_2(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 209,
                        "line_end": 219,
                        "line_start": 189,
                        "name": "decision",
                        "notes": "",
                        "number": 2,
                        "order": 6,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "container:label",
                                        "value": "account"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 780,
                            "y": 380
                        },
                        "previous_function": "",
                        "previous_name": "decision_2",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 104
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8c123b4d-6f61-4a69-bb0e-6f34778fc586",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "eb077856-fc6f-4959-ac0c-e8ac302f79d3",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fe23a4f6-edd7-402b-8632-ccc4bc7528a6",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 105
                    }
                ]
            },
            "notes": ""
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.7.63984"
    },
    "create_time": "2022-03-17T13:43:37.868501+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}