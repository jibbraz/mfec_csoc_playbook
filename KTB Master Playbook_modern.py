"""
USE CASE: This playbook will perform triage tasks, identify false positive; else perform enrichment,
containment and notification
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'decision_14' block
    decision_14(container=container)

    return

"""
If
event is
generated by
AMP /
Kaspersky /
McAfee
"""
@phantom.playbook_block()
def If_event_is_generated_by_AMP_Kaspersky(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('If_event_is_generated_by_AMP_Kaspersky() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["amp", "in", "artifact:*.cef.sourcetype"],
            ["mcafee", "in", "artifact:*.cef.sourcetype"],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        join_call_enrich_playbook(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # check for 'elif' condition 2
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["stealthwatch", "in", "artifact:*.cef.sourcetype"],
            ["fortisandbox", "in", "artifact:*.cef.sourcetype"],
        ],
        logical_operator='or')

    # call connected blocks if condition 2 matched
    if matched:
        playbook_local_KTB_Enrich_Playbook_2_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        add_note_22(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # check for 'elif' condition 3
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["kaspersky", "in", "artifact:*.cef.sourcetype"],
        ])

    # call connected blocks if condition 3 matched
    if matched:
        format_4(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    return

@phantom.playbook_block()
def join_If_event_is_generated_by_AMP_Kaspersky(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('join_If_event_is_generated_by_AMP_Kaspersky() called')
    
    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key='join_If_event_is_generated_by_AMP_Kaspersky_called'):
        return

    # no callbacks to check, call connected block "If_event_is_generated_by_AMP_Kaspersky"
    phantom.save_run_data(key='join_If_event_is_generated_by_AMP_Kaspersky_called', value='If_event_is_generated_by_AMP_Kaspersky', auto=True)

    If_event_is_generated_by_AMP_Kaspersky(container=container, handle=handle)
    
    return

"""
Call Enrich Playbook
"""
@phantom.playbook_block()
def call_enrich_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('call_enrich_playbook() called')
    
    # call playbook "local/KTB - Enrich Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB - Enrich Playbook", container=container, name="call_enrich_playbook", callback=cf_local_set_last_automated_action_3)

    return

@phantom.playbook_block()
def join_call_enrich_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('join_call_enrich_playbook() called')
    
    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key='join_call_enrich_playbook_called'):
        return

    # no callbacks to check, call connected block "call_enrich_playbook"
    phantom.save_run_data(key='join_call_enrich_playbook_called', value='call_enrich_playbook', auto=True)

    call_enrich_playbook(container=container, handle=handle)
    
    return

"""
IOC is
suspicious
"""
@phantom.playbook_block()
def ioc_is_suspicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('ioc_is_suspicious() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.sourceAddress_malicious", "==", True],
            ["artifact:*.cef.destinationAddress_malicious", "==", True],
            ["artifact:*.cef.requestURL_malicious", "==", True],
            ["artifact:*.cef.fileHash_malicious", "==", True],
            ["indicator_malicious", "in", "artifact:*.tags"],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        promote_to_case_6(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    add_note_14(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

"""
Call Contain
Playbook
"""
@phantom.playbook_block()
def call_contain_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('call_contain_playbook() called')
    
    # call playbook "local/KTB Malware Contain Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB Malware Contain Playbook", container=container, name="call_contain_playbook", callback=decision_12)

    return

"""
Is it in the list of NO
containment Or is a
server (subnets for
servers)
"""
@phantom.playbook_block()
def is_it_in_the_list_of_no_containment_or_i(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('is_it_in_the_list_of_no_containment_or_i() called')
    
    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_devicehostname:condition_1:artifact:*.cef.deviceHostname'])
    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]

    is_it_in_the_list_of_no_containment_or_i__noContainmentTrue = None
    is_it_in_the_list_of_no_containment_or_i__noContainmentFalse = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    
    success, message, nocontainmentlist = phantom.get_list(list_name='nocontainmentlist')
    
    urllist = filtered_artifacts_item_1_0
    noContainmentTrue = []
    noContainmentFalse = []
    for item in urllist:
        if not any(item in sublist for sublist in nocontainmentlist):
            phantom.debug("{} is public".format(item))
            noContainmentFalse.append(item)
        else:
            phantom.debug("{} is private".format(item))
            noContainmentTrue.append(item)
            
    is_it_in_the_list_of_no_containment_or_i__noContainmentTrue = noContainmentTrue
    is_it_in_the_list_of_no_containment_or_i__noContainmentFalse = noContainmentFalse
    phantom.debug(noContainmentTrue)
    phantom.debug(noContainmentFalse)
    #################################
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key='is_it_in_the_list_of_no_containment_or_i:noContainmentTrue', value=json.dumps(is_it_in_the_list_of_no_containment_or_i__noContainmentTrue))
    phantom.save_run_data(key='is_it_in_the_list_of_no_containment_or_i:noContainmentFalse', value=json.dumps(is_it_in_the_list_of_no_containment_or_i__noContainmentFalse))
    check_is_it_in_the_list_of_no_containmen(container=container)

    return

"""
Check Is it in the list of NO
containment Or is a
server (subnets for
servers)
"""
@phantom.playbook_block()
def check_is_it_in_the_list_of_no_containmen(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('check_is_it_in_the_list_of_no_containmen() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["is_it_in_the_list_of_no_containment_or_i:custom_function:noContainmentFalse", "!=", []],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        decision_18(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # check for 'elif' condition 2
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["is_it_in_the_list_of_no_containment_or_i:custom_function:noContainmentTrue", "!=", []],
        ])

    # call connected blocks if condition 2 matched
    if matched:
        return

    return

"""
Filter out deviceHostname
"""
@phantom.playbook_block()
def filter_out_devicehostname(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('filter_out_devicehostname() called')

    # collect filtered artifact ids for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.deviceHostname", "!=", ""],
        ],
        name="filter_out_devicehostname:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        is_it_in_the_list_of_no_containment_or_i(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return

@phantom.playbook_block()
def playbook_local_KTB_Enrich_Playbook_2_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_KTB_Enrich_Playbook_2_2() called')
    
    # call playbook "local/KTB - Enrich Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB - Enrich Playbook", container=container, name="playbook_local_KTB_Enrich_Playbook_2_2", callback=no_op_4)

    return

@phantom.playbook_block()
def set_status_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('set_status_4() called')

    phantom.set_status(container=container, status="Open")
    cf_local_add_t0_t1_1(container=container)

    return

@phantom.playbook_block()
def cf_local_add_t0_t1_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('cf_local_add_t0_t1_1() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]

    parameters = []

    for item0 in container_property_0:
        parameters.append({
            'container_id_now': item0[0],
        })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/add_t0_t1", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/add_t0_t1', parameters=parameters, name='cf_local_add_t0_t1_1', callback=join_playbook_local_ktb_triage_playbook_1)

    return

@phantom.playbook_block()
def set_status_to_in_progress(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('set_status_to_in_progress() called')

    phantom.set_status(container=container, status="In progress")
    join_If_event_is_generated_by_AMP_Kaspersky(container=container)

    return

@phantom.playbook_block()
def promote_to_case_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('promote_to_case_6() called')

    phantom.promote(container=container, template="KTB Workbook")
    decision_13(container=container)
    playbook_local_ktb_uc_send_email_case_promotion_1_1(container=container)

    return

@phantom.playbook_block()
def playbook_local_ktb_uc_send_email_case_promotion_1_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_uc_send_email_case_promotion_1_1() called')
    
    # call playbook "local/KTB UC SEND EMAIL CASE PROMOTION", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB UC SEND EMAIL CASE PROMOTION", container=container)

    return

@phantom.playbook_block()
def playbook_local_ktb_approve_playbook_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_approve_playbook_1() called')
    
    # call playbook "local/KTB Approve Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB Approve Playbook", container=container, name="playbook_local_ktb_approve_playbook_1", callback=no_op_1)

    return

@phantom.playbook_block()
def no_op_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('no_op_1() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'no_op_1' call

    parameters = []
    
    # build parameters list for 'no_op_1' call
    parameters.append({
        'sleep_seconds': 5,
    })

    phantom.act(action="no op", parameters=parameters, assets=['phantom asset'], callback=decision_10, name="no_op_1")

    return

@phantom.playbook_block()
def decision_10(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_10() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["contain_approved", "in", "artifact:*.tags"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        call_contain_playbook(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        decision_20(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    add_note_17(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

"""
ktb
"""
@phantom.playbook_block()
def add_note_14(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_14() called')

    note_title = "Enrichment Notes"
    note_content = "Nothing Malicious"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def decision_12(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_12() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["device_quarantined", "in", "artifact:*.tags"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        decision_16(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    cf_local_set_last_automated_action_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
    add_note_24(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def set_status_16(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('set_status_16() called')

    phantom.set_status(container=container, status="Resolved")

    return

@phantom.playbook_block()
def add_note_17(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_17() called')

    note_title = "Contain Approve failure note"
    note_content = "Not approved."
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def add_note_18(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_18() called')

    note_title = "Contain failure , proceed to next flow"
    note_content = "Contain failure , proceed to next flow"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def decision_13(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_13() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["device_quarantined", "in", "artifact:*.tags"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        add_note_19(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    filter_out_devicehostname(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def add_note_19(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_19() called')

    note_title = "Contain Decision notes"
    note_content = "This host has been contained before"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def decision_14(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_14() called')
    
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        conditions=[
            [status_param, "==", "new"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        set_status_4(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    join_playbook_local_ktb_triage_playbook_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def decision_15(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_15() called')
    
    status_param = container.get('status', None)
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            [status_param, "==", "open"],
            [status_param, "==", "new"],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        set_status_to_in_progress(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    join_If_event_is_generated_by_AMP_Kaspersky(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def decision_16(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_16() called')
    
    status_param = container.get('status', None)
    status_param = container.get('status', None)
    status_param = container.get('status', None)
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            [status_param, "==", "new"],
            [status_param, "==", "open"],
            [status_param, "==", "in progress"],
            [status_param, "==", "pending"],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        cf_local_set_last_automated_action_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2

    return

@phantom.playbook_block()
def cf_local_set_last_automated_action_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('cf_local_set_last_automated_action_1() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]
    literal_values_0 = [
        [
            "Resolved",
        ],
    ]

    parameters = []

    literal_values_0_0 = [item[0] for item in literal_values_0]
    container_property_0_0 = [item[0] for item in container_property_0]

    parameters.append({
        'a_status': literal_values_0_0,
        'Container_id': container_property_0_0,
    })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/set_last_automated_action", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/set_last_automated_action', parameters=parameters, name='cf_local_set_last_automated_action_1', callback=set_status_16)

    return

@phantom.playbook_block()
def cf_local_set_last_automated_action_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('cf_local_set_last_automated_action_2() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]
    literal_values_0 = [
        [
            "Containment Failed",
        ],
    ]

    parameters = []

    literal_values_0_0 = [item[0] for item in literal_values_0]
    container_property_0_0 = [item[0] for item in container_property_0]

    parameters.append({
        'a_status': literal_values_0_0,
        'Container_id': container_property_0_0,
    })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/set_last_automated_action", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/set_last_automated_action', parameters=parameters, name='cf_local_set_last_automated_action_2', callback=add_note_18)

    return

@phantom.playbook_block()
def cf_local_set_last_automated_action_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('cf_local_set_last_automated_action_3() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]
    literal_values_0 = [
        [
            "Enriched",
        ],
    ]

    parameters = []

    literal_values_0_0 = [item[0] for item in literal_values_0]
    container_property_0_0 = [item[0] for item in container_property_0]

    parameters.append({
        'a_status': literal_values_0_0,
        'Container_id': container_property_0_0,
    })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/set_last_automated_action", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/set_last_automated_action', parameters=parameters, name='cf_local_set_last_automated_action_3', callback=ioc_is_suspicious)

    return

@phantom.playbook_block()
def decision_18(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_18() called')
    
    tags_value = container.get('tags', None)
    tags_value = container.get('tags', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["amp_contain", "in", tags_value],
            ["ise_contain", "==", tags_value],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2
    playbook_local_ktb_contain_preflow_playbook_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def playbook_local_ktb_contain_preflow_playbook_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_contain_preflow_playbook_1() called')
    
    # call playbook "local/KTB Contain PreFlow Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB Contain PreFlow Playbook", container=container, name="playbook_local_ktb_contain_preflow_playbook_1", callback=no_op_2)

    return

@phantom.playbook_block()
def decision_19(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_19() called')
    
    tags_value = container.get('tags', None)
    tags_value = container.get('tags', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["amp_contain", "in", tags_value],
            ["ise_contain", "in", tags_value],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2
    add_note_20(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def add_note_20(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_20() called')

    note_title = "Containment precheck notes"
    note_content = "Containment is not available for now."
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def no_op_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('no_op_2() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'no_op_2' call

    parameters = []
    
    # build parameters list for 'no_op_2' call
    parameters.append({
        'sleep_seconds': 5,
    })

    phantom.act(action="no op", parameters=parameters, assets=['phantom asset'], callback=decision_19, name="no_op_2")

    return

@phantom.playbook_block()
def decision_20(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_20() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["admin", "in", "artifact:*.cef.username"],
            ["unknown", "in", "artifact:*.cef.username"],
            ["artifact:*.cef.username", "==", ""],
            [None, "in", "artifact:*.cef.username"],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        join_add_note_21(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    format_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def add_note_21(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_21() called')

    note_title = "End user info notes"
    note_content = "End user email not available"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def join_add_note_21(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('join_add_note_21() called')
    
    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key='join_add_note_21_called'):
        return

    # no callbacks to check, call connected block "add_note_21"
    phantom.save_run_data(key='join_add_note_21_called', value='add_note_21', auto=True)

    add_note_21(container=container, handle=handle)
    
    return

@phantom.playbook_block()
def playbook_local_ktb_uc_send_email_to_inform_enduser_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_uc_send_email_to_inform_enduser_1() called')
    
    # call playbook "local/KTB UC SEND EMAIL To Inform EndUser", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB UC SEND EMAIL To Inform EndUser", container=container, name="playbook_local_ktb_uc_send_email_to_inform_enduser_1")

    return

@phantom.playbook_block()
def run_query_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('run_query_3() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'run_query_3' call
    formatted_data_1 = phantom.get_format_data(name='format_3')

    parameters = []
    
    # build parameters list for 'run_query_3' call
    parameters.append({
        'filter': formatted_data_1,
        'attributes': "mail",
        'search_base': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['ktbcs domain ad'], callback=decision_21, name="run_query_3")

    return

@phantom.playbook_block()
def format_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('format_3() called')
    
    template = """(samaccountname={0})"""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.username",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="format_3", separator=", ")

    run_query_3(container=container)

    return

@phantom.playbook_block()
def decision_21(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_21() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["run_query_3:action_result.*.mail", "!=", []],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        custom_function_4(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    join_add_note_21(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def custom_function_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('custom_function_4() called')
    
    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])
    results_data_1 = phantom.collect2(container=container, datapath=['run_query_3:action_result.*.mail'], action_results=results)
    container_item_0 = [item[0] for item in container_data]
    results_item_1_0 = [item[0] for item in results_data_1]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    parameters = []

    cef_json = {"user_mail" : results_item_1_0[0]}

        # build parameters list for 'update_artifact_2' call
    parameters.append({
            'artifact_id': container_item_0[0],
            'name': "",
            'label': "",
            'severity': "",
            'cef_json': cef_json,
            'cef_types_json': "",
            'tags': "",
            'overwrite': "",
            'artifact_json': "",
        })

    phantom.act(action="update artifact", parameters=parameters, assets=['phantom asset'], name="update_end_user_mail")# Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################
    no_op_3(container=container)

    return

@phantom.playbook_block()
def no_op_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('no_op_3() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'no_op_3' call

    parameters = []
    
    # build parameters list for 'no_op_3' call
    parameters.append({
        'sleep_seconds': 3,
    })

    phantom.act(action="no op", parameters=parameters, assets=['phantom asset'], callback=playbook_local_ktb_uc_send_email_to_inform_enduser_1, name="no_op_3")

    return

@phantom.playbook_block()
def playbook_local_ktb_triage_playbook_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_triage_playbook_1() called')
    
    # call playbook "local/KTB Triage Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB Triage Playbook", container=container, name="playbook_local_ktb_triage_playbook_1", callback=decision_22)

    return

@phantom.playbook_block()
def join_playbook_local_ktb_triage_playbook_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('join_playbook_local_ktb_triage_playbook_1() called')
    
    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key='join_playbook_local_ktb_triage_playbook_1_called'):
        return

    # no callbacks to check, call connected block "playbook_local_ktb_triage_playbook_1"
    phantom.save_run_data(key='join_playbook_local_ktb_triage_playbook_1_called', value='playbook_local_ktb_triage_playbook_1', auto=True)

    playbook_local_ktb_triage_playbook_1(container=container, handle=handle)
    
    return

@phantom.playbook_block()
def decision_22(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_22() called')
    
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            [status_param, "==", "closed"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2
    decision_15(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def add_note_22(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_22() called')

    note_title = "Stealthwatch flow"
    note_content = "stealthwatch flow"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def no_op_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('no_op_4() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'no_op_4' call

    parameters = []
    
    # build parameters list for 'no_op_4' call
    parameters.append({
        'sleep_seconds': 15,
    })

    phantom.act(action="no op", parameters=parameters, assets=['phantom asset'], callback=decision_23, name="no_op_4")

    return

@phantom.playbook_block()
def decision_23(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_23() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["indicator_malicious", "in", "artifact:*.tags"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        promote_to_case_23(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    return

@phantom.playbook_block()
def promote_to_case_23(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('promote_to_case_23() called')

    phantom.promote(container=container, template="KTB Workbook")
    playbook_local_ktb_uc_send_email_case_promotion_2_2(container=container)

    return

@phantom.playbook_block()
def playbook_local_ktb_uc_send_email_case_promotion_2_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_ktb_uc_send_email_case_promotion_2_2() called')
    
    # call playbook "local/KTB UC SEND EMAIL CASE PROMOTION", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB UC SEND EMAIL CASE PROMOTION", container=container)

    return

@phantom.playbook_block()
def format_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('format_4() called')
    
    template = """index=ktb_mgmt_default sourcetype=kaspersky:gnrl EVC_EV_SHA256=*
| search dest = {0}
| search signature = {1}
| dedup dest
| table EVC_EV_SHA256"""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.deviceHostname",
        "artifact:*.cef.signature",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="format_4", separator=", ")

    get_hash(container=container)

    return

@phantom.playbook_block()
def get_hash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('get_hash() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'get_hash' call
    formatted_data_1 = phantom.get_format_data(name='format_4')

    parameters = []
    
    # build parameters list for 'get_hash' call
    parameters.append({
        'query': formatted_data_1,
        'command': "search",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=decision_25, name="get_hash")

    return

@phantom.playbook_block()
def decision_25(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_25() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["get_hash:action_result.summary.total_events", "==", 1],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        save_filehash(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    join_call_enrich_playbook(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

@phantom.playbook_block()
def save_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('save_filehash() called')
    
    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])
    results_data_1 = phantom.collect2(container=container, datapath=['get_hash:action_result.data.*.EVC_EV_SHA256'], action_results=results)
    container_item_0 = [item[0] for item in container_data]
    results_item_1_0 = [item[0] for item in results_data_1]

    save_filehash__fileHash = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    parameters = []
    cef_json = {"fileHash" : results_item_1_0[0]}
    newformat = results_item_1_0[0]

        # build parameters list for 'update_artifact_2' call
    parameters.append({
            'artifact_id': container_item_0[0],
            'name': "",
            'label': "",
            'severity': "",
            'cef_json': cef_json,
            'cef_types_json': "",
            'tags': "",
            'overwrite': "",
            'artifact_json': "",
        })

    phantom.act(action="update artifact", parameters=parameters, assets=['phantom asset'], name="update_fileHash")
    save_filehash__fileHash = newformat

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key='save_filehash:fileHash', value=json.dumps(save_filehash__fileHash))
    join_call_enrich_playbook(container=container)

    return

@phantom.playbook_block()
def add_note_24(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_note_24() called')

    note_title = "bypass note"
    note_content = "Malicious endpoint has NOT been contained by playbook"
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)

    return

@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return