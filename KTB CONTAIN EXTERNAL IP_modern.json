{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "USE CASE: This playbook is used to contain the threat on External IP address",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_9",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_21",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_19_to_port_17",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_0_to_port_14",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_7",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_8",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_14_to_port_15",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_21_to_port_24",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_1",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_6_to_port_5",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_10_to_port_4",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_5_to_port_3",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_4_to_port_2",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_3_to_port_13",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_2_to_port_13",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_13_to_port_1",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_15_to_port_27",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "id": "port_27_to_port_1",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_18_to_port_11",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_22_to_port_10",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_18_to_port_16",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_12_to_port_6",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_21_to_port_20",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_20_to_port_29",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_29_to_port_19",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_26_to_port_28",
                    "sourceNode": "26",
                    "sourcePort": "26_out",
                    "targetNode": "28",
                    "targetPort": "28_in"
                },
                {
                    "id": "port_28_to_port_1",
                    "sourceNode": "28",
                    "sourcePort": "28_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_29_to_port_25",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_25_to_port_26",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "26",
                    "targetPort": "26_in"
                },
                {
                    "id": "port_16_to_port_12",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_11_to_port_22",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                }
            ],
            "globalCustomCode": "import ipaddress",
            "hash": "1f03c1e8af2464318eb4b818ca9e7d3aa284773d",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 240,
                    "y": -480
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1680,
                    "y": 3680
                },
                "10": {
                    "customCode": "def update_artifact_with_blocked_dest_tag(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_with_blocked_dest_tag() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    artifactid = container_item_0[0]\n\n    # url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    # url = url + '?_filter_cef__sourceAddress=\"' + check_if_address_external__addressexternal[0] +'\"'\n    # phantom.debug(url)\n    # response = phantom.requests.get(url, verify=False)\n    # phantom.debug(response.json()['data'])\n    # for key in response.json()['data']:\n        # for item in key:\n            # if item == 'id':\n                # phantom.debug(key[item])\n                # artifactid = key[item]\n                # phantom.debug(artifactid)\n\n    parameters = []\n    parameters.append({\n        'artifact_id': artifactid,\n        'add_tags': \"Address_blocked\",\n        'remove_tags': \"\",\n    })\n\n    phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    format_block_dest_ip_success(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update artifact with blocked dest tag",
                            "customNameId": 0,
                            "description": "Update artifact with blocked dest tag",
                            "join": [],
                            "note": "Update artifact with blocked dest tag"
                        },
                        "functionId": 6,
                        "functionName": "update_artifact_with_blocked_dest_tag",
                        "id": "10",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal",
                            "artifact:*.id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    artifactid = container_item_0[0]\n\n    # url = phantom.build_phantom_rest_url('container' , id_value , 'artifacts')\n    # url = url + '?_filter_cef__sourceAddress=\"' + check_if_address_external__addressexternal[0] +'\"'\n    # phantom.debug(url)\n    # response = phantom.requests.get(url, verify=False)\n    # phantom.debug(response.json()['data'])\n    # for key in response.json()['data']:\n        # for item in key:\n            # if item == 'id':\n                # phantom.debug(key[item])\n                # artifactid = key[item]\n                # phantom.debug(artifactid)\n\n    parameters = []\n    parameters.append({\n        'artifact_id': artifactid,\n        'add_tags': \"Address_blocked\",\n        'remove_tags': \"\",\n    })\n\n    phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n",
                    "warnings": {},
                    "x": 840,
                    "y": 2060
                },
                "11": {
                    "customCode": "def palo_alto_add_dest_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('palo_alto_add_dest_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"PaloAlto - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    fortimanager_add_dest_ip_to_custom_list(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Palo Alto Add Dest IP to custom list",
                            "customNameId": 0,
                            "description": "Palo Alto Add Dest IP to custom list",
                            "join": [],
                            "note": "Palo Alto Add Dest IP to custom list"
                        },
                        "functionId": 11,
                        "functionName": "palo_alto_add_dest_ip_to_custom_list",
                        "id": "11",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"PaloAlto - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########",
                    "warnings": {},
                    "x": 520,
                    "y": 1600
                },
                "12": {
                    "customCode": "def fortimanager_add_src_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fortimanager_add_src_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortimanager - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_artifact_with_blocked_source_tag(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fortimanager Add Src IP to custom list",
                            "customNameId": 0,
                            "description": "Fortimanager Add Src IP to custom list",
                            "join": [],
                            "note": "Fortimanager Add Src IP to custom list"
                        },
                        "functionId": 10,
                        "functionName": "fortimanager_add_src_ip_to_custom_list",
                        "id": "12",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortimanager - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n",
                    "warnings": {},
                    "x": 80,
                    "y": 1600
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "cf_local_Set_last_automated_action_1",
                            "join": [],
                            "notRequiredJoins": [
                                "add_note_for_block_src_ip_success",
                                "add_note_for_block_dst_ip_success"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "Set_last_automated_action",
                            "repoName": "local"
                        },
                        "functionId": 1,
                        "functionName": "cf_local_set_last_automated_action_1",
                        "id": "13",
                        "type": "utility",
                        "utilities": {
                            "Set_last_automated_action": {
                                "description": "set custom field last_automated_action",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "Container_id",
                                        "name": "Container_id",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "a_status",
                                        "name": "a_status",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "set_last_automated_action",
                                "name": "set_last_automated_action"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "Set_last_automated_action": {
                                "Container_id": "container:id",
                                "a_status": "Resolved -Scheduled-"
                            }
                        }
                    },
                    "errors": {},
                    "id": "13",
                    "tab": "customFunctions",
                    "type": "utility",
                    "userCode": "    # Write your custom code here...",
                    "warnings": {},
                    "x": 200,
                    "y": 3020
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "Check artifact count",
                            "customNameId": 0,
                            "description": "Check artifact count",
                            "join": [],
                            "note": "Check artifact count"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "<=",
                                        "param": "container:artifact_count",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 19,
                        "functionName": "check_artifact_count",
                        "id": "14",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "decision",
                    "warnings": {},
                    "x": 200,
                    "y": -340
                },
                "15": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note for more than 1 artifact found",
                            "customNameId": 0,
                            "description": "Add Note for more than 1 artifact found",
                            "join": [],
                            "note": "Add Note for more than 1 artifact found"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_note_for_more_than_1_artifact_found",
                        "id": "15",
                        "parameters": {
                            "container_id": "",
                            "content": "This playbook support the event that has only 1 artifact",
                            "phase_id": "",
                            "title": "ERROR: Detected more than 1 artifact"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "action",
                    "warnings": {},
                    "x": 1840,
                    "y": 200
                },
                "16": {
                    "customCode": "def palo_alto_add_src_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('palo_alto_add_src_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"PaloAlto - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    fortimanager_add_src_ip_to_custom_list(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Palo Alto Add Src IP to custom list",
                            "customNameId": 0,
                            "description": "Palo Alto Add Src IP to custom list",
                            "join": [],
                            "note": "Palo Alto Add Src IP to custom list"
                        },
                        "functionId": 9,
                        "functionName": "palo_alto_add_src_ip_to_custom_list",
                        "id": "16",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"PaloAlto - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########",
                    "warnings": {},
                    "x": -480,
                    "y": 1600
                },
                "17": {
                    "customCode": "def firepower_add_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('firepower_add_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    IP_LIST_NAME = \"Firepower - IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    determine_src_or_dst_for_fortinet(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Firepower Add IP to custom list",
                            "customNameId": 0,
                            "description": "Firepower Add IP to custom list",
                            "join": [],
                            "note": "Firepower Add IP to custom list"
                        },
                        "functionId": 7,
                        "functionName": "firepower_add_ip_to_custom_list",
                        "id": "17",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "code",
                    "userCode": "\n    IP_LIST_NAME = \"Firepower - IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n",
                    "warnings": {},
                    "x": 200,
                    "y": 1100
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "determine src or dst for Fortinet",
                            "customNameId": 0,
                            "description": "determine src or dst for Fortinet",
                            "join": [],
                            "note": "determine src or dst for Fortinet"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "filtered-data:filter_out_sourceaddress:condition_1:artifact:*.cef.sourceAddress",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "filtered-data:filter_out_destinationaddress:condition_1:artifact:*.cef.destinationAddress",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 20,
                        "functionName": "determine_src_or_dst_for_fortinet",
                        "id": "18",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "decision",
                    "warnings": {},
                    "x": 200,
                    "y": 1340
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "Format ext IP address to contain",
                            "customNameId": 0,
                            "description": "Format ext IP address to contain",
                            "join": [],
                            "note": "Format ext IP address to contain",
                            "separator": ", "
                        },
                        "functionId": 1,
                        "functionName": "format_ext_ip_address_to_contain",
                        "id": "19",
                        "parameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "format",
                    "warnings": {},
                    "x": 200,
                    "y": 860
                },
                "2": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note for block dst IP success",
                            "customNameId": 0,
                            "description": "Add Note for block dst IP success",
                            "join": [],
                            "note": "Add Note for block dst IP success"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "add_note_for_block_dst_ip_success",
                        "id": "2",
                        "parameters": {
                            "container_id": "",
                            "content": "format_block_dest_ip_success:formatted_data",
                            "phase_id": "",
                            "title": "Containment Result"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 840,
                    "y": 2580
                },
                "20": {
                    "customCode": "def get_total_amount_of_ip_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_total_amount_of_ip_address() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    get_total_amount_of_ip_address__total_num_of_ip = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    import ipaddress\n    ipaddress_list = set(check_if_address_external__addressexternal)\n    success, message, iplist = phantom.get_list(list_name='Firepower - IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            phantom.debug(f\"Current IP: {ip[0]}\")\n            ipaddress_list.add(ip[0])\n        except:\n            continue\n    get_total_amount_of_ip_address__total_num_of_ip = len(ipaddress_list)\n    phantom.debug(f\"Total IP in the list + to be added: {get_total_amount_of_ip_address__total_num_of_ip}\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_total_amount_of_ip_address:total_num_of_ip', value=json.dumps(get_total_amount_of_ip_address__total_num_of_ip))\n    decision_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Get total amount of IP address",
                            "customNameId": 0,
                            "description": "Get total amount of IP address\n",
                            "join": [],
                            "note": "Get total amount of IP address\n"
                        },
                        "functionId": 15,
                        "functionName": "get_total_amount_of_ip_address",
                        "id": "20",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [
                            "total_num_of_ip"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import ipaddress\n    ipaddress_list = set(check_if_address_external__addressexternal)\n    success, message, iplist = phantom.get_list(list_name='Firepower - IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            phantom.debug(f\"Current IP: {ip[0]}\")\n            ipaddress_list.add(ip[0])\n        except:\n            continue\n    get_total_amount_of_ip_address__total_num_of_ip = len(ipaddress_list)\n    phantom.debug(f\"Total IP in the list + to be added: {get_total_amount_of_ip_address__total_num_of_ip}\")\n\n",
                    "warnings": {},
                    "x": 200,
                    "y": 420
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "Check if sourceAddressExternal",
                            "customNameId": 0,
                            "description": "Check if sourceAddressExternal",
                            "join": [],
                            "note": "Check if sourceAddressExternal"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "check_if_address_external:custom_function:AddressExternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "check_if_address_external:custom_function:AddressInternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "check_if_sourceaddressexternal",
                        "id": "21",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "decision",
                    "warnings": {},
                    "x": 200,
                    "y": 260
                },
                "22": {
                    "customCode": "def fortimanager_add_dest_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fortimanager_add_dest_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortimanager - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_artifact_with_blocked_dest_tag(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fortimanager Add Dest IP to custom list",
                            "customNameId": 0,
                            "description": "Fortimanager Add Dest IP to custom list",
                            "join": [],
                            "note": "Fortimanager Add Dest IP to custom list"
                        },
                        "functionId": 13,
                        "functionName": "fortimanager_add_dest_ip_to_custom_list",
                        "id": "22",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortimanager - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n",
                    "warnings": {},
                    "x": 1080,
                    "y": 1600
                },
                "23": {
                    "customCode": "def fortigate_add_src_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fortigate_add_src_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortigate - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fortigate Add Src IP to custom list",
                            "customNameId": 0,
                            "description": "Fortigate Add Src IP to custom list",
                            "join": [],
                            "note": "Fortigate Add Src IP to custom list"
                        },
                        "functionId": 14,
                        "functionName": "fortigate_add_src_ip_to_custom_list",
                        "id": "23",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortigate - Src IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n\n",
                    "warnings": {},
                    "x": -200,
                    "y": 1600
                },
                "24": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add note for no external IP",
                            "customNameId": 0,
                            "description": "Add note for no external IP",
                            "join": [],
                            "note": "Add note for no external IP"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "add_note_for_no_external_ip",
                        "id": "24",
                        "parameters": {
                            "container_id": "",
                            "content": "There is no external IP address to contain",
                            "phase_id": "",
                            "title": "External IP Not Found"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "action",
                    "warnings": {},
                    "x": 1480,
                    "y": 640
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "Format IP for markdown",
                            "customNameId": 0,
                            "description": "Format IP for markdown",
                            "join": [],
                            "note": "Format IP for markdown",
                            "separator": ", "
                        },
                        "functionId": 4,
                        "functionName": "format_ip_for_markdown",
                        "id": "25",
                        "parameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "template": "%%\n- `{0}`\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "format",
                    "warnings": {},
                    "x": 1320,
                    "y": 960
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "Add note for IP amount excess error",
                            "customNameId": 0,
                            "description": "Add note for IP amount excess error",
                            "join": [],
                            "note": "Add note for IP amount excess error"
                        },
                        "functionId": 1,
                        "functionName": "add_note_for_ip_amount_excess_error",
                        "id": "26",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_ip_for_markdown:formatted_data",
                                "note_format": "markdown",
                                "title": "Failed to contain IP address due to amount exceeded"
                            }
                        }
                    },
                    "errors": {},
                    "id": "26",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 1320,
                    "y": 1240
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "cf_local_Set_last_automated_action_2",
                            "join": [],
                            "notRequiredJoins": [
                                "Palo_Alto_Block_Src_IP",
                                "Palo_Alto_Block_Dest_IP",
                                "Fortigate_Block_Dest_IP"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "Set_last_automated_action",
                            "repoName": "local"
                        },
                        "functionId": 2,
                        "functionName": "cf_local_set_last_automated_action_2",
                        "id": "27",
                        "type": "utility",
                        "utilities": {
                            "Set_last_automated_action": {
                                "description": "set custom field last_automated_action",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "Container_id",
                                        "name": "Container_id",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "a_status",
                                        "name": "a_status",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "set_last_automated_action",
                                "name": "set_last_automated_action"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "Set_last_automated_action": {
                                "Container_id": "container:id",
                                "a_status": "Containment Failed"
                            }
                        }
                    },
                    "errors": {},
                    "id": "27",
                    "tab": "customFunctions",
                    "type": "utility",
                    "userCode": "    # Write your custom code here...",
                    "warnings": {},
                    "x": 1840,
                    "y": 2980
                },
                "28": {
                    "data": {
                        "advanced": {
                            "customName": "cf_local_Set_last_automated_action_3",
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "Set_last_automated_action",
                            "repoName": "local"
                        },
                        "functionId": 3,
                        "functionName": "cf_local_set_last_automated_action_3",
                        "id": "28",
                        "type": "utility",
                        "utilities": {
                            "Set_last_automated_action": {
                                "description": "set custom field last_automated_action",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "Container_id",
                                        "name": "Container_id",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "a_status",
                                        "name": "a_status",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "set_last_automated_action",
                                "name": "set_last_automated_action"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "Set_last_automated_action": {
                                "Container_id": "container:id",
                                "a_status": "Containment Failed"
                            }
                        }
                    },
                    "errors": {},
                    "id": "28",
                    "tab": "customFunctions",
                    "type": "utility",
                    "userCode": "    # Write your custom code here...",
                    "warnings": {},
                    "x": 1320,
                    "y": 2980
                },
                "29": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "<=",
                                        "param": "get_total_amount_of_ip_address:custom_function:total_num_of_ip",
                                        "value": "20"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 21,
                        "functionName": "decision_21",
                        "id": "29",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "decision",
                    "warnings": {},
                    "x": 200,
                    "y": 680
                },
                "3": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note for block src IP success",
                            "customNameId": 0,
                            "description": "Add Note for block src IP success",
                            "join": [],
                            "note": "Add Note for block src IP success"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "add_note_for_block_src_ip_success",
                        "id": "3",
                        "parameters": {
                            "container_id": "",
                            "content": "format_block_src_ip_success:formatted_data",
                            "phase_id": "",
                            "title": "Containment Result"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "warnings": {},
                    "x": -120,
                    "y": 2580
                },
                "30": {
                    "customCode": "def fortigate_add_dest_ip_to_custom_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fortigate_add_dest_ip_to_custom_list() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortigate - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fortigate Add Dest IP to custom list",
                            "customNameId": 0,
                            "description": "Fortigate Add Dest IP to custom list",
                            "join": [],
                            "note": "Fortigate Add Dest IP to custom list"
                        },
                        "functionId": 12,
                        "functionName": "fortigate_add_dest_ip_to_custom_list",
                        "id": "30",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    IP_LIST_NAME = \"Fortigate - Dest IP to contain\"\n    \n    for ip in check_if_address_external__addressexternal:\n        success, message, num_of_matching_row = phantom.check_list(list_name=IP_LIST_NAME, value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=IP_LIST_NAME, values=[ip])\n            \n    ########\n    ########",
                    "warnings": {},
                    "x": 800,
                    "y": 1600
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Format block dest IP success",
                            "customNameId": 0,
                            "description": "Format block dest IP success",
                            "join": [],
                            "note": "Format block dest IP success",
                            "separator": ", "
                        },
                        "functionId": 3,
                        "functionName": "format_block_dest_ip_success",
                        "id": "4",
                        "parameters": [
                            "format_ext_ip_address_to_contain:formatted_data"
                        ],
                        "template": "Destination IP address: `{0}` has been added into the waiting list to be contained by Firepower, Palo Alto, Fortigate and Fortimanager.",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "format",
                    "warnings": {},
                    "x": 840,
                    "y": 2320
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Format block src IP success",
                            "customNameId": 0,
                            "description": "Format block src IP success",
                            "join": [],
                            "notRequiredJoins": [
                                "Palo_Alto_Block_Src_IP"
                            ],
                            "note": "Format block src IP success",
                            "separator": ", "
                        },
                        "functionId": 2,
                        "functionName": "format_block_src_ip_success",
                        "id": "5",
                        "parameters": [
                            "check_if_address_external:custom_function:AddressExternal"
                        ],
                        "template": "Source IP address: `{0}` has been added into the waiting list to be contained by Firepower,  Palo Alto, Fortigate and Fortimanager.",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "format",
                    "warnings": {},
                    "x": -120,
                    "y": 2320
                },
                "6": {
                    "customCode": "def update_artifact_with_blocked_source_tag(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_with_blocked_source_tag() called')\n    \n    check_if_address_external__addressexternal = json.loads(phantom.get_run_data(key='check_if_address_external:AddressExternal'))\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    artifactid = container_item_0[0]\n\n    parameters = []\n    parameters.append({\n        'artifact_id': artifactid,\n        'add_tags': \"Address_blocked\",\n        'remove_tags': \"\",\n    })\n\n    phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    format_block_src_ip_success(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update artifact with blocked source tag",
                            "customNameId": 0,
                            "description": "Update artifact with blocked source tag",
                            "join": [],
                            "note": "Update artifact with blocked source tag"
                        },
                        "functionId": 8,
                        "functionName": "update_artifact_with_blocked_source_tag",
                        "id": "6",
                        "inputParameters": [
                            "check_if_address_external:custom_function:AddressExternal",
                            "artifact:*.id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    artifactid = container_item_0[0]\n\n    parameters = []\n    parameters.append({\n        'artifact_id': artifactid,\n        'add_tags': \"Address_blocked\",\n        'remove_tags': \"\",\n    })\n\n    phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    \n    ",
                    "warnings": {},
                    "x": -120,
                    "y": 2060
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out sourceAddress",
                            "customNameId": 0,
                            "description": "Filter out sourceAddress",
                            "join": [],
                            "note": "Filter out sourceAddress"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "not in",
                                        "param": "Address_blocked",
                                        "value": "artifact:*.tags"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.sourceAddress_malicious",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_out_sourceaddress",
                        "id": "7",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "filter",
                    "warnings": {},
                    "x": 80,
                    "y": -180
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out destinationAddress",
                            "customNameId": 0,
                            "description": "Filter out destinationAddress",
                            "join": [],
                            "note": "Filter out destinationAddress"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "not in",
                                        "param": "Address_blocked",
                                        "value": "artifact:*.tags"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.destinationAddress_malicious",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 9,
                        "functionName": "filter_out_destinationaddress",
                        "id": "8",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "filter",
                    "warnings": {},
                    "x": 360,
                    "y": -180
                },
                "9": {
                    "customCode": "def check_if_address_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_address_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_sourceaddress:condition_1:artifact:*.cef.sourceAddress'])\n    filtered_artifacts_data_2 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_destinationaddress:condition_1:artifact:*.cef.destinationAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_2_0 = [item[0] for item in filtered_artifacts_data_2]\n\n    check_if_address_external__addressexternal = None\n    check_if_address_external__addressinternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    filtered_artifacts_item_0_0 = []\n    phantom.debug(filtered_artifacts_item_1_0)\n    phantom.debug(filtered_artifacts_item_2_0)\n    if filtered_artifacts_item_1_0 != []:\n        filtered_artifacts_item_0_0 = filtered_artifacts_item_1_0\n    else:\n        filtered_artifacts_item_0_0 = filtered_artifacts_item_2_0\n    externaltemplist = []\n    internaltemplist = []\n    for ip in filtered_artifacts_item_0_0:\n        private = ipaddress.ip_address(ip).is_private\n        if private == True:\n            phantom.debug(\"{} is private\".format(ip))\n            internaltemplist.append(ip)\n        else:\n            phantom.debug(\"{} is public\".format(ip))\n            externaltemplist.append(ip)\n            \n    check_if_address_external__addressexternal = externaltemplist\n    check_if_address_external__addressinternal = internaltemplist\n        \n    ####\n    ####\n    ####\n    ####\n    ####\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_address_external:AddressExternal', value=json.dumps(check_if_address_external__addressexternal))\n    phantom.save_run_data(key='check_if_address_external:AddressInternal', value=json.dumps(check_if_address_external__addressinternal))\n    check_if_sourceaddressexternal(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if Address external",
                            "customNameId": 0,
                            "description": "Check if Address external",
                            "join": [],
                            "note": "Check if sourceAddress external"
                        },
                        "functionId": 1,
                        "functionName": "check_if_address_external",
                        "id": "9",
                        "inputParameters": [
                            "filtered-data:filter_out_sourceaddress:condition_1:artifact:*.cef.sourceAddress",
                            "filtered-data:filter_out_destinationaddress:condition_1:artifact:*.cef.destinationAddress"
                        ],
                        "outputVariables": [
                            "AddressExternal",
                            "AddressInternal"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    filtered_artifacts_item_0_0 = []\n    phantom.debug(filtered_artifacts_item_1_0)\n    phantom.debug(filtered_artifacts_item_2_0)\n    if filtered_artifacts_item_1_0 != []:\n        filtered_artifacts_item_0_0 = filtered_artifacts_item_1_0\n    else:\n        filtered_artifacts_item_0_0 = filtered_artifacts_item_2_0\n    externaltemplist = []\n    internaltemplist = []\n    for ip in filtered_artifacts_item_0_0:\n        private = ipaddress.ip_address(ip).is_private\n        if private == True:\n            phantom.debug(\"{} is private\".format(ip))\n            internaltemplist.append(ip)\n        else:\n            phantom.debug(\"{} is public\".format(ip))\n            externaltemplist.append(ip)\n            \n    check_if_address_external__addressexternal = externaltemplist\n    check_if_address_external__addressinternal = internaltemplist\n        \n    ####\n    ####\n    ####\n    ####\n    ####",
                    "warnings": {},
                    "x": 200,
                    "y": 0
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 159,
                "playbook_name": "KTB CONTAIN EXTERNAL IP",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "4.10.7.63984"
    },
    "create_time": "2025-03-27T15:21:02.551714+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}