{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_12",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_13_to_port_5",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_10",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_2",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_8_to_port_6",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_2",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_4_to_port_15",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_15_to_port_17",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_12_to_port_13",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_9_to_port_16",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_16_to_port_4",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_17_to_port_8",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_17_to_port_14",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_14_to_port_11",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_11_to_port_13",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_9",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                }
            ],
            "hash": "24a94d1ab3b60b90cf4bad8cf680f9f8b2cb2d1c",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 480,
                    "y": -460
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 880,
                    "y": 2200
                },
                "10": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "set_status_set_severity_promote_to_case_1",
                        "id": "10",
                        "type": "utility",
                        "utilities": {
                            "promote": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "templates",
                                        "description": "",
                                        "label": "template",
                                        "name": "template",
                                        "placeholder": "Select a template",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "promote to case",
                                "name": "promote",
                                "refreshNotableData": true
                            },
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "promote": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "template": "KTB Workbook"
                            },
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "in progress"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 440,
                    "y": 1700
                },
                "11": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add note for SPF failed",
                            "customNameId": 0,
                            "description": "Add note for SPF failed",
                            "join": [],
                            "note": "Add note for SPF failed"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "add_note_for_spf_failed",
                        "id": "11",
                        "parameters": {
                            "container_id": "",
                            "content": "prepare_for_spf_failed_result:formatted_data",
                            "phase_id": "",
                            "title": "Playbook Summary: SPF validation flagged this e-mail as malicious"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "action",
                    "warnings": {},
                    "x": 760,
                    "y": 1000
                },
                "12": {
                    "customCode": "def check_each_artifact_and_add_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_each_artifact_and_add_note() called')\n    \n    input_parameter_0 = \"\"\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['artifact:*.cef.requestURL', 'artifact:*.cef.requestURL_malicious'])\n    filtered_artifacts_data_2 = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationDnsDomain', 'artifact:*.cef.destinationDnsDomain_malicious'])\n    filtered_artifacts_data_3 = phantom.collect2(container=container, datapath=['artifact:*.cef.fileHashSha256', 'artifact:*.cef.fileHash_malicious'])\n    filtered_artifacts_data_4 = phantom.collect2(container=container, datapath=['artifact:*.cef.fromEmail_actual_sender', 'artifact:*.cef.fromEmail_actual_sender_malicious'])\n    malicious_urls = [item[0] for item in filtered_artifacts_data_1]\n    malicious_domains = [item[0] for item in filtered_artifacts_data_2]\n    malicious_files = [item[0] for item in filtered_artifacts_data_3]\n    malicious_mails = [item[0] for item in filtered_artifacts_data_4]\n\n    is_malicious_urls = [item[1] for item in filtered_artifacts_data_1]\n    is_malicious_domains = [item[1] for item in filtered_artifacts_data_2]\n    is_malicious_files = [item[1] for item in filtered_artifacts_data_3]\n    is_malicious_mails = [item[1] for item in filtered_artifacts_data_4]\n    \n    content = \"\"\n    \n    if malicious_urls:\n        content += \"**List of malicious URL(s):**\\n\"\n        for i in range(len(malicious_urls)):\n            if is_malicious_urls[i]:\n                content += f\"- `{malicious_urls[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_domains:\n        content += \"**List of malicious domain(s):**\\n\"\n        for i in range(len(malicious_domains)):\n            if is_malicious_domains[i]:\n                content += f\"- `{malicious_domains[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_files:\n        content += \"**List of malicious file(s):**\\n\"\n        for i in range(len(malicious_files)):\n            if is_malicious_files[i]:\n                content += f\"- `{malicious_files[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_mails:\n        content += \"**List of malicious e-mail address(es):**\\n\"\n        for i in range(len(malicious_mails)):\n            if is_malicious_mails[i]:\n                content += f\"- `{malicious_mails[i]}`\\n\"\n        content += \"\\n\\n\"\n        \n    parameters = []\n    \n    # build parameters list for 'add_note_2' call\n    parameters.append({\n        'title': \"Playbook Summary: Found malicious artifact(s) on this e-mail\",\n        'content': content,\n        'container_id': \"\",\n        'phase_id': \"\",\n    })\n\n    phantom.act(action=\"add note\", parameters=parameters, assets=['phantom asset'], name=\"add_note_summary\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_format_user_email_being_sent(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check each artifact and add note",
                            "customNameId": 0,
                            "description": "Check each artifact and add note",
                            "join": [],
                            "note": "Check each artifact and add note"
                        },
                        "functionId": 2,
                        "functionName": "check_each_artifact_and_add_note",
                        "id": "12",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['artifact:*.cef.requestURL', 'artifact:*.cef.requestURL_malicious'])\n    filtered_artifacts_data_2 = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationDnsDomain', 'artifact:*.cef.destinationDnsDomain_malicious'])\n    filtered_artifacts_data_3 = phantom.collect2(container=container, datapath=['artifact:*.cef.fileHashSha256', 'artifact:*.cef.fileHash_malicious'])\n    filtered_artifacts_data_4 = phantom.collect2(container=container, datapath=['artifact:*.cef.fromEmail_actual_sender', 'artifact:*.cef.fromEmail_actual_sender_malicious'])\n    malicious_urls = [item[0] for item in filtered_artifacts_data_1]\n    malicious_domains = [item[0] for item in filtered_artifacts_data_2]\n    malicious_files = [item[0] for item in filtered_artifacts_data_3]\n    malicious_mails = [item[0] for item in filtered_artifacts_data_4]\n\n    is_malicious_urls = [item[1] for item in filtered_artifacts_data_1]\n    is_malicious_domains = [item[1] for item in filtered_artifacts_data_2]\n    is_malicious_files = [item[1] for item in filtered_artifacts_data_3]\n    is_malicious_mails = [item[1] for item in filtered_artifacts_data_4]\n    \n    content = \"\"\n    \n    if malicious_urls:\n        content += \"**List of malicious URL(s):**\\n\"\n        for i in range(len(malicious_urls)):\n            if is_malicious_urls[i]:\n                content += f\"- `{malicious_urls[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_domains:\n        content += \"**List of malicious domain(s):**\\n\"\n        for i in range(len(malicious_domains)):\n            if is_malicious_domains[i]:\n                content += f\"- `{malicious_domains[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_files:\n        content += \"**List of malicious file(s):**\\n\"\n        for i in range(len(malicious_files)):\n            if is_malicious_files[i]:\n                content += f\"- `{malicious_files[i]}`\\n\"\n        content += \"\\n\\n\"\n    if malicious_mails:\n        content += \"**List of malicious e-mail address(es):**\\n\"\n        for i in range(len(malicious_mails)):\n            if is_malicious_mails[i]:\n                content += f\"- `{malicious_mails[i]}`\\n\"\n        content += \"\\n\\n\"\n        \n    parameters = []\n    \n    # build parameters list for 'add_note_2' call\n    parameters.append({\n        'title': \"Playbook Summary: Found malicious artifact(s) on this e-mail\",\n        'content': content,\n        'container_id': \"\",\n        'phase_id': \"\",\n    })\n\n    phantom.act(action=\"add note\", parameters=parameters, assets=['phantom asset'], name=\"add_note_summary\")\n\n",
                    "warnings": {},
                    "x": 440,
                    "y": 540
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "Format user email being sent",
                            "customNameId": 0,
                            "description": "Format user email being sent",
                            "join": [],
                            "notRequiredJoins": [
                                "add_note_for_spf_failed"
                            ],
                            "note": "Format user email being sent",
                            "separator": ", "
                        },
                        "functionId": 7,
                        "functionName": "format_user_email_being_sent",
                        "id": "13",
                        "parameters": [
                            "distinguish_email_artifacts:custom_function:suspected_sender_email_address"
                        ],
                        "template": "This is an automated message to inform you regarding the e-mail you reported to us recently.\nThe e-mail you reported (sent by `{0}`) is malicious and you should not open any attachments or click any links.",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "format",
                    "warnings": {},
                    "x": 440,
                    "y": 1260
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare for SPF failed result",
                            "customNameId": 0,
                            "description": "Prepare for SPF failed result",
                            "join": [],
                            "note": "Prepare for SPF failed result",
                            "separator": ", "
                        },
                        "functionId": 10,
                        "functionName": "prepare_for_spf_failed_result",
                        "id": "14",
                        "parameters": [
                            "distinguish_email_artifacts:custom_function:suspected_sender_email_address"
                        ],
                        "template": "This e-mail (sent by `{0}`) is suspected to be MALICIOUS as it didn't pass SPF validation.",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "format",
                    "warnings": {},
                    "x": 760,
                    "y": 720
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out email contains SPF",
                            "customNameId": 0,
                            "description": "Filter out email contains SPF",
                            "join": [],
                            "note": "Filter out email contains SPF"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "filtered-data:get_email_artifacts:condition_1:artifact:*.cef.fromEmail_actual_sender",
                                        "value": "distinguish_email_artifacts:custom_function:suspected_sender_email_address"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "filter_out_email_contains_spf",
                        "id": "15",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "filter",
                    "warnings": {},
                    "x": 760,
                    "y": 380
                },
                "16": {
                    "customCode": "def distinguish_email_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('distinguish_email_artifacts() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:get_email_artifacts:condition_1:artifact:*.id', 'filtered-data:get_email_artifacts:condition_1:artifact:*.cef.fromEmail_actual_sender', 'filtered-data:get_email_artifacts:condition_1:artifact:*.cef.emailHeaders.Date'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_2 = [item[2] for item in filtered_artifacts_data_1]\n\n    distinguish_email_artifacts__suspected_sender_email_address = None\n    distinguish_email_artifacts__user_email_address = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    from datetime import datetime \n    # datetime format: \"Wed, 1 Jun 2022 15:37:58 +0700\"\n    artifact_ids = filtered_artifacts_item_1_0\n    sender_emails = filtered_artifacts_item_1_1\n    timestamps = [datetime.strptime(datetime_str, '%a, %d %b %Y %H:%M:%S %z') for datetime_str in filtered_artifacts_item_1_2]\n    \n    # init variables\n    suspected_sender_email_address = sender_emails[0]\n    user_email_address = sender_emails[0]\n    max_timestamp = timestamps[0]\n    min_timestamp = timestamps[0]\n    \n    #timestamps =  [ datetime_str.split(\"+\") for datetime_str in filtered_artifacts_item_1_2]\n    \n    #phantom.debug(artifact_ids)\n    #phantom.debug(sender_emails)\n    #for timestamp in timestamps:\n    #    phantom.debug(timestamp)\n    #phantom.debug(timestamps[0] > timestamps[1])\n    for i in range(len(artifact_ids)):\n        if timestamps[i] > max_timestamp:\n            user_email_address = sender_emails[i]\n            max_timestamp = timestamps[i]\n        \n        if timestamps[i] < min_timestamp:\n            suspected_sender_email_address = sender_emails[i]\n            min_timestamp = timestamps[i]\n    \n    #phantom.debug(f\"User: {user_email_address}\")\n    #phantom.debug(f\"Suspect: {suspected_sender_email_address}\")\n    distinguish_email_artifacts__suspected_sender_email_address = suspected_sender_email_address\n    distinguish_email_artifacts__user_email_address = user_email_address\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='distinguish_email_artifacts:suspected_sender_email_address', value=json.dumps(distinguish_email_artifacts__suspected_sender_email_address))\n    phantom.save_run_data(key='distinguish_email_artifacts:user_email_address', value=json.dumps(distinguish_email_artifacts__user_email_address))\n    check_if_there_are_malicious_artifacts(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Distinguish email artifacts",
                            "customNameId": 0,
                            "description": "Distinguish email artifacts",
                            "join": [],
                            "note": "Distinguish email artifacts"
                        },
                        "functionId": 3,
                        "functionName": "distinguish_email_artifacts",
                        "id": "16",
                        "inputParameters": [
                            "filtered-data:get_email_artifacts:condition_1:artifact:*.id",
                            "filtered-data:get_email_artifacts:condition_1:artifact:*.cef.fromEmail_actual_sender",
                            "filtered-data:get_email_artifacts:condition_1:artifact:*.cef.emailHeaders.Date"
                        ],
                        "outputVariables": [
                            "suspected_sender_email_address",
                            "user_email_address"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "code",
                    "userCode": "    from datetime import datetime \n    # datetime format: \"Wed, 1 Jun 2022 15:37:58 +0700\"\n    artifact_ids = filtered_artifacts_item_1_0\n    sender_emails = filtered_artifacts_item_1_1\n    timestamps = [datetime.strptime(datetime_str, '%a, %d %b %Y %H:%M:%S %z') for datetime_str in filtered_artifacts_item_1_2]\n    \n    # init variables\n    suspected_sender_email_address = sender_emails[0]\n    user_email_address = sender_emails[0]\n    max_timestamp = timestamps[0]\n    min_timestamp = timestamps[0]\n    \n    #timestamps =  [ datetime_str.split(\"+\") for datetime_str in filtered_artifacts_item_1_2]\n    \n    #phantom.debug(artifact_ids)\n    #phantom.debug(sender_emails)\n    #for timestamp in timestamps:\n    #    phantom.debug(timestamp)\n    #phantom.debug(timestamps[0] > timestamps[1])\n    for i in range(len(artifact_ids)):\n        if timestamps[i] > max_timestamp:\n            user_email_address = sender_emails[i]\n            max_timestamp = timestamps[i]\n        \n        if timestamps[i] < min_timestamp:\n            suspected_sender_email_address = sender_emails[i]\n            min_timestamp = timestamps[i]\n    \n    #phantom.debug(f\"User: {user_email_address}\")\n    #phantom.debug(f\"Suspect: {suspected_sender_email_address}\")\n    distinguish_email_artifacts__suspected_sender_email_address = suspected_sender_email_address\n    distinguish_email_artifacts__user_email_address = user_email_address\n\n",
                    "warnings": {},
                    "x": 440,
                    "y": 100
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "SPF check",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "not in",
                                        "param": "pass (",
                                        "value": "filtered-data:filter_out_email_contains_spf:condition_1:artifact:*.cef.emailHeaders.Received-SPF"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "spf_check",
                        "id": "17",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "decision",
                    "warnings": {},
                    "x": 760,
                    "y": 520
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "cf_local_Set_last_automated_action_1",
                            "join": [],
                            "notRequiredJoins": [
                                "send_email_1",
                                "add_note_4"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "Set_last_automated_action",
                            "repoName": "local"
                        },
                        "functionId": 1,
                        "functionName": "cf_local_set_last_automated_action_1",
                        "id": "2",
                        "type": "utility",
                        "utilities": {
                            "Set_last_automated_action": {
                                "description": "set custom field last_automated_action",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "Container_id",
                                        "name": "Container_id",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "a_status",
                                        "name": "a_status",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "set_last_automated_action",
                                "name": "set_last_automated_action"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "Set_last_automated_action": {
                                "Container_id": "container:id",
                                "a_status": "Resolved"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "tab": "customFunctions",
                    "type": "utility",
                    "userCode": "    # Write your custom code here...",
                    "warnings": {},
                    "x": 840,
                    "y": 1960
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "playbook_local_KTB_ENRICH_EMAIL_1",
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_local_KTB_ENRICH_EMAIL_1",
                        "id": "3",
                        "inputs": {},
                        "playbookName": "KTB-ENRICH-EMAIL_modern",
                        "playbookRepo": 3,
                        "playbookRepoName": "mfec_csoc_playbook",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "playbook",
                    "warnings": {},
                    "x": 440,
                    "y": -300
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Check if there are malicious artifacts",
                            "customNameId": 0,
                            "description": "Check if there are malicious artifacts",
                            "join": [],
                            "note": "Check if there are malicious artifacts",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.requestURL_malicious",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationDnsDomain_malicious",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.fileHash_malicious",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.fromEmail_actual_sender_malicious",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "check_if_there_are_malicious_artifacts",
                        "id": "4",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "decision",
                    "warnings": {},
                    "x": 440,
                    "y": 340
                },
                "5": {
                    "data": {
                        "action": "send email",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Send email to affected user",
                            "customNameId": 0,
                            "description": "Send email to affected user",
                            "join": [],
                            "note": "Send email to affected user"
                        },
                        "connector": "SMTP",
                        "connectorConfigs": [
                            "smtp asset"
                        ],
                        "connectorId": "45bb6f37-4478-499b-b4a3-51ecfa62b78c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "send_email_to_affected_user",
                        "id": "5",
                        "parameters": {
                            "attachments": "",
                            "bcc": "",
                            "body": "format_user_email_being_sent:formatted_data",
                            "cc": "",
                            "from": "no-reply-phantom@ktbcs.co.th",
                            "headers": "",
                            "subject": "[SOAR] Suspicious E-mail Notification",
                            "to": "distinguish_email_artifacts:custom_function:user_email_address"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "to"
                            },
                            {
                                "data_type": "string",
                                "field": "body"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "action",
                    "warnings": {},
                    "x": 440,
                    "y": 1480
                },
                "6": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note non malicious",
                            "customNameId": 0,
                            "delayTime": 0.0,
                            "description": "Add Note non malicious",
                            "join": [],
                            "note": "Add Note non malicious"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "add_note_non_malicious",
                        "id": "6",
                        "parameters": {
                            "container_id": "",
                            "content": "format_note_non_malicious:formatted_data",
                            "phase_id": "",
                            "title": "Playbook Summary: Non-malicious"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "action",
                    "warnings": {},
                    "x": 1040,
                    "y": 1000
                },
                "7": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "set_status_set_severity_2",
                        "id": "7",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "open"
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 1040,
                    "y": 1300
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "Format note non malicious",
                            "customNameId": 0,
                            "description": "Format note non malicious ",
                            "join": [],
                            "note": "Format note non malicious ",
                            "separator": ", "
                        },
                        "functionId": 8,
                        "functionName": "format_note_non_malicious",
                        "id": "8",
                        "parameters": [
                            "0"
                        ],
                        "template": "No malicious artifacts were found on this e-mail and SPF validation is pass.",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "format",
                    "warnings": {},
                    "x": 1040,
                    "y": 720
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "Get email artifacts",
                            "customNameId": 0,
                            "description": "Get email artifacts",
                            "join": [],
                            "note": "Get email artifacts",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.fromEmail_actual_sender",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "get_email_artifacts",
                        "id": "9",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "filter",
                    "warnings": {},
                    "x": 440,
                    "y": -20
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 227,
                "playbook_name": "PLAYBOOK-ENRICH-INDICATOR-EMAIL-01",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "4.10.7.63984"
    },
    "create_time": "2025-03-27T15:21:04.980522+00:00",
    "draft_mode": false,
    "labels": [
        "email"
    ],
    "tags": []
}