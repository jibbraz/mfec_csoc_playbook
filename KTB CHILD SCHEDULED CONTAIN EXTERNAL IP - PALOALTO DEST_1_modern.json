{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "USE CASE: This playbook is used to contain the threat on External IP address in regular time set by Timer App",
            "edges": [
                {
                    "id": "port_14_to_port_8",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_8_to_port_15",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_18_to_port_6",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_5_to_port_14",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_5",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_6_to_port_11",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_11_to_port_10",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_2",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_4",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_2_to_port_9",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_15_to_port_3",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_4_to_port_7",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_9_to_port_7",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_3_to_port_7",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_13_to_port_5",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_16_to_port_17",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_0_to_port_12",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_12_to_port_13",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_19",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_19_to_port_16",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                }
            ],
            "globalCustomCode": "IP_CONTAIN_GLOBAL_RESULTS = []",
            "hash": "a5e5041b0c93870de8095e4c2f5f10d9e27e3d28",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 200,
                    "y": -600
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 440,
                    "y": 3580
                },
                "10": {
                    "customCode": "def add_note_for_the_result(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_for_the_result() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    check_the_result__results = json.loads(phantom.get_run_data(key='check_the_result:results'))\n    # collect data for 'add_note_for_the_result' call\n\n    parameters = []\n    \n    # build parameters list for 'add_note_for_the_result' call\n    content = f\"| IP Address \t| Status  \t|\\n\"\n    content += f\"|------------\t|---------\t|\\n\"\n    for result in check_the_result__results:\n        content += f\"| {result['ip']}    \t| {result['status']} \t|\\n\"\n    content += \"---\\n\"\n    \n    parameters.append({\n        'title': \"Destination Address: Result Summary\",\n        'content': content,\n        'container_id': \"\",\n        'phase_id': \"\",\n    })\n\n    phantom.act(action=\"add note\", parameters=parameters, assets=['phantom asset'], callback=decision_9, name=\"add_note_for_the_result\")\n\n    return",
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note for the result",
                            "customNameId": 0,
                            "description": "Add Note for the result",
                            "join": [],
                            "note": "Add Note for the result"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "add_note_for_the_result",
                        "id": "10",
                        "parameters": {
                            "container_id": "",
                            "content": "check_the_result:custom_function:results",
                            "phase_id": "",
                            "title": "Title test"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "action",
                    "warnings": {},
                    "x": 160,
                    "y": 2480
                },
                "11": {
                    "customCode": "def check_the_result(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_the_result() called')\n    \n    collect_all_ip_address__all_ip_address_list = json.loads(phantom.get_run_data(key='collect_all_ip_address:all_IP_address_list'))\n\n    check_the_result__results = None\n    check_the_result__summary_result = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    global IP_CONTAIN_GLOBAL_RESULTS\n    check_the_result__summary_result = \"success\"\n    # Write your custom code here...\n    for row in IP_CONTAIN_GLOBAL_RESULTS:\n        if row['status'] != \"success\":\n            check_the_result__summary_result = \"failed\"\n    \n    phantom.debug(IP_CONTAIN_GLOBAL_RESULTS)\n    phantom.debug(check_the_result__summary_result)\n    check_the_result__results = IP_CONTAIN_GLOBAL_RESULTS\n\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_the_result:results', value=json.dumps(check_the_result__results))\n    phantom.save_run_data(key='check_the_result:summary_result', value=json.dumps(check_the_result__summary_result))\n    add_note_for_the_result(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check the result",
                            "customNameId": 0,
                            "description": "Check the result",
                            "join": [],
                            "note": "Check the result"
                        },
                        "functionId": 8,
                        "functionName": "check_the_result",
                        "id": "11",
                        "inputParameters": [
                            "collect_all_ip_address:custom_function:all_IP_address_list"
                        ],
                        "outputVariables": [
                            "results",
                            "summary_result"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": "    global IP_CONTAIN_GLOBAL_RESULTS\n    check_the_result__summary_result = \"success\"\n    # Write your custom code here...\n    for row in IP_CONTAIN_GLOBAL_RESULTS:\n        if row['status'] != \"success\":\n            check_the_result__summary_result = \"failed\"\n    \n    phantom.debug(IP_CONTAIN_GLOBAL_RESULTS)\n    phantom.debug(check_the_result__summary_result)\n    check_the_result__results = IP_CONTAIN_GLOBAL_RESULTS\n\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################",
                    "warnings": {},
                    "x": 160,
                    "y": 2180
                },
                "12": {
                    "customCode": "def clear_global_variable(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('clear_global_variable() called')\n    \n    input_parameter_0 = \"\"\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    global IP_CONTAIN_GLOBAL_RESULTS \n    IP_CONTAIN_GLOBAL_RESULTS = []\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    collect_all_ip_address(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Clear Global Variable",
                            "customNameId": 0,
                            "description": "Clear Global Variable",
                            "join": [],
                            "note": "Clear Global Variable"
                        },
                        "functionId": 13,
                        "functionName": "clear_global_variable",
                        "id": "12",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    global IP_CONTAIN_GLOBAL_RESULTS \n    IP_CONTAIN_GLOBAL_RESULTS = []\n\n",
                    "warnings": {},
                    "x": 160,
                    "y": -460
                },
                "13": {
                    "customCode": "def collect_all_ip_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('collect_all_ip_address() called')\n    \n    input_parameter_0 = \"\"\n\n    collect_all_ip_address__all_ip_address_list = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    collect_all_ip_address__all_ip_address_list = []\n    import ipaddress\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            collect_all_ip_address__all_ip_address_list.append(ip[0])\n        except:\n            continue\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='collect_all_ip_address:all_IP_address_list', value=json.dumps(collect_all_ip_address__all_ip_address_list))\n    join_decision_8(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Collect all IP address",
                            "customNameId": 0,
                            "description": "Collect all IP address",
                            "join": [],
                            "note": "Collect all IP address"
                        },
                        "functionId": 11,
                        "functionName": "collect_all_ip_address",
                        "id": "13",
                        "inputParameters": [],
                        "outputVariables": [
                            "all_IP_address_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    collect_all_ip_address__all_ip_address_list = []\n    import ipaddress\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            collect_all_ip_address__all_ip_address_list.append(ip[0])\n        except:\n            continue\n\n",
                    "warnings": {},
                    "x": 160,
                    "y": -180
                },
                "14": {
                    "customCode": "def get_the_top_ip_address_from_the_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_the_top_ip_address_from_the_list() called')\n    \n    input_parameter_0 = \"\"\n\n    get_the_top_ip_address_from_the_list__top_ip_address = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    import ipaddress\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            phantom.debug(f\"Top IP: {ip[0]}\")\n            get_the_top_ip_address_from_the_list__top_ip_address = ip[0]\n            break\n        except:\n            continue\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_the_top_ip_address_from_the_list:top_ip_address', value=json.dumps(get_the_top_ip_address_from_the_list__top_ip_address))\n    decision_1(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Get the top IP address from the list",
                            "customNameId": 0,
                            "description": "Get the top IP address from the list",
                            "join": [],
                            "note": "Get the top IP address from the list"
                        },
                        "functionId": 1,
                        "functionName": "get_the_top_ip_address_from_the_list",
                        "id": "14",
                        "inputParameters": [],
                        "outputVariables": [
                            "top_ip_address"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import ipaddress\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            phantom.debug(f\"Top IP: {ip[0]}\")\n            get_the_top_ip_address_from_the_list__top_ip_address = ip[0]\n            break\n        except:\n            continue\n\n",
                    "warnings": {},
                    "x": 160,
                    "y": 300
                },
                "15": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add Note for No IP address to contain",
                            "customNameId": 0,
                            "description": "Add Note for No IP address to contain",
                            "join": [],
                            "note": "Add Note for No IP address to contain"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_note_for_no_ip_address_to_contain",
                        "id": "15",
                        "parameters": {
                            "container_id": "",
                            "content": "There is no IP address to contain from the custom list.",
                            "phase_id": "",
                            "title": "Destination Address: No IP address to contain"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "action",
                    "warnings": {},
                    "x": 640,
                    "y": 780
                },
                "16": {
                    "customCode": "def save_the_result_to_global_var(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('save_the_result_to_global_var() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['block_ip_6:action_result.parameter.ip', 'block_ip_6:action_result.status'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    global IP_CONTAIN_GLOBAL_RESULTS\n    \n    phantom.debug(IP_CONTAIN_GLOBAL_RESULTS)\n    phantom.debug(\"------------------\")\n    phantom.debug(results_item_1_0)\n    phantom.debug(results_item_1_1)\n    phantom.debug(\"------------------\")\n    \n    result_summary = \"success\"\n\n    for result_per_asset in results_item_1_1:\n        if result_per_asset != \"success\":\n            result_summary = \"failed\"\n                \n    IP_CONTAIN_GLOBAL_RESULTS.append({'ip': results_item_1_0[0], 'status': result_summary})\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    sleep(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Save the result to global var",
                            "customNameId": 0,
                            "description": "Save the result to global var",
                            "join": [],
                            "note": "Save the result to global var"
                        },
                        "functionId": 12,
                        "functionName": "save_the_result_to_global_var",
                        "id": "16",
                        "inputParameters": [
                            "block_ip_6:action_result.parameter.ip",
                            "block_ip_6:action_result.status"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    global IP_CONTAIN_GLOBAL_RESULTS\n    \n    phantom.debug(IP_CONTAIN_GLOBAL_RESULTS)\n    phantom.debug(\"------------------\")\n    phantom.debug(results_item_1_0)\n    phantom.debug(results_item_1_1)\n    phantom.debug(\"------------------\")\n    \n    result_summary = \"success\"\n\n    for result_per_asset in results_item_1_1:\n        if result_per_asset != \"success\":\n            result_summary = \"failed\"\n                \n    IP_CONTAIN_GLOBAL_RESULTS.append({'ip': results_item_1_0[0], 'status': result_summary})\n\n",
                    "warnings": {},
                    "x": 160,
                    "y": 1080
                },
                "17": {
                    "data": {
                        "action": "no op",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Sleep",
                            "customNameId": 0,
                            "description": "sleep",
                            "join": [],
                            "note": "sleep"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "sleep",
                        "id": "17",
                        "parameters": {
                            "sleep_seconds": "120"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "numeric",
                                "field": "sleep_seconds"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "warnings": {},
                    "x": 160,
                    "y": 1400
                },
                "18": {
                    "customCode": "def remove_the_top_ip_address_from_the_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('remove_the_top_ip_address_from_the_list() called')\n    \n    get_the_top_ip_address_from_the_list__top_ip_address = json.loads(phantom.get_run_data(key='get_the_top_ip_address_from_the_list:top_ip_address'))\n\n    remove_the_top_ip_address_from_the_list__ip_count = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    import ipaddress\n    remove_the_top_ip_address_from_the_list__ip_count = 0\n    \n    phantom.debug(f\"Popping out IP: {get_the_top_ip_address_from_the_list__top_ip_address}\")\n    phantom.delete_from_list(list_name=\"PaloAlto - Dest IP to contain\", value=get_the_top_ip_address_from_the_list__top_ip_address, column=None, remove_all=False, remove_row=False)\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            remove_the_top_ip_address_from_the_list__ip_count += 1\n        except:\n            continue\n\n    phantom.debug(f\"Current number of IP address remaining in the list: {remove_the_top_ip_address_from_the_list__ip_count}\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='remove_the_top_ip_address_from_the_list:ip_count', value=json.dumps(remove_the_top_ip_address_from_the_list__ip_count))\n    decision_7(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Remove the top IP address from the list",
                            "customNameId": 0,
                            "description": "Remove the top IP address from the list",
                            "join": [],
                            "note": "Remove the top IP address from the list"
                        },
                        "functionId": 7,
                        "functionName": "remove_the_top_ip_address_from_the_list",
                        "id": "18",
                        "inputParameters": [
                            "get_the_top_ip_address_from_the_list:custom_function:top_ip_address"
                        ],
                        "outputVariables": [
                            "ip_count"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import ipaddress\n    remove_the_top_ip_address_from_the_list__ip_count = 0\n    \n    phantom.debug(f\"Popping out IP: {get_the_top_ip_address_from_the_list__top_ip_address}\")\n    phantom.delete_from_list(list_name=\"PaloAlto - Dest IP to contain\", value=get_the_top_ip_address_from_the_list__top_ip_address, column=None, remove_all=False, remove_row=False)\n    success, message, iplist = phantom.get_list(list_name='PaloAlto - Dest IP to contain')\n    for ip in iplist:\n        try:\n            ipaddress.ip_address(ip[0])\n            remove_the_top_ip_address_from_the_list__ip_count += 1\n        except:\n            continue\n\n    phantom.debug(f\"Current number of IP address remaining in the list: {remove_the_top_ip_address_from_the_list__ip_count}\")\n\n",
                    "warnings": {},
                    "x": 160,
                    "y": 1720
                },
                "19": {
                    "data": {
                        "action": "block ip",
                        "actionType": "contain",
                        "advanced": {
                            "delayTime": 0.0,
                            "description": "Palo Alto Block Dest IP",
                            "join": []
                        },
                        "connector": "CX Palo Alto Networks Firewall",
                        "connectorId": "e225e4ba-65be-438d-835f-95fe5da6b6d2",
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "block_ip_6",
                        "id": "19",
                        "parameters": {
                            "ip": "get_the_top_ip_address_from_the_list:custom_function:top_ip_address",
                            "is_source_address": "False",
                            "vsys": "vsys1"
                        },
                        "type": "action"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "action",
                    "warnings": {},
                    "x": 160,
                    "y": 780
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "check_the_result:custom_function:summary_result",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 9,
                        "functionName": "decision_9",
                        "id": "2",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "decision",
                    "warnings": {},
                    "x": 160,
                    "y": 2780
                },
                "3": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "set_severity_set_status_3",
                        "id": "3",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "closed"
                            }
                        }
                    },
                    "errors": {},
                    "id": "3",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 640,
                    "y": 2980
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "set_severity_set_status_1",
                        "id": "4",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "closed"
                            }
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 160,
                    "y": 2980
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "notRequiredJoins": [
                                "FMC_Block_IP"
                            ]
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "1",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 8,
                        "functionName": "decision_8",
                        "id": "5",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "5",
                    "joinCustomCode": "def join_decision_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_decision_8() called')\n    \n    # if the joined function has already been called, do nothing\n    #if phantom.get_run_data(key='join_decision_8_called'):\n    #    return\n\n    # no callbacks to check, call connected block \"decision_8\"\n    phantom.save_run_data(key='join_decision_8_called', value='decision_8', auto=True)\n\n    decision_8(container=container, handle=handle)\n    \n    return",
                    "type": "decision",
                    "warnings": {},
                    "x": 160,
                    "y": 160
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "remove_the_top_ip_address_from_the_list:custom_function:ip_count",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "decision_7",
                        "id": "6",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "decision",
                    "warnings": {},
                    "x": 160,
                    "y": 2000
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "cf_local_set_custom_field_incident_type_1",
                            "join": [],
                            "notRequiredJoins": [
                                "add_note_for_no_ip_address_to_contain",
                                "add_note_for_the_result"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "set_custom_field_incident_type",
                            "repoName": "local"
                        },
                        "functionId": 1,
                        "functionName": "cf_local_set_custom_field_incident_type_1",
                        "id": "7",
                        "type": "utility",
                        "utilities": {
                            "set_custom_field_incident_type": {
                                "description": "set custom field \"Incident Type\"",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "Container_id",
                                        "name": "Container_id",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "incident_type",
                                        "name": "incident_type",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "set_custom_field_incident_type",
                                "name": "set_custom_field_incident_type"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "set_custom_field_incident_type": {
                                "Container_id": "container:id",
                                "incident_type": "Operation"
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "tab": "customFunctions",
                    "type": "utility",
                    "userCode": "    # Write your custom code here...",
                    "warnings": {},
                    "x": 400,
                    "y": 3280
                },
                "8": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_the_top_ip_address_from_the_list:custom_function:top_ip_address",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "8",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "decision",
                    "warnings": {},
                    "x": 160,
                    "y": 620
                },
                "9": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "set_severity_set_status_2",
                        "id": "9",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "open"
                            }
                        }
                    },
                    "errors": {},
                    "id": "9",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 400,
                    "y": 2980
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 427,
                "playbook_name": "KTB CHILD SCHEDULED CONTAIN EXTERNAL IP - PALOALTO DEST_1",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "6.2.1.305"
    },
    "create_time": "2025-06-02T08:14:57.565786+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}