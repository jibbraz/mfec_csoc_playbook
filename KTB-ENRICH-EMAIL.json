{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "import ipaddress",
            "description": "USE CASE: This playbook will perform enrichment tasks on the indicators",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'cf_local_Set_last_automated_action_1' block\n    cf_local_Set_last_automated_action_1(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e7d1249-fc1d-4b42-b2e0-46c87f70f4f9",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 24,
                        "line_start": 16,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -840,
                            "y": 1360
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9456df90-7767-48c4-a5e5-41e33d022c31",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4c2e215d-a33b-4fc1-8740-9f483ac84359",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bde6c94d-a6d8-4dbb-b4bc-b3f9d1ebe0ef",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 226
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "269a0aa5-f974-4ec9-b855-a0d5568c1d3f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bde6c94d-a6d8-4dbb-b4bc-b3f9d1ebe0ef",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f13ee761-6699-4715-8b20-2a7638649f6e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 258
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a67c42fb-b32c-41bc-b99c-cd5b2667f043",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f13ee761-6699-4715-8b20-2a7638649f6e",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9d94db7d-5d77-4707-a321-8efebf0ca963",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 262
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "258b2c25-3d81-4ae7-86d5-f62790edc00e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c07c7b3e-ed08-4f80-836e-3fd59b50ee50",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "beae9e79-4b96-4a10-be0c-9ef759d7f554",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 266
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5f2c05ee-75dc-42e4-948d-45ac3aabd96e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0e22cc7f-dd73-4c25-95c7-8971d09d8e8c",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fb7e78ca-390d-48d6-b9ba-7eaa9e172198",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 308
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b2dabd20-fee7-45bb-8df1-913e22711887",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fb7e78ca-390d-48d6-b9ba-7eaa9e172198",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6fd40547-8672-4b3c-b73e-28197a58db46",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 310
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f77583fd-6854-483e-8335-43b903ce09b9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "875d40fe-eee9-4ebd-98ba-957e4a6ed8d3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "505b325b-67d1-4ef6-b445-6f3358eb515a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 521
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c213dc8f-b940-4421-a16c-9786dacc970e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f7b46fed-dbb3-43d0-860f-8f0bbd3c61db",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e8b80aa2-6be5-4342-a5b6-0d05ea88f474",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 564
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "88286232-bb49-48bd-a45c-5d39aa88caa5",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e8b80aa2-6be5-4342-a5b6-0d05ea88f474",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "58236bdc-a1e5-4458-9cb3-6f79327e92bc",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 577
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "20810ab0-0773-4dbf-9a62-5f800042f2b9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "58236bdc-a1e5-4458-9cb3-6f79327e92bc",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5ef985c8-0576-4193-873d-441f0282b295",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 579
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eea86d84-2639-44a6-889b-0b04fce2a4c8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "de812137-e049-456f-b439-08c09ff66452",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5ef985c8-0576-4193-873d-441f0282b295",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1216
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1add1b5b-8010-4c28-90dc-2f66275b4424",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8bbecafa-c1a7-41c8-aad3-07d5948f2baa",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "de812137-e049-456f-b439-08c09ff66452",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1252
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6d496350-1d85-4312-be19-9f09cd9752f6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "641b24e0-be9e-44f7-9e0b-0a6442c6ef00",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "de812137-e049-456f-b439-08c09ff66452",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1253
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7e4abfc3-df10-4478-9760-852ddd193fd8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "78c82df2-6a95-4dbc-a661-56ab1edac0f3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "de812137-e049-456f-b439-08c09ff66452",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1254
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9de3f184-6617-40e7-835e-2dad2c4d94d1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9d94db7d-5d77-4707-a321-8efebf0ca963",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5ef985c8-0576-4193-873d-441f0282b295",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1255
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Update internal destinationDnsDomain art, Domain Reputation UBL, URL Reputation TS, File reputation TS, Email reputation TS, Update internal requestURL artifact, Add note Email Error",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5ef985c8-0576-4193-873d-441f0282b295",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1648,
                        "line_start": 1635,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 44,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2760,
                            "y": 1940
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1299
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "126c6202-35a7-4143-a3ce-6ce0ea72b7b1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "505b325b-67d1-4ef6-b445-6f3358eb515a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "05236e89-21ac-439f-9b23-9a585e3ef32f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1983
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e4f95524-3874-41fb-8e03-81d9d25c6c7c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f8eb59dc-0c23-4ac7-a23d-1260a04d337d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "de812137-e049-456f-b439-08c09ff66452",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2223
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "80d7483c-412f-469a-a0cd-ec829aa85afd",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e7d1249-fc1d-4b42-b2e0-46c87f70f4f9",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2374
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1bdb7c61-12d1-498a-bf7c-308a7c022cb9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bc4c1234-e3de-46f6-92ea-8b73087fae60",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4c2e215d-a33b-4fc1-8740-9f483ac84359",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2548
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "77a47022-1cfb-4386-ad13-2e4a6abcfe42",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bde6c94d-a6d8-4dbb-b4bc-b3f9d1ebe0ef",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "043803ea-1c0a-48ce-b372-7c05ce1c397f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2571
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "848c5a9c-e868-4c29-9e7d-fc87ac04f6fe",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "043803ea-1c0a-48ce-b372-7c05ce1c397f",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c07c7b3e-ed08-4f80-836e-3fd59b50ee50",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2574
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "15adf577-f230-4f88-9a28-97c3a7767054",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b1a3ebf3-6f52-493f-be66-82d036c5a677",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "df479613-d91b-45a9-8d88-a0c301275764",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2654
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ffbbc2e2-6b54-4860-ba93-971a2bdd0aba",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "df479613-d91b-45a9-8d88-a0c301275764",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "641b24e0-be9e-44f7-9e0b-0a6442c6ef00",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2659
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b0ce57d8-462e-465d-a0ea-3e32ae9117b4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bb8d7b5d-4363-4f14-98d3-92ec391c0448",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1294c975-2965-44e6-ac08-9bd1f18fe24e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2683
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "38185dc4-bd7d-45bb-9fa0-61c354a637e5",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1294c975-2965-44e6-ac08-9bd1f18fe24e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f7b46fed-dbb3-43d0-860f-8f0bbd3c61db",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2707
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d3e0933b-ef32-4640-852e-c07f988a0181",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f7b46fed-dbb3-43d0-860f-8f0bbd3c61db",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ef3c81ce-0573-4f6a-b149-fa2fde6baec6",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2709
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2e29c1a8-978c-45b5-97f5-f00bb6b1ef9f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "beae9e79-4b96-4a10-be0c-9ef759d7f554",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b1a3ebf3-6f52-493f-be66-82d036c5a677",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2723
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c5c72169-a758-473b-9f56-74c834378cea",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ef3c81ce-0573-4f6a-b149-fa2fde6baec6",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "875d40fe-eee9-4ebd-98ba-957e4a6ed8d3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2728
                    },
                    {
                        ".scmName/text": "local",
                        "Container_id-0": "container:id",
                        "a_status-1": "Enriched",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "Set_last_automated_acti..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "local"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def cf_local_Set_last_automated_action_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('cf_local_Set_last_automated_action_1() called')\n    \n    container_property_0 = [\n        [\n            container.get(\"id\"),\n        ],\n    ]\n    literal_values_0 = [\n        [\n            \"Enriched\",\n        ],\n    ]\n\n    parameters = []\n\n    literal_values_0_0 = [item[0] for item in literal_values_0]\n    container_property_0_0 = [item[0] for item in container_property_0]\n\n    parameters.append({\n        'a_status': literal_values_0_0,\n        'Container_id': container_property_0_0,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"local/Set_last_automated_action\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='local/Set_last_automated_action', parameters=parameters, name='cf_local_Set_last_automated_action_1', callback=cf_local_Set_last_automated_action_1_callback)\n\n    return",
                        "callback_code": "def cf_local_Set_last_automated_action_1_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('cf_local_Set_last_automated_action_1_callback() called')\n    \n    Filter_out_user_email(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    Filter_out_fileHash(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    Filter_out_destinationDnsDomain(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    Filter_out_requestURL(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_start": 1124,
                        "callsback": true,
                        "cfDisplayPath": "local/Set_last_automated_action",
                        "cfInputs": {
                            "Container_id": {
                                "collectionType": "container_property",
                                "dataPath": "container:id",
                                "paramName": "container_property_0_0",
                                "type": "list"
                            },
                            "a_status": {
                                "collectionType": "literal_values",
                                "dataPath": "Enriched",
                                "paramName": "literal_values_0_0",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 26,
                        "customFunction": "local/Set_last_automated_action",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1134,
                        "line_start": 1086,
                        "message": "Configuring now",
                        "name": "Set_last_automated_action",
                        "notes": "",
                        "number": 1,
                        "order": 31,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -640,
                            "y": 1340
                        },
                        "previous_function": "",
                        "previous_name": "cf_local_Set_last_automated_action_1",
                        "selectedCustomFunction": {
                            "description": "set custom field last_automated_action",
                            "draftMode": false,
                            "id": 111,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "Set_last_automated_action",
                                    "contains_type": [
                                        "phantom container id"
                                    ],
                                    "custom_function": 111,
                                    "description": "",
                                    "id": 205,
                                    "input_type": "list",
                                    "name": "Container_id",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "Set_last_automated_action",
                                    "contains_type": [],
                                    "custom_function": 111,
                                    "description": "",
                                    "id": 206,
                                    "input_type": "list",
                                    "name": "a_status",
                                    "placeholder": ""
                                }
                            ],
                            "name": "Set_last_automated_action",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "Set_last_automated_action",
                                    "contains_type": [],
                                    "custom_function": 111,
                                    "data_path": "res",
                                    "description": "",
                                    "id": 97
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "local/PLAYBOOK-INVESTIGATE-ALERT-ATTIVO-01",
                                        "draft_mode": false,
                                        "id": 3007,
                                        "name": "PLAYBOOK-INVESTIGATE-ALERT-ATTIVO-01",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "local/test update filed",
                                        "draft_mode": false,
                                        "id": 2171,
                                        "name": "test update filed",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "local/PLAYBOOK-CONTAIN-INCIDENT-CLOUD-01",
                                        "draft_mode": false,
                                        "id": 2620,
                                        "name": "PLAYBOOK-CONTAIN-INCIDENT-CLOUD-01",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "local/01-Contain-Approve-Playbook",
                                        "draft_mode": false,
                                        "id": 3148,
                                        "name": "01-Contain-Approve-Playbook",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "local/KTB -Triage Playbook for Attivo Label",
                                        "draft_mode": false,
                                        "id": 3167,
                                        "name": "KTB -Triage Playbook for Attivo Label",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "local/02-Master Malware",
                                        "draft_mode": false,
                                        "id": 3294,
                                        "name": "02-Master Malware",
                                        "viewable": true
                                    },
                                    {
                                        "active": true,
                                        "display_path": "local/PLAYBOOK-INVESTIGATE-ALERT-SPLUNK-AD-01",
                                        "draft_mode": false,
                                        "id": 3201,
                                        "name": "PLAYBOOK-INVESTIGATE-ALERT-SPLUNK-AD-01",
                                        "viewable": true
                                    },
                                    {
                                        "active": true,
                                        "display_path": "local/PLAYBOOK-INVESTIGATE-DATA-01",
                                        "draft_mode": false,
                                        "id": 3232,
                                        "name": "PLAYBOOK-INVESTIGATE-DATA-01",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 2,
                            "scmName": "local"
                        },
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 2729
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 16
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Check_if_destinationDnsDomain_is_private(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_destinationDnsDomain_is_private() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainExternal\", \"!=\", []],\n        ],\n        name=\"Check_if_destinationDnsDomain_is_private:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Filter_External_Domain_to_artifact_recor(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    # collect filtered artifact ids for 'if' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainInternal\", \"!=\", []],\n        ],\n        name=\"Check_if_destinationDnsDomain_is_private:condition_2\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_2 or matched_results_2:\n        Link_domain_to_artifact_record(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Check if destinationDnsDomain is private",
                        "description": "Check if destinationDnsDomain is private",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f7b46fed-dbb3-43d0-860f-8f0bbd3c61db",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 663,
                        "line_start": 632,
                        "name": "filter",
                        "notes": "Check if destinationDnsDomain is private",
                        "number": 16,
                        "order": 18,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainExternal",
                                        "value": "[]"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainInternal",
                                        "value": "[]"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 260,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Check_if_destinationDnsDomain_is_private",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2739
                    },
                    {
                        "action": "url reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "Format_URL:formatted_data",
                            "url": "filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL"
                        },
                        "angle": 0,
                        "app": "VirusTotal v3",
                        "appid": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "approver": "",
                        "artifact_scope": "all",
                        "assets": [
                            {
                                "action": "url reputation",
                                "actions": [
                                    "get report",
                                    "detonate file",
                                    "detonate url",
                                    "url reputation",
                                    "ip reputation",
                                    "get file",
                                    "file reputation",
                                    "domain reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal v3",
                                "app_version": "1.2.10",
                                "appid": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                                "asset_name": "virustotal v3 asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "url": "filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL"
                                },
                                "has_app": true,
                                "id": 105,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal v3 asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "URL",
                                        "column_order": 0,
                                        "contains": [
                                            "url",
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.test123.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "searchengines"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.Dr.Web",
                                        "data_type": "string",
                                        "example_values": [
                                            "e-mail"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.alphaMountain.ai",
                                        "data_type": "string",
                                        "example_values": [
                                            "File Sharing/Storage, Search Engines/Portals"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.first_submission_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1618399455
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1618399455
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.category",
                                        "data_type": "string",
                                        "example_values": [
                                            "harmless"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.engine_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "CRDF"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "blacklist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "clean"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            78
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.timeout",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_final_url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_http_response_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            200
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_http_response_content_length",
                                        "data_type": "numeric",
                                        "example_values": [
                                            154896
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_http_response_content_sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "e84603534b9c77669d1ebc821aed90fb34e31b587a4df32eba708193b25770d9"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_http_response_cookies.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "xyz"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_http_response_headers.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "same-origin-allow-popups; report-to=\"TestUi\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_modification_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1618399456
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_submission_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1618399455
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.reputation",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.times_submitted",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.title",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trackers.ScoreCard Research Beacon.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "7241469"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trackers.ScoreCard Research Beacon.*.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1627544121
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trackers.ScoreCard Research Beacon.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://sb.scorecardresearch.com/p?c1=2&c2=7241469&c7=https%3A%2F%2Fin.yahoo.com%2F&c5=97684142&cv=2.0&cj=1&c14=-1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trackers.Yahoo Dot Tags.*.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1627544121
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trackers.Yahoo Dot Tags.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://s.yimg.com/rq/darla/4-6-0/js/g-r-min.js"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "e0583d78eb4bea4078dce1d89e9eaabd7be7b6a8630f88b70a725c607cdce063"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.links.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.virustotal.com/api/v3/urls/e0583d78eb4bea4078dce1d89e9eaabd7be7b6a8630f88b70a725c607cdce063"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "url"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            80
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "column_name": "Scan ID",
                                        "column_order": 1,
                                        "contains": [
                                            "virustotal scan id"
                                        ],
                                        "data_path": "action_result.summary.scan_id",
                                        "data_type": "string",
                                        "example_values": [
                                            9
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            9
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Scan id: u-8d63a6cc87718dd52151f0e6fea2ff6fbf12d68a11046ba4ea3258546906c74f-1613644669, Harmless: 74, Malicious: 0, Suspicious: 0, Undetected: 9"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "url": {
                                        "contains": [
                                            "url",
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to query",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal v3",
                                "product_vendor": "VirusTotal",
                                "targets": "105",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "URL Reputation VT"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def URL_Reputation_VT(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('URL_Reputation_VT() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'URL_Reputation_VT' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL', 'filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.id'], scope=\"all\")\n\n    parameters = []\n    \n    # build parameters list for 'URL_Reputation_VT' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'url': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"url reputation\", parameters=parameters, assets=['virustotal v3 asset'], callback=URL_Reputation_TS, name=\"URL_Reputation_VT\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "URL Reputation VT",
                        "delay": 0,
                        "description": "URL Reputation VT",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c07c7b3e-ed08-4f80-836e-3fd59b50ee50",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 167,
                        "line_start": 144,
                        "message": "Configuring now",
                        "name": "url reputation",
                        "notes": "URL Reputation VT",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 700,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "URL_Reputation_VT",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2745
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6305fa10-a694-4089-8c4d-99d1461a689c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "05236e89-21ac-439f-9b23-9a585e3ef32f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0b95f81-f10f-46ba-9a07-08d13f6cb071",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2748
                    },
                    {
                        "action": "domain reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain"
                        },
                        "angle": 0,
                        "app": "VirusTotal",
                        "appid": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                        "approver": "",
                        "assets": [
                            {
                                "action": "domain reputation",
                                "actions": [
                                    "get report",
                                    "detonate file",
                                    "detonate url",
                                    "url reputation",
                                    "ip reputation",
                                    "get file",
                                    "file reputation",
                                    "domain reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal v3",
                                "app_version": "1.2.10",
                                "appid": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                                "asset_name": "virustotal v3 asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain"
                                },
                                "has_app": true,
                                "id": 105,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal v3 asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.BitDefender",
                                        "data_type": "string",
                                        "example_values": [
                                            "searchengines"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.Comodo Valkyrie Verdict",
                                        "data_type": "string",
                                        "example_values": [
                                            "mobile communications"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.Dr.Web",
                                        "data_type": "string",
                                        "example_values": [
                                            "social networks"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.Forcepoint ThreatSeeker",
                                        "data_type": "string",
                                        "example_values": [
                                            "search engines and portals"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.Sophos",
                                        "data_type": "string",
                                        "example_values": [
                                            "social networks"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.alphaMountain.ai",
                                        "data_type": "string",
                                        "example_values": [
                                            "Social Networking"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.categories.sophos",
                                        "data_type": "string",
                                        "example_values": [
                                            "search engines"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.creation_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            874296000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.jarm",
                                        "data_type": "string",
                                        "example_values": [
                                            "27d40d40d29d40d1dc42d43d00041d4689ee210389f4f6b4b5b1b93f92252d"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.category",
                                        "data_type": "string",
                                        "example_values": [
                                            "harmless"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.engine_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "CRDF"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "blacklist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "clean"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            90
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.timeout",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.expire",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1800
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.flag",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.minimum",
                                        "data_type": "numeric",
                                        "example_values": [
                                            60
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.priority",
                                        "data_type": "numeric",
                                        "example_values": [
                                            40
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.refresh",
                                        "data_type": "numeric",
                                        "example_values": [
                                            900
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.retry",
                                        "data_type": "numeric",
                                        "example_values": [
                                            900
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.rname",
                                        "data_type": "string",
                                        "example_values": [
                                            "dns-admin.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.serial",
                                        "data_type": "numeric",
                                        "example_values": [
                                            357917103
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.tag",
                                        "data_type": "string",
                                        "example_values": [
                                            "issue"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.ttl",
                                        "data_type": "numeric",
                                        "example_values": [
                                            78
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "MX"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_dns_records.*.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "alt3.aspmx.l.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_dns_records_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613638555
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.cert_signature.signature",
                                        "data_type": "string",
                                        "example_values": [
                                            "811fa6e0af210a512fa773cf16fd62ecae6fdacab57fb71626791b9ad5bfb19841435e7480dba67b1fd17828204f05905379bccc98a7f39a037a5b4eb43f3bb54c51df02137b13abffc343b500319819854920af065afb70a3857657909b0d006de9b7aa2197fe94c2ccde7df14760dd8c5f87d5f89c3b1b835c81f06b727d5ea21fc04c0126ef1377cceb935ccedc969b6b503e5e3c783f0fb13f7dd465d67b807f9d268082449813eb0700e7bd472b238f8c551c07b3e130b88b7fb96799e6d9c1ac8b632603840eeb429e271856a94cd62f1d1bdfeda4f02ae0df7b1d0b80aceab4b73d137f4b4bec851555213fc540dc74defb81761304e3339062d65a60"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.cert_signature.signature_algorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "sha256RSA"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.1.3.6.1.4.1.11129.2.4.2",
                                        "data_type": "string",
                                        "example_values": [
                                            "0481f100ef0076007d3ef2f88fff88556824c2c0ca9e5289792bc50e78097f2e"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.CA",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.authority_key_identifier.keyid",
                                        "data_type": "string",
                                        "example_values": [
                                            "98d1f86e10ebcf9bec609f18901ba0eb7d09fd2b"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.ca_information_access.CA Issuers",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://pki.goog/gsr2/GTS1O1.crt"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.ca_information_access.OCSP",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://ocsp.pki.goog/gts1o1core"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.certificate_policies",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.3.6.1.4.1.11129.2.5.3"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.crl_distribution_points",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://crl.pki.goog/GTS1O1core.crl"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.extended_key_usage",
                                        "data_type": "string",
                                        "example_values": [
                                            "serverAuth"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.key_usage",
                                        "data_type": "string",
                                        "example_values": [
                                            "ff"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.subject_alternative_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "yt.be"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.extensions.subject_key_identifier",
                                        "data_type": "string",
                                        "example_values": [
                                            "67bf0513cc1c9c4765c43f3fedd687cf88bcd93d"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.issuer.C",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.issuer.CN",
                                        "data_type": "string",
                                        "example_values": [
                                            "GTS CA 1O1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.issuer.O",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Trust Services"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.issuer.OU",
                                        "data_type": "string",
                                        "example_values": [
                                            "www.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.public_key.algorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "EC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.public_key.ec.oid",
                                        "data_type": "string",
                                        "example_values": [
                                            "secp256r1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.public_key.ec.pub",
                                        "data_type": "string",
                                        "example_values": [
                                            "0453d3053c10d8cc8d06a01c02171e8c2d91b355cc188112943a217edc2fe60e3592f329404573e124c077917dcf319f14a6a2c3e433ee695d60a7e9ba3883aa5b"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.serial_number",
                                        "data_type": "string",
                                        "example_values": [
                                            "c4ea98ea7e5e1f430200000000870182"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.signature_algorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "sha256RSA"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2441
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.subject.C",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.subject.CN",
                                        "data_type": "string",
                                        "example_values": [
                                            "*.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.subject.L",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mountain View"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.subject.O",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test LLC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.subject.ST",
                                        "data_type": "string",
                                        "example_values": [
                                            "California"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.thumbprint",
                                        "data_type": "string",
                                        "example_values": [
                                            "c25b1dc8be5f679087ecd28fb5eae7b3985cf604"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.thumbprint_sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "a29f9d0d85bd02b3150267ac5a820e4aadc9becc7b5884530a549e6d98dac4a3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.validity.not_after",
                                        "data_type": "string",
                                        "example_values": [
                                            "2021-04-13 07:57:08"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.validity.not_before",
                                        "data_type": "string",
                                        "example_values": [
                                            "2021-01-19 07:57:09"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "V3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_https_certificate_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613638555
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_modification_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613640948
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_update_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1568043544
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Alexa.rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Alexa.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613576161
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Cisco Umbrella.rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Cisco Umbrella.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613489762
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Majestic.rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Majestic.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613576163
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Quantcast.rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Quantcast.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1585755370
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Statvoo.rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popularity_ranks.Statvoo.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613576162
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.registrar",
                                        "data_type": "string",
                                        "example_values": [
                                            "MarkMonitor Inc."
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.reputation",
                                        "data_type": "numeric",
                                        "example_values": [
                                            256
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            104
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            26
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.whois",
                                        "data_type": "string",
                                        "example_values": [
                                            "Creation Date: 1997-09-15T04:00:00Z\nDNSSEC: unsigned\nDomain Name: TEST.COM\nDomain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\nDomain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\nDomain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\nDomain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\nDomain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\nDomain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\nName Server: NS1.TEST.COM\nName Server: NS2.TEST.COM\nName Server: NS3.TEST.COM\nName Server: NS4.TEST.COM\nRegistrar Abuse Contact Email: abusecomplaints@markmonitor.com\nRegistrar Abuse Contact Phone: +1.2083895740\nRegistrar IANA ID: 292\nRegistrar URL: http://www.markmonitor.com\nRegistrar WHOIS Server: whois.markmonitor.com\nRegistrar: MarkMonitor Inc.\nRegistry Domain ID: 2138514_DOMAIN_COM-VRSN\nRegistry Expiry Date: 2028-09-14T04:00:00Z\nUpdated Date: 2019-09-09T15:39:04Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.whois_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1612787278
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.links.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.virustotal.com/api/v3/domains/test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "domain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            90
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Harmless: 90, Malicious: 0, Suspicious: 0, Undetected: 8"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to query",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal v3",
                                "product_vendor": "VirusTotal",
                                "targets": "105",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Domain Reputation VT"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Domain_Reputation_VT(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Domain_Reputation_VT() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Domain_Reputation_VT' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain', 'filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'Domain_Reputation_VT' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'domain': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"domain reputation\", parameters=parameters, assets=['virustotal v3 asset'], callback=Domain_Reputation_TS, name=\"Domain_Reputation_VT\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Domain Reputation VT",
                        "delay": 0,
                        "description": "Domain Reputation VT",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "875d40fe-eee9-4ebd-98ba-957e4a6ed8d3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 689,
                        "line_start": 666,
                        "message": "Configuring now",
                        "name": "domain reputation",
                        "notes": "Domain Reputation VT",
                        "number": 1,
                        "order": 19,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 700,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Domain_Reputation_VT",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2762
                    },
                    {
                        "action": "update artifact",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "artifact_id": "filtered-data:Link_URL_to_artifact_record:condition_1:artifact:*.id",
                            "artifact_json": "",
                            "cef_json": "{\"is_internalURL\": \"True\"}",
                            "cef_types_json": "",
                            "label": "",
                            "name": "",
                            "overwrite": "",
                            "severity": "",
                            "tags": ""
                        },
                        "angle": 0,
                        "app": "Phantom",
                        "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "approver": "",
                        "assets": [
                            {
                                "action": "update artifact",
                                "actions": [
                                    "no op",
                                    "update list",
                                    "get action result",
                                    "create container",
                                    "import container",
                                    "export container",
                                    "deflate item",
                                    "add artifact",
                                    "find listitem",
                                    "add listitem",
                                    "find artifacts",
                                    "update artifact tags",
                                    "add note",
                                    "update artifact",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Phantom",
                                "app_version": "3.2.10",
                                "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                                "asset_name": "phantom asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "artifact_id": "filtered-data:Link_URL_to_artifact_record:condition_1:artifact:*.id",
                                    "artifact_json": "",
                                    "cef_json": "{\"is_internalURL\": \"True\"}",
                                    "cef_types_json": "",
                                    "label": "",
                                    "name": "",
                                    "overwrite": "",
                                    "severity": "",
                                    "tags": ""
                                },
                                "has_app": true,
                                "id": 11,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Artifact ID",
                                        "column_order": 0,
                                        "contains": [
                                            "phantom artifact id"
                                        ],
                                        "data_path": "action_result.parameter.artifact_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "2388"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.artifact_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"severity\": \"high\", \"label\": \"test label\", \"description\": \"Artifact added by Me\", \"source_data_identifier\": \"my_custom_sdi\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.cef_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"new_field\": \"new_value\", \"deleted_field\": \"\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.cef_types_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"new_field\": [\"new contains\"]}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.label",
                                        "data_type": "string",
                                        "example_values": [
                                            "test label"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "New Name"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.overwrite",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.severity",
                                        "data_type": "string",
                                        "example_values": [
                                            "high"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.tags",
                                        "data_type": "string",
                                        "example_values": [
                                            "[\"tag2\"]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.deleted_field",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.new_field",
                                        "data_type": "string",
                                        "example_values": [
                                            "new_value"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.test",
                                        "data_type": "string",
                                        "example_values": [
                                            "fff"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef_types.new_field",
                                        "data_type": "string",
                                        "example_values": [
                                            "new contains"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Artifact added by Me"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.label",
                                        "data_type": "string",
                                        "example_values": [
                                            "test label"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "New Name"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.severity",
                                        "data_type": "string",
                                        "example_values": [
                                            "high"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.source_data_identifier",
                                        "data_type": "string",
                                        "example_values": [
                                            "my_custom_sdi"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.tags",
                                        "data_type": "string",
                                        "example_values": [
                                            "tag2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response.id",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2388
                                        ]
                                    },
                                    {
                                        "column_name": "Success",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.response.success",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Artifact updated successfully."
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "artifact_id": {
                                        "contains": [
                                            "phantom artifact id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "ID of artifact to update",
                                        "key": "artifact_id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "artifact_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of entire artifact (Always overwrites provided keys)",
                                        "key": "artifact_json",
                                        "order": 8,
                                        "required": false
                                    },
                                    "cef_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of the CEF fields you want in the artifact",
                                        "key": "cef_json",
                                        "order": 4,
                                        "required": false
                                    },
                                    "cef_types_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of the CEF types (e.g., {'myIP': ['ip', 'ipv6']})",
                                        "key": "cef_types_json",
                                        "order": 5,
                                        "required": false
                                    },
                                    "label": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact label (Always overwrites, if provided)",
                                        "key": "label",
                                        "order": 2,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact name (Always overwrites, if provided)",
                                        "key": "name",
                                        "order": 1,
                                        "required": false
                                    },
                                    "overwrite": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Overwrite artifacts with provided input (applies to: cef_json, contains_json, tags)",
                                        "key": "overwrite",
                                        "order": 7,
                                        "required": false
                                    },
                                    "severity": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact severity (Always overwrites, if provided)",
                                        "key": "severity",
                                        "order": 3,
                                        "required": false
                                    },
                                    "tags": {
                                        "allow_list": true,
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Comma-separated list of tags to add or replace in the artifact",
                                        "key": "tags",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Phantom",
                                "product_vendor": "Phantom",
                                "targets": "11",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Update internal requestU..."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_internal_requestURL_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_internal_requestURL_artifact() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_internal_requestURL_artifact' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Link_URL_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:Link_URL_to_artifact_record:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'Update_internal_requestURL_artifact' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'name': \"\",\n                'tags': \"\",\n                'label': \"\",\n                'cef_json': \"{\\\"is_internalURL\\\": \\\"True\\\"}\",\n                'severity': \"\",\n                'overwrite': \"\",\n                'artifact_id': filtered_artifacts_item_1[0],\n                'artifact_json': \"\",\n                'cef_types_json': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"Update_internal_requestURL_artifact\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Update internal requestURL artifact",
                        "delay": 0,
                        "description": "Update internal requestURL artifact",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9d94db7d-5d77-4707-a321-8efebf0ca963",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 223,
                        "line_start": 192,
                        "message": "Configuring now",
                        "name": "update artifact",
                        "notes": "Update internal requestURL artifact",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 880
                        },
                        "previous_function": "",
                        "previous_name": "Update_internal_requestURL_artifact",
                        "required_params": {
                            "artifact_id": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2764
                    },
                    {
                        "action": "domain reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain"
                        },
                        "angle": 0,
                        "app": "Cisco Umbrella Investigate",
                        "appid": "5fc14867-8c8e-4cc2-8198-641df784bf1a",
                        "approver": "",
                        "assets": [
                            {
                                "action": "domain reputation",
                                "actions": [
                                    "whois domain",
                                    "ip reputation",
                                    "domain reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Cisco Umbrella Investigate",
                                "app_version": "1.0.1",
                                "appid": "5fc14867-8c8e-4cc2-8198-641df784bf1a",
                                "asset_name": "ktb-umbrella-asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain"
                                },
                                "has_app": true,
                                "id": 55,
                                "loaded": false,
                                "missing": false,
                                "name": "ktb-umbrella-asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Domain",
                                        "column_order": 0,
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "testdomain.com"
                                        ]
                                    },
                                    {
                                        "column_name": "Categories",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.category",
                                        "data_type": "string",
                                        "example_values": [
                                            "Search Engines",
                                            "Malware"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.category_info.content_categories",
                                        "data_type": "string",
                                        "example_values": [
                                            "Search Engines"
                                        ]
                                    },
                                    {
                                        "column_name": "Security Categories",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.category_info.security_categories",
                                        "data_type": "string",
                                        "example_values": [
                                            "Malware"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.category_info.status",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1,
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.indicators.*.indicator",
                                        "data_type": "string",
                                        "example_values": [
                                            "Geo Popularity Score",
                                            "Keyword Score",
                                            "Lexical"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.indicators.*.normalized_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2,
                                            60,
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.indicators.*.score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -3.610878170000002,
                                            0.09264255482489717,
                                            0.606
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.relative_links.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4289
                                        ]
                                    },
                                    {
                                        "column_name": "Risk Score",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.risk_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.asn_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -0.03286849936319416,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.attack",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "DGA Score",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.security_info.dga_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0,
                                            -15.55033332819711
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.entropy",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1.91829583405449,
                                            2.75
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.fastflux",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.found",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.geodiversity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.geodiversity.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.0001,
                                            0.1429
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.geodiversity_normalized",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.geodiversity_normalized.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.0003299100640734098,
                                            0.009745995689748824
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.geoscore",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0,
                                            0.002894054671255598
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.handlings.normal",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.ks_test",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0,
                                            0.2846253137451792
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.pagerank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            60.32995,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.perplexity",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.1878675610437336,
                                            1.122248102917671
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.popularity",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.prefix_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -0.1054320152441063,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.rip_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -3.051340626556875,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.securerank2",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100,
                                            -0.004050008137296145
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.tld_geodiversity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.security_info.tld_geodiversity.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.01008192795884705
                                        ]
                                    },
                                    {
                                        "column_name": "Status",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.status_desc",
                                        "data_type": "string",
                                        "example_values": [
                                            "SAFE",
                                            "MALICIOUS"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.attacks",
                                        "data_type": "string",
                                        "example_values": [
                                            "Rig"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.categories",
                                        "data_type": "string",
                                        "example_values": [
                                            "Malware"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.category",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.period.begin",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.period.end",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.threatTypes",
                                        "data_type": "string",
                                        "example_values": [
                                            "Exploit Kit"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tag_info.*.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1428593707849,
                                            1496547887014
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.summary.domain_status",
                                        "data_type": "string",
                                        "example_values": [
                                            "SAFE",
                                            "MALICIOUS"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.risk_score",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0,
                                            6
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_co_occurances",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_relative_links",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100,
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_tag_info",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1,
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Total co occurances: 0, Domain status: SAFE, Total tag info: 1, Total relative links: 100",
                                            "Total co occurances: 0\nDomain status: MALICIOUS\nTotal tag info: 2\nTotal relative links: 0"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to query",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Cisco Umbrella Investigate",
                                "product_vendor": "Cisco",
                                "targets": "55",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Domain Reputation UBL"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Domain_Reputation_UBL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Domain_Reputation_UBL() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Domain_Reputation_UBL' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain', 'filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'Domain_Reputation_UBL' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'domain': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"domain reputation\", parameters=parameters, assets=['ktb-umbrella-asset'], callback=Collect_all_results_destinationDnsDomain, name=\"Domain_Reputation_UBL\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Domain Reputation TS",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Domain Reputation UBL",
                        "delay": 0,
                        "description": "Domain Reputation UBL",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "05236e89-21ac-439f-9b23-9a585e3ef32f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 951,
                        "line_start": 928,
                        "message": "Configuring now",
                        "name": "domain reputation",
                        "notes": "Domain Reputation UBL",
                        "number": 3,
                        "order": 26,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1260,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Domain_Reputation_UBL",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2768
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8ae84cac-c301-4061-b951-17dc6e006dba",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f0b95f81-f10f-46ba-9a07-08d13f6cb071",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9a20fd03-9ed5-4eb7-9e26-ddeab4375e96",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2770
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Add note requestURL"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Add_note_requestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_requestURL() called')\n    \n    Collect_all_results_requestURL__all_results_requestURL = json.loads(phantom.get_run_data(key='Collect_all_results_requestURL:all_results_requestURL'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    content = \"\"\n    for artifact in data:\n        content += f\"URL: `{data[artifact]['ts']['url']}`\\n\\n\"\n        content += f\"**VirusTotal URL Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n    \n        content += f\"**ThreatStream URL Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"URL Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    Update_external_requestURL_artifact(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "URL Reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Add_note_requestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_requestURL() called')\n    \n    Collect_all_results_requestURL__all_results_requestURL = json.loads(phantom.get_run_data(key='Collect_all_results_requestURL:all_results_requestURL'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    content = \"\"\n    for artifact in data:\n        content += f\"URL: `{data[artifact]['ts']['url']}`\\n\\n\"\n        content += f\"**VirusTotal URL Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n    \n        content += f\"**ThreatStream URL Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"URL Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "Add note requestURL",
                        "description": "Add note requestURL",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "df479613-d91b-45a9-8d88-a0c301275764",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 303,
                        "line_start": 253,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Add note requestURL",
                        "number": 10,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_requestURL:custom_function:all_results_requestURL"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2080,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Add_note_requestURL",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    content = \"\"\n    for artifact in data:\n        content += f\"URL: `{data[artifact]['ts']['url']}`\\n\\n\"\n        content += f\"**VirusTotal URL Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n    \n        content += f\"**ThreatStream URL Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"URL Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2774
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "585d4d7b-c1d9-423a-97c5-cd1c62d89134",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9a20fd03-9ed5-4eb7-9e26-ddeab4375e96",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "8bbecafa-c1a7-41c8-aad3-07d5948f2baa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2785
                    },
                    {
                        "action": "file reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hash": "filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256"
                        },
                        "angle": 0,
                        "app": "VirusTotal v3",
                        "appid": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "approver": "",
                        "assets": [
                            {
                                "action": "file reputation",
                                "actions": [
                                    "get report",
                                    "detonate file",
                                    "detonate url",
                                    "url reputation",
                                    "ip reputation",
                                    "get file",
                                    "file reputation",
                                    "domain reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal v3",
                                "app_version": "1.2.10",
                                "appid": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                                "asset_name": "virustotal v3 asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256"
                                },
                                "has_app": true,
                                "id": 105,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal v3 asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Hash",
                                        "column_order": 0,
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "e87051ea8e1bb3c986c0f0bda85352f63e67e0315c58e461a075b5fb7229e6fe"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.authentihash",
                                        "data_type": "string",
                                        "example_values": [
                                            "ad56160b465f7bd1e7568640397f01fc4f8819ce6f0c1415690ecee646464cec"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.creation_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1410950077
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.first_submission_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1612961082
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613635130
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.category",
                                        "data_type": "string",
                                        "example_values": [
                                            "undetected"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.engine_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "CMC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.engine_update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20210218"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.engine_version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2.10.2019.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "blacklist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_results.*.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.confirmed-timeout",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.failure",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.timeout",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.type-unsupported",
                                        "data_type": "numeric",
                                        "example_values": [
                                            16
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_analysis_stats.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            59
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_modification_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613635210
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.last_submission_date",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1613635130
                                        ]
                                    },
                                    {
                                        "column_name": "File Description",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.attributes.magic",
                                        "data_type": "string",
                                        "example_values": [
                                            "a python2.7\\015script text executable"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.attributes.md5",
                                        "data_type": "string",
                                        "example_values": [
                                            "2e65153f2c49c91a0206ee7a8c00e659"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.meaningful_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "update_cr.py"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.names",
                                        "data_type": "string",
                                        "example_values": [
                                            "update_cr.py"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.entry_point",
                                        "data_type": "numeric",
                                        "example_values": [
                                            14768
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.imphash",
                                        "data_type": "string",
                                        "example_values": [
                                            "d7584447a5c5ca9b4a55946317137951"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.import_list.*.library_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "COMDLG32.dll"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.machine_type",
                                        "data_type": "numeric",
                                        "example_values": [
                                            332
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.chi2",
                                        "data_type": "numeric",
                                        "example_values": [
                                            8137.34814453125
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.entropy",
                                        "data_type": "numeric",
                                        "example_values": [
                                            5.789552211761475
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.filetype",
                                        "data_type": "string",
                                        "example_values": [
                                            "Data"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.lang",
                                        "data_type": "string",
                                        "example_values": [
                                            "ENGLISH US"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "c37bc8f6dbf81e8d88978836b23ee932ade6652ba798989bf20697afffd6113e"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_details.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "RT_BITMAP"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_langs.ENGLISH US",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_langs.RUSSIAN",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_types.RT_BITMAP",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_types.RT_DIALOG",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_types.RT_MANIFEST",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_types.RT_MENU",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.resource_types.RT_VERSION",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.rich_pe_header_hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "fa4dbca9180170710b3c245464efa483"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.chi2",
                                        "data_type": "numeric",
                                        "example_values": [
                                            292981.44
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.entropy",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6.75
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.flags",
                                        "data_type": "string",
                                        "example_values": [
                                            "rx"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.md5",
                                        "data_type": "string",
                                        "example_values": [
                                            "a13f88c3e0636712e10326c07d56b645"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            ".text"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.raw_size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            54784
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.virtual_address",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4096
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.sections.*.virtual_size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            54434
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.pe_info.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1410950077
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popular_threat_classification.popular_threat_category.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            30
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popular_threat_classification.popular_threat_category.*.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "trojan"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popular_threat_classification.popular_threat_name.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            13
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popular_threat_classification.popular_threat_name.*.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "zbot"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.popular_threat_classification.suggested_threat_label",
                                        "data_type": "string",
                                        "example_values": [
                                            "trojan.zbot/foreign"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.reputation",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.sandbox_verdicts.Tencent HABO.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "xyz"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.attributes.sha1",
                                        "data_type": "string",
                                        "example_values": [
                                            "6802169a19142292710254cde97df84e46dfe33a"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.attributes.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "e87051ea8e1bb3c986c0f0bda85352f63e67e0315c58e461a075b5fb7229e6fe"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.signature_info.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "xyz"
                                        ]
                                    },
                                    {
                                        "column_name": "Size",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.attributes.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6285
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.ssdeep",
                                        "data_type": "string",
                                        "example_values": [
                                            "192:MPv2vv/ybXAhgPpyN3ipdw0fRAdygi6OLxgUHzYu7ThPBLkv:pq7Mgg0/NdMu/1BLkv"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.tags",
                                        "data_type": "string",
                                        "example_values": [
                                            "python"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.times_submitted",
                                        "data_type": "numeric",
                                        "example_values": [
                                            13
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.tlsh",
                                        "data_type": "string",
                                        "example_values": [
                                            "T1F7D10E05AC5E941C47329D1EDD16FD1BEB0122B724296327B46CA2997FB0468C3E14FC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.total_votes.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trid.*.file_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Unix-like shebang (var.1) (gen)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.trid.*.probability",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.type_description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Python"
                                        ]
                                    },
                                    {
                                        "column_name": "File Extension",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.attributes.type_extension",
                                        "data_type": "string",
                                        "example_values": [
                                            "py"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.type_tag",
                                        "data_type": "string",
                                        "example_values": [
                                            "python"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.unique_sources",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.attributes.vhash",
                                        "data_type": "string",
                                        "example_values": [
                                            "025056657d755510804011z9005b9z25z12z3afz"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "e87051ea8e1bb3c986c0f0bda85352f63e67e0315c58e461a075b5fb7229e6fe"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.links.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.virustotal.com/api/v3/files/e87051ea8e1bb3c986c0f0bda85352f63e67e0315c58e461a075b5fb7229e6fe"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "file"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.harmless",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.suspicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.undetected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            59
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Harmless: 0, Malicious: 0, Suspicious: 0, Undetected: 59"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "File hash to query",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal v3",
                                "product_vendor": "VirusTotal",
                                "targets": "105",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "File reputation VT"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def File_reputation_VT(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('File_reputation_VT() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'File_reputation_VT' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256', 'filtered-data:Filter_out_fileHash:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'File_reputation_VT' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'hash': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"file reputation\", parameters=parameters, assets=['virustotal v3 asset'], callback=File_reputation_TS, name=\"File_reputation_VT\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "File reputation VT",
                        "delay": 0,
                        "description": "File reputation VT",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "fb7e78ca-390d-48d6-b9ba-7eaa9e172198",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 427,
                        "line_start": 404,
                        "message": "Configuring now",
                        "name": "file reputation",
                        "notes": "File reputation VT",
                        "number": 1,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 700,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "File_reputation_VT",
                        "required_params": {
                            "hash": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2798
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0f5363f9-6327-4a59-9606-58b1949be305",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6fd40547-8672-4b3c-b73e-28197a58db46",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ba0a4487-478a-4956-82ff-5314eb1f5956",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2800
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b7b313db-1f85-47a8-a9fe-0ba4e13d2da9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ba0a4487-478a-4956-82ff-5314eb1f5956",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "8d2a56d2-b5ff-49b7-a7b4-9548add07b37",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2809
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Add note destinationDns..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Add_note_destinationDnsDomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_destinationDnsDomain() called')\n    \n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = json.loads(phantom.get_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #content = \"Domain: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal Domain Reputation\" +\"\\n\" + \"Summary Malicious: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream Domain Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Umbrella Domain Reputation\" +\"\\n\" + \"Domain status: \" + str(results_item_3_0[0]) \n\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    content = \"\"\n    for artifact in data:     \n        content += f\"Domain: {data[artifact]['ts']['domain']}\\n\\n\"\n        content += f\"**VirusTotal Domain Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream Domain Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**Umbrella Domain Reputation**\\n\"\n        content += f\"- Summary: {data[artifact]['ubl']['summary_domain_status'] if data[artifact]['ubl']['summary_domain_status'] else '-'}\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"Domain Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    Update_external_destinationDnsDomain_art(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "Domain Reputation UBL",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Add_note_destinationDnsDomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_destinationDnsDomain() called')\n    \n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = json.loads(phantom.get_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #content = \"Domain: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal Domain Reputation\" +\"\\n\" + \"Summary Malicious: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream Domain Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Umbrella Domain Reputation\" +\"\\n\" + \"Domain status: \" + str(results_item_3_0[0]) \n\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    content = \"\"\n    for artifact in data:     \n        content += f\"Domain: {data[artifact]['ts']['domain']}\\n\\n\"\n        content += f\"**VirusTotal Domain Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream Domain Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**Umbrella Domain Reputation**\\n\"\n        content += f\"- Summary: {data[artifact]['ubl']['summary_domain_status'] if data[artifact]['ubl']['summary_domain_status'] else '-'}\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"Domain Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "Add note destinationDnsDomain",
                        "description": "Add note destinationDnsDomain",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9a20fd03-9ed5-4eb7-9e26-ddeab4375e96",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 773,
                        "line_start": 719,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Add note destinationDnsDomain",
                        "number": 19,
                        "order": 21,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_destinationDnsDomain:custom_function:all_results_destinationDnsDomain"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2100,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Add_note_destinationDnsDomain",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    #content = \"Domain: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal Domain Reputation\" +\"\\n\" + \"Summary Malicious: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream Domain Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Umbrella Domain Reputation\" +\"\\n\" + \"Domain status: \" + str(results_item_3_0[0]) \n\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    content = \"\"\n    for artifact in data:     \n        content += f\"Domain: {data[artifact]['ts']['domain']}\\n\\n\"\n        content += f\"**VirusTotal Domain Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream Domain Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**Umbrella Domain Reputation**\\n\"\n        content += f\"- Summary: {data[artifact]['ubl']['summary_domain_status'] if data[artifact]['ubl']['summary_domain_status'] else '-'}\\n\"\n        content += \"---\\n\"\n    \n    note_title = \"Domain Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2817
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "640cf9e9-9cb1-4d53-99c1-a7372c7e1d1c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8d2a56d2-b5ff-49b7-a7b4-9548add07b37",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "78c82df2-6a95-4dbc-a661-56ab1edac0f3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2819
                    },
                    {
                        "action": "update artifact",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "artifact_id": "filtered-data:Link_domain_to_artifact_record:condition_1:artifact:*.id",
                            "artifact_json": "",
                            "cef_json": "{\"is_internalDomain\": \"True\"}",
                            "cef_types_json": "",
                            "label": "",
                            "name": "",
                            "overwrite": "",
                            "severity": "",
                            "tags": ""
                        },
                        "angle": 0,
                        "app": "Phantom",
                        "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "approver": "",
                        "assets": [
                            {
                                "action": "update artifact",
                                "actions": [
                                    "no op",
                                    "update list",
                                    "get action result",
                                    "create container",
                                    "import container",
                                    "export container",
                                    "deflate item",
                                    "add artifact",
                                    "find listitem",
                                    "add listitem",
                                    "find artifacts",
                                    "update artifact tags",
                                    "add note",
                                    "update artifact",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Phantom",
                                "app_version": "3.2.17",
                                "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                                "asset_name": "phantom asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "artifact_id": "filtered-data:Link_domain_to_artifact_record:condition_1:artifact:*.id",
                                    "artifact_json": "",
                                    "cef_json": "{\"is_internalDomain\": \"True\"}",
                                    "cef_types_json": "",
                                    "label": "",
                                    "name": "",
                                    "overwrite": "",
                                    "severity": "",
                                    "tags": ""
                                },
                                "has_app": true,
                                "id": 11,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Artifact ID",
                                        "column_order": 0,
                                        "contains": [
                                            "phantom artifact id"
                                        ],
                                        "data_path": "action_result.parameter.artifact_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "2388"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.artifact_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"severity\": \"high\", \"label\": \"test label\", \"description\": \"Artifact added by Me\", \"source_data_identifier\": \"my_custom_sdi\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.cef_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"new_field\": \"new_value\", \"deleted_field\": \"\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.cef_types_json",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"new_field\": [\"new contains\"]}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.label",
                                        "data_type": "string",
                                        "example_values": [
                                            "test label"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "New Name"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.overwrite",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.severity",
                                        "data_type": "string",
                                        "example_values": [
                                            "high"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.tags",
                                        "data_type": "string",
                                        "example_values": [
                                            "[\"tag2\"]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.deleted_field",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.new_field",
                                        "data_type": "string",
                                        "example_values": [
                                            "new_value"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef.test",
                                        "data_type": "string",
                                        "example_values": [
                                            "fff"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.cef_types.new_field",
                                        "data_type": "string",
                                        "example_values": [
                                            "new contains"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Artifact added by Me"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.label",
                                        "data_type": "string",
                                        "example_values": [
                                            "test label"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "New Name"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.severity",
                                        "data_type": "string",
                                        "example_values": [
                                            "high"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.source_data_identifier",
                                        "data_type": "string",
                                        "example_values": [
                                            "my_custom_sdi"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.requested_artifact.tags",
                                        "data_type": "string",
                                        "example_values": [
                                            "tag2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response.id",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2388
                                        ]
                                    },
                                    {
                                        "column_name": "Success",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.response.success",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Artifact updated successfully."
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "artifact_id": {
                                        "contains": [
                                            "phantom artifact id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "ID of artifact to update",
                                        "key": "artifact_id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "artifact_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of entire artifact (Always overwrites provided keys)",
                                        "key": "artifact_json",
                                        "order": 8,
                                        "required": false
                                    },
                                    "cef_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of the CEF fields you want in the artifact",
                                        "key": "cef_json",
                                        "order": 4,
                                        "required": false
                                    },
                                    "cef_types_json": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON format of the CEF types (e.g., {'myIP': ['ip', 'ipv6']})",
                                        "key": "cef_types_json",
                                        "order": 5,
                                        "required": false
                                    },
                                    "label": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact label (Always overwrites, if provided)",
                                        "key": "label",
                                        "order": 2,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact name (Always overwrites, if provided)",
                                        "key": "name",
                                        "order": 1,
                                        "required": false
                                    },
                                    "overwrite": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Overwrite artifacts with provided input (applies to: cef_json, contains_json, tags)",
                                        "key": "overwrite",
                                        "order": 7,
                                        "required": false
                                    },
                                    "severity": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Artifact severity (Always overwrites, if provided)",
                                        "key": "severity",
                                        "order": 3,
                                        "required": false
                                    },
                                    "tags": {
                                        "allow_list": true,
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Comma-separated list of tags to add or replace in the artifact",
                                        "key": "tags",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Phantom",
                                "product_vendor": "Phantom",
                                "targets": "11",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Update internal destinati...."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_internal_destinationDnsDomain_art(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_internal_destinationDnsDomain_art() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_internal_destinationDnsDomain_art' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Link_domain_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:Link_domain_to_artifact_record:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'Update_internal_destinationDnsDomain_art' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'name': \"\",\n                'tags': \"\",\n                'label': \"\",\n                'cef_json': \"{\\\"is_internalDomain\\\": \\\"True\\\"}\",\n                'severity': \"\",\n                'overwrite': \"\",\n                'artifact_id': filtered_artifacts_item_1[0],\n                'artifact_json': \"\",\n                'cef_types_json': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"Update_internal_destinationDnsDomain_art\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Update internal destinationDnsDomain art",
                        "delay": 0,
                        "description": "Update internal destinationDnsDomain artifact",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "58236bdc-a1e5-4458-9cb3-6f79327e92bc",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 896,
                        "line_start": 865,
                        "message": "Configuring now",
                        "name": "update artifact",
                        "notes": "Update internal destinationDnsDomain artifact",
                        "number": 2,
                        "order": 24,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 1200
                        },
                        "previous_function": "",
                        "previous_name": "Update_internal_destinationDnsDomain_art",
                        "required_params": {
                            "artifact_id": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2822
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b085855e-0f24-436c-b719-a7ca93ab745d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2c7bd917-fce7-47e3-b6c8-36894768ff7d",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2828
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e5cf5292-5db6-4f82-9925-05a533953a5d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2c7bd917-fce7-47e3-b6c8-36894768ff7d",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4955e789-6853-4895-9ce8-7fedbf2bd7e0",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2832
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "755dc8cf-d061-4580-b62e-79efe85aa67e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4955e789-6853-4895-9ce8-7fedbf2bd7e0",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d4104d22-0ec0-4381-b604-8970f8058a8c",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2850
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f2112122-4adc-457d-9255-c465aa870803",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d4104d22-0ec0-4381-b604-8970f8058a8c",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5530bb08-9b38-49cd-9fe6-6cded5e31902",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2852
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c449e66b-e5f2-4aa8-80ef-b7b75bea59a1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d4104d22-0ec0-4381-b604-8970f8058a8c",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b20b1b4a-2993-45c9-88da-5761a43e3dd7",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2860
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "771ab9f4-fa6d-4029-8ca5-d97802d37067",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b20b1b4a-2993-45c9-88da-5761a43e3dd7",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2741e153-135b-490a-b640-2d1aefa36a30",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2862
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2a86a719-40f7-4e7b-b48d-7efde9600e96",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5530bb08-9b38-49cd-9fe6-6cded5e31902",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "55b7011e-e9e3-4439-ad27-b699898ef6e5",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2882
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "838c0b3d-5b4c-4f28-b66a-99561e2fe581",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2741e153-135b-490a-b640-2d1aefa36a30",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5ef985c8-0576-4193-873d-441f0282b295",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2884
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dab64fb0-29b1-492d-9dad-67c854cef76b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "55b7011e-e9e3-4439-ad27-b699898ef6e5",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e6d7203d-54c2-4c1f-b970-54c60e5aba16",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2886
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7fdc6134-a560-41c7-b5ca-33b7f675e17f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e6d7203d-54c2-4c1f-b970-54c60e5aba16",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9b9b2a88-6d6b-4bfe-a87a-50166472a435",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 2888
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Collect all results fileHash"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Collect_all_results_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_fileHash() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_fileHash__all_results_fileHash = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_fileHash = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_VT:action_result.parameter.context.artifact_id', 'File_reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_fileHash.get(artifact_id, None) == None:\n            all_results_fileHash[artifact_id] = {}\n        if all_results_fileHash[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_fileHash[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_fileHash[artifact_id]['vt']['summary_malicious'] = 0 if all_results_fileHash[artifact_id]['vt']['summary_malicious'] == None else all_results_fileHash[artifact_id]['vt']['summary_malicious']\n            all_results_fileHash[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_fileHash[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            filehash = artifact['parameter']['hash']\n            status = artifact['status']\n            \n            if all_results_fileHash.get(artifact_id, None) == None:\n                all_results_fileHash[artifact_id] = {}\n            if all_results_fileHash[artifact_id].get('ts', None) == None:\n                all_results_fileHash[artifact_id]['ts'] = {\n                   'hash': filehash,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_fileHash[artifact_id]['ts']['threat_types']:\n                    all_results_fileHash[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, hash: {artifact['parameter']['hash']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    #phantom.debug(all_results_fileHash)\n    Collect_all_results_fileHash__all_results_fileHash = all_results_fileHash\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_fileHash:all_results_fileHash', value=json.dumps(Collect_all_results_fileHash__all_results_fileHash))\n    Add_note_fileHash(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "File reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def Collect_all_results_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_fileHash() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_fileHash__all_results_fileHash = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_fileHash = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_VT:action_result.parameter.context.artifact_id', 'File_reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_fileHash.get(artifact_id, None) == None:\n            all_results_fileHash[artifact_id] = {}\n        if all_results_fileHash[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_fileHash[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_fileHash[artifact_id]['vt']['summary_malicious'] = 0 if all_results_fileHash[artifact_id]['vt']['summary_malicious'] == None else all_results_fileHash[artifact_id]['vt']['summary_malicious']\n            all_results_fileHash[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_fileHash[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            filehash = artifact['parameter']['hash']\n            status = artifact['status']\n            \n            if all_results_fileHash.get(artifact_id, None) == None:\n                all_results_fileHash[artifact_id] = {}\n            if all_results_fileHash[artifact_id].get('ts', None) == None:\n                all_results_fileHash[artifact_id]['ts'] = {\n                   'hash': filehash,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_fileHash[artifact_id]['ts']['threat_types']:\n                    all_results_fileHash[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, hash: {artifact['parameter']['hash']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    #phantom.debug(all_results_fileHash)\n    Collect_all_results_fileHash__all_results_fileHash = all_results_fileHash\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_fileHash:all_results_fileHash', value=json.dumps(Collect_all_results_fileHash__all_results_fileHash))\n    Add_note_fileHash(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Collect all results fileHash",
                        "description": "Collect all results fileHash",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ba0a4487-478a-4956-82ff-5314eb1f5956",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1393,
                        "line_start": 1329,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Collect all results fileHash",
                        "number": 35,
                        "order": 36,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "all_results_fileHash"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1780,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "Collect_all_results_fileHash",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    all_results_fileHash = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_VT:action_result.parameter.context.artifact_id', 'File_reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_fileHash.get(artifact_id, None) == None:\n            all_results_fileHash[artifact_id] = {}\n        if all_results_fileHash[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_fileHash[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_fileHash[artifact_id]['vt']['summary_malicious'] = 0 if all_results_fileHash[artifact_id]['vt']['summary_malicious'] == None else all_results_fileHash[artifact_id]['vt']['summary_malicious']\n            all_results_fileHash[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_fileHash[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['File_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            filehash = artifact['parameter']['hash']\n            status = artifact['status']\n            \n            if all_results_fileHash.get(artifact_id, None) == None:\n                all_results_fileHash[artifact_id] = {}\n            if all_results_fileHash[artifact_id].get('ts', None) == None:\n                all_results_fileHash[artifact_id]['ts'] = {\n                   'hash': filehash,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_fileHash[artifact_id]['ts']['threat_types']:\n                    all_results_fileHash[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, hash: {artifact['parameter']['hash']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    #phantom.debug(all_results_fileHash)\n    Collect_all_results_fileHash__all_results_fileHash = all_results_fileHash\n\n",
                        "warn": false,
                        "z": 2897
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 21
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def filter_21(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('filter_21() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [1, \"==\", 1],\n        ],\n        name=\"filter_21:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        pass\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Domain Reputation UBL, URL Reputation TS, File reputation TS, Email reputation TS",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "de812137-e049-456f-b439-08c09ff66452",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_filter_21(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_filter_21() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['Domain_Reputation_UBL', 'URL_Reputation_TS', 'File_reputation_TS', 'Email_reputation_TS']):\n        \n        # call connected block \"filter_21\"\n        filter_21(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 914,
                        "line_end": 925,
                        "line_start": 896,
                        "name": "filter",
                        "notes": "",
                        "number": 21,
                        "order": 25,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "1",
                                        "value": "1"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2800,
                            "y": 1300
                        },
                        "previous_function": "",
                        "previous_name": "filter_21",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2899
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Collect all results email"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Collect_all_results_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_email() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_email__all_results_email = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_email = {}\n\n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Email_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            email = artifact['parameter']['email']\n            status = artifact['status']\n            \n            if all_results_email.get(artifact_id, None) == None:\n                all_results_email[artifact_id] = {}\n            if all_results_email[artifact_id].get('ts', None) == None:\n                all_results_email[artifact_id]['ts'] = {\n                   'email': email,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_email[artifact_id]['ts']['threat_types']:\n                    all_results_email[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, email: {artifact['parameter']['email']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    phantom.debug(all_results_email)\n    Collect_all_results_email__all_results_email = all_results_email\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_email:all_results_email', value=json.dumps(Collect_all_results_email__all_results_email))\n    Add_note_user_email(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Email reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def Collect_all_results_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_email() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_email__all_results_email = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_email = {}\n\n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Email_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            email = artifact['parameter']['email']\n            status = artifact['status']\n            \n            if all_results_email.get(artifact_id, None) == None:\n                all_results_email[artifact_id] = {}\n            if all_results_email[artifact_id].get('ts', None) == None:\n                all_results_email[artifact_id]['ts'] = {\n                   'email': email,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_email[artifact_id]['ts']['threat_types']:\n                    all_results_email[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, email: {artifact['parameter']['email']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    phantom.debug(all_results_email)\n    Collect_all_results_email__all_results_email = all_results_email\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_email:all_results_email', value=json.dumps(Collect_all_results_email__all_results_email))\n\n    return",
                        "custom_join": "",
                        "custom_name": "Collect all results email",
                        "description": "Collect all results email",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9b9b2a88-6d6b-4bfe-a87a-50166472a435",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1635,
                        "line_start": 1585,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Collect all results email",
                        "number": 38,
                        "order": 43,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "all_results_email"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1780,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Collect_all_results_email",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    all_results_email = {}\n\n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Email_reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            email = artifact['parameter']['email']\n            status = artifact['status']\n            \n            if all_results_email.get(artifact_id, None) == None:\n                all_results_email[artifact_id] = {}\n            if all_results_email[artifact_id].get('ts', None) == None:\n                all_results_email[artifact_id]['ts'] = {\n                   'email': email,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_email[artifact_id]['ts']['threat_types']:\n                    all_results_email[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, email: {artifact['parameter']['email']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    phantom.debug(all_results_email)\n    Collect_all_results_email__all_results_email = all_results_email\n\n",
                        "warn": false,
                        "z": 2900
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Add note fileHash"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Add_note_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_fileHash() called')\n    \n    Collect_all_results_fileHash__all_results_fileHash = json.loads(phantom.get_run_data(key='Collect_all_results_fileHash:all_results_fileHash'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    data = Collect_all_results_fileHash__all_results_fileHash\n    content = \"\"\n    for artifact in data:    \n        content += f\"fileHash: {data[artifact]['ts']['hash']}\\n\\n\"\n        content += f\"**VirusTotal File Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream File Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"fileHash Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    Update_fileHash(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "File reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Add_note_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_fileHash() called')\n    \n    Collect_all_results_fileHash__all_results_fileHash = json.loads(phantom.get_run_data(key='Collect_all_results_fileHash:all_results_fileHash'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    data = Collect_all_results_fileHash__all_results_fileHash\n    content = \"\"\n    for artifact in data:    \n        content += f\"fileHash: {data[artifact]['ts']['hash']}\\n\\n\"\n        content += f\"**VirusTotal File Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream File Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"fileHash Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "Add note fileHash",
                        "description": "Add note fileHash",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8d2a56d2-b5ff-49b7-a7b4-9548add07b37",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 493,
                        "line_start": 457,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Add note fileHash",
                        "number": 12,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_fileHash:custom_function:all_results_fileHash"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2100,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "Add_note_fileHash",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    \n    data = Collect_all_results_fileHash__all_results_fileHash\n    content = \"\"\n    for artifact in data:    \n        content += f\"fileHash: {data[artifact]['ts']['hash']}\\n\\n\"\n        content += f\"**VirusTotal File Reputation**\\n\" \n        content += f\"- Malicious count: {data[artifact]['vt']['summary_malicious']}\\n\\n\"\n        content += f\"- Summary: {'N/A' if data[artifact]['vt']['summary_malicious'] == None else 'MALICIOUS' if data[artifact]['vt']['summary_malicious'] > 2 else 'NON-MALICIOUS'}\\n\\n\"\n        \n        content += f\"**ThreatStream File Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"fileHash Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                        "warn": false,
                        "z": 2905
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Check if destinationDnsD..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Check_if_destinationDnsDomain_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_destinationDnsDomain_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_destinationDnsDomain:condition_1:artifact:*.cef.destinationDnsDomain'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    Check_if_destinationDnsDomain_external__destinationDnsDomainExternal = None\n    Check_if_destinationDnsDomain_external__destinationDnsDomainInternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    success, message, ktbdomainlist = phantom.get_list(list_name='ktbdomainlist')\n    \n    domainlist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    phantom.debug(ktbdomainlist)\n    for item in domainlist:\n        if not any(item in sublist for sublist in ktbdomainlist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    Check_if_destinationDnsDomain_external__destinationDnsDomainExternal = externaltemplist\n    Check_if_destinationDnsDomain_external__destinationDnsDomainInternal = internaltemplist\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Check_if_destinationDnsDomain_external:destinationDnsDomainExternal', value=json.dumps(Check_if_destinationDnsDomain_external__destinationDnsDomainExternal))\n    phantom.save_run_data(key='Check_if_destinationDnsDomain_external:destinationDnsDomainInternal', value=json.dumps(Check_if_destinationDnsDomain_external__destinationDnsDomainInternal))\n    Check_if_destinationDnsDomain_is_private(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def Check_if_destinationDnsDomain_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_destinationDnsDomain_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_destinationDnsDomain:condition_1:artifact:*.cef.destinationDnsDomain'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    Check_if_destinationDnsDomain_external__destinationDnsDomainExternal = None\n    Check_if_destinationDnsDomain_external__destinationDnsDomainInternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    success, message, ktbdomainlist = phantom.get_list(list_name='ktbdomainlist')\n    \n    domainlist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    phantom.debug(ktbdomainlist)\n    for item in domainlist:\n        if not any(item in sublist for sublist in ktbdomainlist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    Check_if_destinationDnsDomain_external__destinationDnsDomainExternal = externaltemplist\n    Check_if_destinationDnsDomain_external__destinationDnsDomainInternal = internaltemplist\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Check_if_destinationDnsDomain_external:destinationDnsDomainExternal', value=json.dumps(Check_if_destinationDnsDomain_external__destinationDnsDomainExternal))\n    phantom.save_run_data(key='Check_if_destinationDnsDomain_external:destinationDnsDomainInternal', value=json.dumps(Check_if_destinationDnsDomain_external__destinationDnsDomainInternal))\n    Check_if_destinationDnsDomain_is_private(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Check if destinationDnsDomain external",
                        "description": "Check if destinationDnsDomain external",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1294c975-2965-44e6-ac08-9bd1f18fe24e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 629,
                        "line_start": 587,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Check if destinationDnsDomain external",
                        "number": 17,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "destinationDnsDomainExternal"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "destinationDnsDomainInternal"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "filtered-data:Filter_out_destinationDnsDomain:condition_1:artifact:*.cef.destinationDnsDomain"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 20,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Check_if_destinationDnsDomain_external",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    success, message, ktbdomainlist = phantom.get_list(list_name='ktbdomainlist')\n    \n    domainlist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    phantom.debug(ktbdomainlist)\n    for item in domainlist:\n        if not any(item in sublist for sublist in ktbdomainlist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    Check_if_destinationDnsDomain_external__destinationDnsDomainExternal = externaltemplist\n    Check_if_destinationDnsDomain_external__destinationDnsDomainInternal = internaltemplist\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2907
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Collect all results destina..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Collect_all_results_destinationDnsDomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_destinationDnsDomain() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_destinationDnsDomain = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_VT:action_result.parameter.context.artifact_id', 'Domain_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_destinationDnsDomain[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] = 0 if all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] == None else all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious']\n            all_results_destinationDnsDomain[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            domain = artifact['parameter']['domain']\n            status = artifact['status']\n            \n            if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n                all_results_destinationDnsDomain[artifact_id] = {}\n            if all_results_destinationDnsDomain[artifact_id].get('ts', None) == None:\n                all_results_destinationDnsDomain[artifact_id]['ts'] = {\n                   'domain': domain,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_destinationDnsDomain[artifact_id]['ts']['threat_types']:\n                    all_results_destinationDnsDomain[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    # Get results from UBL\n    results_data_ubl = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_UBL:action_result.parameter.context.artifact_id', 'Domain_Reputation_UBL:action_result.summary.domain_status'], action_results=results)\n    for row in results_data_ubl:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_domain_status = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('ubl', None) == None:\n            summary_domain_status = 0 if summary_domain_status == None else summary_domain_status\n            all_results_destinationDnsDomain[artifact_id]['ubl'] = {'summary_domain_status': summary_domain_status}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] = 0 if all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] == None else all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status']\n            all_results_destinationDnsDomain[artifact_id] = {'ubl': {'summary_domain_status': max(summary_domain_status, all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'])}}\n            \n    #phantom.debug(all_results_destinationDnsDomain)\n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = all_results_destinationDnsDomain\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain', value=json.dumps(Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain))\n    Add_note_destinationDnsDomain(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "Domain Reputation UBL",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def Collect_all_results_destinationDnsDomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_destinationDnsDomain() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    all_results_destinationDnsDomain = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_VT:action_result.parameter.context.artifact_id', 'Domain_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_destinationDnsDomain[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] = 0 if all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] == None else all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious']\n            all_results_destinationDnsDomain[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            domain = artifact['parameter']['domain']\n            status = artifact['status']\n            \n            if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n                all_results_destinationDnsDomain[artifact_id] = {}\n            if all_results_destinationDnsDomain[artifact_id].get('ts', None) == None:\n                all_results_destinationDnsDomain[artifact_id]['ts'] = {\n                   'domain': domain,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_destinationDnsDomain[artifact_id]['ts']['threat_types']:\n                    all_results_destinationDnsDomain[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    # Get results from UBL\n    results_data_ubl = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_UBL:action_result.parameter.context.artifact_id', 'Domain_Reputation_UBL:action_result.summary.domain_status'], action_results=results)\n    for row in results_data_ubl:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_domain_status = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('ubl', None) == None:\n            summary_domain_status = 0 if summary_domain_status == None else summary_domain_status\n            all_results_destinationDnsDomain[artifact_id]['ubl'] = {'summary_domain_status': summary_domain_status}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] = 0 if all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] == None else all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status']\n            all_results_destinationDnsDomain[artifact_id] = {'ubl': {'summary_domain_status': max(summary_domain_status, all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'])}}\n            \n    #phantom.debug(all_results_destinationDnsDomain)\n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = all_results_destinationDnsDomain\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain', value=json.dumps(Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain))\n    Add_note_destinationDnsDomain(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Collect all results destinationDnsDomain",
                        "description": "Collect all results destinationDnsDomain",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f0b95f81-f10f-46ba-9a07-08d13f6cb071",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1326,
                        "line_start": 1247,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Collect all results destinationDnsDomain",
                        "number": 34,
                        "order": 35,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "all_results_destinationDnsDomain"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1780,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Collect_all_results_destinationDnsDomain",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    all_results_destinationDnsDomain = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_VT:action_result.parameter.context.artifact_id', 'Domain_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_destinationDnsDomain[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] = 0 if all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'] == None else all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious']\n            all_results_destinationDnsDomain[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_destinationDnsDomain[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            domain = artifact['parameter']['domain']\n            status = artifact['status']\n            \n            if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n                all_results_destinationDnsDomain[artifact_id] = {}\n            if all_results_destinationDnsDomain[artifact_id].get('ts', None) == None:\n                all_results_destinationDnsDomain[artifact_id]['ts'] = {\n                   'domain': domain,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_destinationDnsDomain[artifact_id]['ts']['threat_types']:\n                    all_results_destinationDnsDomain[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n\n    # Get results from UBL\n    results_data_ubl = phantom.collect2(scope=\"all\", container=container, datapath=['Domain_Reputation_UBL:action_result.parameter.context.artifact_id', 'Domain_Reputation_UBL:action_result.summary.domain_status'], action_results=results)\n    for row in results_data_ubl:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_domain_status = row[1]\n        if all_results_destinationDnsDomain.get(artifact_id, None) == None:\n            all_results_destinationDnsDomain[artifact_id] = {}\n        if all_results_destinationDnsDomain[artifact_id].get('ubl', None) == None:\n            summary_domain_status = 0 if summary_domain_status == None else summary_domain_status\n            all_results_destinationDnsDomain[artifact_id]['ubl'] = {'summary_domain_status': summary_domain_status}\n        else:\n            all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] = 0 if all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'] == None else all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status']\n            all_results_destinationDnsDomain[artifact_id] = {'ubl': {'summary_domain_status': max(summary_domain_status, all_results_destinationDnsDomain[artifact_id]['ubl']['summary_domain_status'])}}\n            \n    #phantom.debug(all_results_destinationDnsDomain)\n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = all_results_destinationDnsDomain\n\n",
                        "warn": false,
                        "z": 2919
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a963d660-14be-44a6-b143-d100e3a6e3ea",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9b9b2a88-6d6b-4bfe-a87a-50166472a435",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b232fd77-6251-4c97-8f86-046172a4b967",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2924
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Add note user_email"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Add_note_user_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_user_email() called')\n    \n    Collect_all_results_email__all_results_email = json.loads(phantom.get_run_data(key='Collect_all_results_email:all_results_email'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    data = Collect_all_results_email__all_results_email\n    content = \"\"\n    for artifact in data:  \n        content += f\"Source Email: {data[artifact]['ts']['email']}\\n\\n\"\n        \n        content += f\"**ThreatStream E-mail Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"Email Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    Update_user_email(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Email reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Add_note_user_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_user_email() called')\n    \n    Collect_all_results_email__all_results_email = json.loads(phantom.get_run_data(key='Collect_all_results_email:all_results_email'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    data = Collect_all_results_email__all_results_email\n    content = \"\"\n    for artifact in data:  \n        content += f\"Source Email: {data[artifact]['ts']['email']}\\n\\n\"\n        \n        content += f\"**ThreatStream E-mail Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"Email Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "Add note user_email",
                        "description": "Add note user_email",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b232fd77-6251-4c97-8f86-046172a4b967",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1031,
                        "line_start": 1000,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Add note user_email",
                        "number": 30,
                        "order": 29,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_email:custom_function:all_results_email"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2100,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Add_note_user_email",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    data = Collect_all_results_email__all_results_email\n    content = \"\"\n    for artifact in data:  \n        content += f\"Source Email: {data[artifact]['ts']['email']}\\n\\n\"\n        \n        content += f\"**ThreatStream E-mail Repuation**\\n\"\n        content += f\"- Threat type: {', '.join(data[artifact]['ts']['threat_types']) if data[artifact]['ts']['threat_types'] != [] else '-'}\\n\\n\"\n        content += f\"- Summary: {'MALICIOUS' if len(data[artifact]['ts']['threat_types']) > 0 else 'NON-MALICIOUS'}\\n\\n\"\n        content += \"---\\n\"\n\n    note_title = \"Email Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                        "warn": false,
                        "z": 2925
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "760c8500-da6b-4d97-83f2-a3c9b51e8285",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b232fd77-6251-4c97-8f86-046172a4b967",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f8eb59dc-0c23-4ac7-a23d-1260a04d337d",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2927
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "06ba908c-52bf-4411-b03e-54a297938a62",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0e22cc7f-dd73-4c25-95c7-8971d09d8e8c",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2932
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73a273f3-beba-4d6c-8f28-3381764025b3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bb8d7b5d-4363-4f14-98d3-92ec391c0448",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2933
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4d00e7d3-29b6-401d-a71b-05e718e88b06",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0aaf17a4-eeb8-4016-9bb0-e1cca4743690",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bc4c1234-e3de-46f6-92ea-8b73087fae60",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 2934
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Check if requestURL exte..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Check_if_requestURL_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_requestURL_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(scope=\"all\", container=container, datapath=['filtered-data:Filter_out_requestURL:condition_1:artifact:*.cef.requestURL'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    Check_if_requestURL_external__requestURLExternal = None\n    Check_if_requestURL_external__requestURLInternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...    \n    # ktbdomainlist = [\"ktb.co.th\" , \"ktbcs.co.th\"]\n    success, message, ktburllist = phantom.get_list(list_name='ktburllist')\n    \n    urllist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    url_raw_data = []\n    for item in urllist:\n        if not any(item in sublist for sublist in ktburllist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': True})\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': False})\n            \n    Check_if_requestURL_external__requestURLExternal = externaltemplist\n    Check_if_requestURL_external__requestURLInternal = internaltemplist\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Check_if_requestURL_external:requestURLExternal', value=json.dumps(Check_if_requestURL_external__requestURLExternal))\n    phantom.save_run_data(key='Check_if_requestURL_external:requestURLInternal', value=json.dumps(Check_if_requestURL_external__requestURLInternal))\n    Check_if_requestURL_is_private(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def Check_if_requestURL_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_requestURL_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(scope=\"all\", container=container, datapath=['filtered-data:Filter_out_requestURL:condition_1:artifact:*.cef.requestURL'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    Check_if_requestURL_external__requestURLExternal = None\n    Check_if_requestURL_external__requestURLInternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...    \n    # ktbdomainlist = [\"ktb.co.th\" , \"ktbcs.co.th\"]\n    success, message, ktburllist = phantom.get_list(list_name='ktburllist')\n    \n    urllist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    url_raw_data = []\n    for item in urllist:\n        if not any(item in sublist for sublist in ktburllist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': True})\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': False})\n            \n    Check_if_requestURL_external__requestURLExternal = externaltemplist\n    Check_if_requestURL_external__requestURLInternal = internaltemplist\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Check_if_requestURL_external:requestURLExternal', value=json.dumps(Check_if_requestURL_external__requestURLExternal))\n    phantom.save_run_data(key='Check_if_requestURL_external:requestURLInternal', value=json.dumps(Check_if_requestURL_external__requestURLInternal))\n    Check_if_requestURL_is_private(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Check if requestURL external",
                        "description": "Check if requestURL external",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4c2e215d-a33b-4fc1-8740-9f483ac84359",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 105,
                        "line_start": 49,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Check if requestURL external",
                        "number": 9,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "requestURLExternal"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "requestURLInternal"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "filtered-data:Filter_out_requestURL:condition_1:artifact:*.cef.requestURL"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 20,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Check_if_requestURL_external",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...    \n    # ktbdomainlist = [\"ktb.co.th\" , \"ktbcs.co.th\"]\n    success, message, ktburllist = phantom.get_list(list_name='ktburllist')\n    \n    urllist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    url_raw_data = []\n    for item in urllist:\n        if not any(item in sublist for sublist in ktburllist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': True})\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            #url_raw_data.append({'id': artifact_id_list[idx], 'url': item, 'is_external': False})\n            \n    Check_if_requestURL_external__requestURLExternal = externaltemplist\n    Check_if_requestURL_external__requestURLInternal = internaltemplist\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################",
                        "warn": false,
                        "z": 2935
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 8
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_out_requestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_out_requestURL() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"!=\", \"\"],\n        ],\n        name=\"Filter_out_requestURL:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Check_if_requestURL_external(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter out requestURL",
                        "description": "Filter out requestURL",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "bc4c1234-e3de-46f6-92ea-8b73087fae60",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 46,
                        "line_start": 27,
                        "name": "filter",
                        "notes": "Filter out requestURL",
                        "number": 8,
                        "order": 2,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -140,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Filter_out_requestURL",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2936
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 15
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_out_destinationDnsDomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_out_destinationDnsDomain() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationDnsDomain\", \"!=\", \"\"],\n        ],\n        name=\"Filter_out_destinationDnsDomain:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Check_if_destinationDnsDomain_external(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter out destinationDnsDomain",
                        "description": "Filter out destinationDnsDomain",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "bb8d7b5d-4363-4f14-98d3-92ec391c0448",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 584,
                        "line_start": 565,
                        "name": "filter",
                        "notes": "Filter out destinationDnsDomain",
                        "number": 15,
                        "order": 16,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -140,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Filter_out_destinationDnsDomain",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2937
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 12
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_out_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_out_fileHash() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.fileHashSha256\", \"!=\", \"\"],\n        ],\n        name=\"Filter_out_fileHash:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        File_reputation_VT(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter out fileHash",
                        "description": "Filter out fileHash",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0e22cc7f-dd73-4c25-95c7-8971d09d8e8c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 401,
                        "line_start": 382,
                        "name": "filter",
                        "notes": "Filter out fileHash",
                        "number": 12,
                        "order": 11,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha256",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -160,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "Filter_out_fileHash",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2938
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 9
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Check_if_requestURL_is_private(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Check_if_requestURL_is_private() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Check_if_requestURL_external:custom_function:requestURLExternal\", \"!=\", []],\n        ],\n        name=\"Check_if_requestURL_is_private:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Filter_External_URL_to_artifact_record(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    # collect filtered artifact ids for 'if' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Check_if_requestURL_external:custom_function:requestURLInternal\", \"!=\", []],\n        ],\n        name=\"Check_if_requestURL_is_private:condition_2\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_2 or matched_results_2:\n        Link_URL_to_artifact_record(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Check if requestURL is private",
                        "description": "Check if requestURL is private",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "bde6c94d-a6d8-4dbb-b4bc-b3f9d1ebe0ef",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 141,
                        "line_start": 108,
                        "name": "filter",
                        "notes": "Check if requestURL is private",
                        "number": 9,
                        "order": 4,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "Check_if_requestURL_external:custom_function:requestURLExternal",
                                        "value": "[]"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "Check_if_requestURL_external:custom_function:requestURLInternal",
                                        "value": "[]"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 260,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Check_if_requestURL_is_private",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2940
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 30
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_External_URL_to_artifact_record(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_External_URL_to_artifact_record() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"in\", \"Check_if_requestURL_external:custom_function:requestURLExternal\"],\n        ],\n        name=\"Filter_External_URL_to_artifact_record:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        URL_Reputation_VT(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter External URL to artifact record",
                        "description": "Filter External URL to artifact record",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "043803ea-1c0a-48ce-b372-7c05ce1c397f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1156,
                        "line_start": 1137,
                        "name": "filter",
                        "notes": "Filter External URL to artifact record",
                        "number": 30,
                        "order": 32,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": "Check_if_requestURL_external:custom_function:requestURLExternal"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 460,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Filter_External_URL_to_artifact_record",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2941
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 10
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Link_URL_to_artifact_record(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Link_URL_to_artifact_record() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"in\", \"Check_if_requestURL_external:custom_function:requestURLInternal\"],\n        ],\n        name=\"Link_URL_to_artifact_record:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Update_internal_requestURL_artifact(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Link URL to artifact record",
                        "description": "Link URL to artifact record",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f13ee761-6699-4715-8b20-2a7638649f6e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 189,
                        "line_start": 170,
                        "name": "filter",
                        "notes": "Link URL to artifact record",
                        "number": 10,
                        "order": 6,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": "Check_if_requestURL_external:custom_function:requestURLInternal"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 460,
                            "y": 880
                        },
                        "previous_function": "",
                        "previous_name": "Link_URL_to_artifact_record",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2942
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 31
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_External_Domain_to_artifact_recor(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_External_Domain_to_artifact_recor() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationDnsDomain\", \"in\", \"Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainExternal\"],\n        ],\n        name=\"Filter_External_Domain_to_artifact_recor:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Domain_Reputation_VT(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter External Domain to artifact recor",
                        "description": "Filter External Domain to artifact record",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ef3c81ce-0573-4f6a-b149-fa2fde6baec6",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1244,
                        "line_start": 1225,
                        "name": "filter",
                        "notes": "Filter External Domain to artifact record",
                        "number": 31,
                        "order": 34,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainExternal"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 480,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Filter_External_Domain_to_artifact_recor",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2943
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 18
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Link_domain_to_artifact_record(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Link_domain_to_artifact_record() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationDnsDomain\", \"in\", \"Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainInternal\"],\n        ],\n        name=\"Link_domain_to_artifact_record:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Update_internal_destinationDnsDomain_art(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Link domain to artifact record",
                        "description": "Link domain to artifact record",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e8b80aa2-6be5-4342-a5b6-0d05ea88f474",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 862,
                        "line_start": 843,
                        "name": "filter",
                        "notes": "Link domain to artifact record",
                        "number": 18,
                        "order": 23,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "Check_if_destinationDnsDomain_external:custom_function:destinationDnsDomainInternal"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 480,
                            "y": 1200
                        },
                        "previous_function": "",
                        "previous_name": "Link_domain_to_artifact_record",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2944
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Collect all results request..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Collect_all_results_requestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_requestURL() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_requestURL__all_results_requestURL = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    all_results_requestURL = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_VT:action_result.parameter.context.artifact_id', 'URL_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_requestURL.get(artifact_id, None) == None:\n            all_results_requestURL[artifact_id] = {}\n        if all_results_requestURL[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_requestURL[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_requestURL[artifact_id]['vt']['summary_malicious'] = 0 if all_results_requestURL[artifact_id]['vt']['summary_malicious'] == None else all_results_requestURL[artifact_id]['vt']['summary_malicious']\n            all_results_requestURL[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_requestURL[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            url = artifact['parameter']['url']\n            status = artifact['status']\n            \n            if all_results_requestURL.get(artifact_id, None) == None:\n                all_results_requestURL[artifact_id] = {}\n            if all_results_requestURL[artifact_id].get('ts', None) == None:\n                all_results_requestURL[artifact_id]['ts'] = {\n                   'url': url,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_requestURL[artifact_id]['ts']['threat_types']:\n                    all_results_requestURL[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n                \n    #phantom.debug(all_results_requestURL)\n    Collect_all_results_requestURL__all_results_requestURL = all_results_requestURL\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_requestURL:all_results_requestURL', value=json.dumps(Collect_all_results_requestURL__all_results_requestURL))\n    Add_note_requestURL(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "URL Reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def Collect_all_results_requestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Collect_all_results_requestURL() called')\n    \n    input_parameter_0 = \"\"\n\n    Collect_all_results_requestURL__all_results_requestURL = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    all_results_requestURL = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_VT:action_result.parameter.context.artifact_id', 'URL_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_requestURL.get(artifact_id, None) == None:\n            all_results_requestURL[artifact_id] = {}\n        if all_results_requestURL[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_requestURL[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_requestURL[artifact_id]['vt']['summary_malicious'] = 0 if all_results_requestURL[artifact_id]['vt']['summary_malicious'] == None else all_results_requestURL[artifact_id]['vt']['summary_malicious']\n            all_results_requestURL[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_requestURL[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            url = artifact['parameter']['url']\n            status = artifact['status']\n            \n            if all_results_requestURL.get(artifact_id, None) == None:\n                all_results_requestURL[artifact_id] = {}\n            if all_results_requestURL[artifact_id].get('ts', None) == None:\n                all_results_requestURL[artifact_id]['ts'] = {\n                   'url': url,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_requestURL[artifact_id]['ts']['threat_types']:\n                    all_results_requestURL[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n                \n    #phantom.debug(all_results_requestURL)\n    Collect_all_results_requestURL__all_results_requestURL = all_results_requestURL\n\n            \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Collect_all_results_requestURL:all_results_requestURL', value=json.dumps(Collect_all_results_requestURL__all_results_requestURL))\n\n    return",
                        "custom_join": "",
                        "custom_name": "Collect all results requestURL",
                        "description": "Collect all results requestURL",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b1a3ebf3-6f52-493f-be66-82d036c5a677",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1222,
                        "line_start": 1159,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Collect all results requestURL",
                        "number": 33,
                        "order": 33,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "all_results_requestURL"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1780,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Collect_all_results_requestURL",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    all_results_requestURL = {}\n    # Get results from VT\n    results_data_vt = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_VT:action_result.parameter.context.artifact_id', 'URL_Reputation_VT:action_result.summary.malicious'], action_results=results)\n    for row in results_data_vt:\n        #phantom.debug(f\"{row[0]} ---- {row[1]}\")\n        artifact_id = row[0]\n        summary_malicious = row[1]\n        if all_results_requestURL.get(artifact_id, None) == None:\n            all_results_requestURL[artifact_id] = {}\n        if all_results_requestURL[artifact_id].get('vt', None) == None:\n            summary_malicious = 0 if summary_malicious == None else summary_malicious\n            all_results_requestURL[artifact_id]['vt'] = {'summary_malicious': summary_malicious}\n        else:\n            all_results_requestURL[artifact_id]['vt']['summary_malicious'] = 0 if all_results_requestURL[artifact_id]['vt']['summary_malicious'] == None else all_results_requestURL[artifact_id]['vt']['summary_malicious']\n            all_results_requestURL[artifact_id] = {'vt': {'summary_malicious': max(summary_malicious, all_results_requestURL[artifact_id]['vt']['summary_malicious'])}}\n    \n    # Get results from TS\n    results_data_ts = phantom.collect2(scope=\"all\", container=container, datapath=['URL_Reputation_TS:action_results'], action_results=results)\n    results_item_ts = [item[0] for item in results_data_ts]\n    for asset in results_item_ts:\n        for artifact in asset:\n            artifact_id = artifact['parameter']['context']['artifact_id']\n            url = artifact['parameter']['url']\n            status = artifact['status']\n            \n            if all_results_requestURL.get(artifact_id, None) == None:\n                all_results_requestURL[artifact_id] = {}\n            if all_results_requestURL[artifact_id].get('ts', None) == None:\n                all_results_requestURL[artifact_id]['ts'] = {\n                   'url': url,\n                   'status': status,\n                   'threat_types': []\n               }\n            \n            for data in artifact['data']:\n                threat_type = data.get('threat_type', None)\n                status = data.get('status', None)\n                if threat_type and status != 'falsepos' and threat_type not in all_results_requestURL[artifact_id]['ts']['threat_types']:\n                    all_results_requestURL[artifact_id]['ts']['threat_types'].append(threat_type)\n                #phantom.debug(f\"artifact: {artifact['parameter']['context']['artifact_id']}, domain: {artifact['parameter']['url']}, status: {artifact['status']}, threat_type: {threat_types}\")\n                \n    #phantom.debug(all_results_requestURL)\n    Collect_all_results_requestURL__all_results_requestURL = all_results_requestURL\n\n            \n\n",
                        "warn": false,
                        "z": 2949
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Update external request..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Update_external_requestURL_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_external_requestURL_artifact() called')\n    \n    Collect_all_results_requestURL__all_results_requestURL = json.loads(phantom.get_run_data(key='Collect_all_results_requestURL:all_results_requestURL'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"requestURL_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_requestURL\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "URL Reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Update_external_requestURL_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_external_requestURL_artifact() called')\n    \n    Collect_all_results_requestURL__all_results_requestURL = json.loads(phantom.get_run_data(key='Collect_all_results_requestURL:all_results_requestURL'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"requestURL_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_requestURL\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update external requestURL artifact",
                        "description": "Update external requestURL artifact",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "641b24e0-be9e-44f7-9e0b-0a6442c6ef00",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 379,
                        "line_start": 306,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Update external requestURL artifact",
                        "number": 11,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_requestURL:custom_function:all_results_requestURL"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "Update_external_requestURL_artifact",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    data = Collect_all_results_requestURL__all_results_requestURL\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"requestURL_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_requestURL\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2952
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Update external destinati..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Update_external_destinationDnsDomain_art(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_external_destinationDnsDomain_art() called')\n    \n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = json.loads(phantom.get_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2) or data[artifact]['ubl']['summary_domain_status'] == \"MALICIOUS\":\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"destinationDnsDomain_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationDnsDomain\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Domain Reputation UBL",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Update_external_destinationDnsDomain_art(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_external_destinationDnsDomain_art() called')\n    \n    Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain = json.loads(phantom.get_run_data(key='Collect_all_results_destinationDnsDomain:all_results_destinationDnsDomain'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2) or data[artifact]['ubl']['summary_domain_status'] == \"MALICIOUS\":\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"destinationDnsDomain_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationDnsDomain\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update external destinationDnsDomain art",
                        "description": "Update external destinationDnsDomain artifact",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8bbecafa-c1a7-41c8-aad3-07d5948f2baa",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 840,
                        "line_start": 776,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Update external destinationDnsDomain artifact",
                        "number": 20,
                        "order": 22,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_destinationDnsDomain:custom_function:all_results_destinationDnsDomain"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Update_external_destinationDnsDomain_art",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    data = Collect_all_results_destinationDnsDomain__all_results_destinationDnsDomain\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2) or data[artifact]['ubl']['summary_domain_status'] == \"MALICIOUS\":\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"destinationDnsDomain_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationDnsDomain\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n    \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2953
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Update fileHash"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Update_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_fileHash() called')\n    \n    Collect_all_results_fileHash__all_results_fileHash = json.loads(phantom.get_run_data(key='Collect_all_results_fileHash:all_results_fileHash'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_fileHash__all_results_fileHash\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fileHash_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_fileHash\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "File reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Update_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_fileHash() called')\n    \n    Collect_all_results_fileHash__all_results_fileHash = json.loads(phantom.get_run_data(key='Collect_all_results_fileHash:all_results_fileHash'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = Collect_all_results_fileHash__all_results_fileHash\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fileHash_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_fileHash\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update fileHash",
                        "description": "Update fileHash",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "78c82df2-6a95-4dbc-a661-56ab1edac0f3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 562,
                        "line_start": 496,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Update fileHash",
                        "number": 13,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_fileHash:custom_function:all_results_fileHash"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "Update_fileHash",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    data = Collect_all_results_fileHash__all_results_fileHash\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != [] or (data[artifact]['vt']['summary_malicious'] != None and data[artifact]['vt']['summary_malicious'] > 2):\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fileHash_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_fileHash\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 2954
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Update user_email"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Update_user_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_user_email() called')\n    \n    Collect_all_results_email__all_results_email = json.loads(phantom.get_run_data(key='Collect_all_results_email:all_results_email'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    data = Collect_all_results_email__all_results_email\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != []:\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fromEmail_actual_sender_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Email reputation TS",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Update_user_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_user_email() called')\n    \n    Collect_all_results_email__all_results_email = json.loads(phantom.get_run_data(key='Collect_all_results_email:all_results_email'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    data = Collect_all_results_email__all_results_email\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != []:\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fromEmail_actual_sender_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update user_email",
                        "description": "Update user_email",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f8eb59dc-0c23-4ac7-a23d-1260a04d337d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1086,
                        "line_start": 1034,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Update user_email",
                        "number": 31,
                        "order": 30,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "Collect_all_results_email:custom_function:all_results_email"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2360,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Update_user_email",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    data = Collect_all_results_email__all_results_email\n    malicious_artifact_list = []\n    \n    for artifact in data:\n        if data[artifact]['ts']['threat_types'] != []:\n            malicious_artifact_list.append(artifact)\n\n    parameters = []\n    cef_json = {\"fromEmail_actual_sender_malicious\" : \"True\"}\n    for artifact in malicious_artifact_list:\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\")\n\n    parameters = []\n    for artifact in malicious_artifact_list:\n        parameters.append({\n            'artifact_id': artifact,\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n        \n    if malicious_artifact_list:\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n",
                        "warn": false,
                        "z": 2955
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 29
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Filter_out_user_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Filter_out_user_email() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.fromEmail\", \"!=\", \"\"],\n        ],\n        name=\"Filter_out_user_email:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Retrieve_the_actual_sender_of_each_email(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Filter out user_email",
                        "description": "Filter out user_email",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2c7bd917-fce7-47e3-b6c8-36894768ff7d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 973,
                        "line_start": 954,
                        "name": "filter",
                        "notes": "Filter out user_email",
                        "number": 29,
                        "order": 27,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fromEmail",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -160,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Filter_out_user_email",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2957
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "Prepare Error Note Email"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Prepare_Error_Note_Email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Prepare_Error_Note_Email() called')\n    \n    template = \"\"\"ERROR: Email address cannot be retrieved, please check the field \\\"fromEmail\\\" in the Email Artifact whether it contains the sender's email address.\n\nArtifact ID: `{0}`\n\nfromEmail:\n```\n{1}\n```\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"filtered-data:Filter_out_user_email:condition_1:artifact:*.id\",\n        \"filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"Prepare_Error_Note_Email\", separator=\", \")\n\n    Add_note_Email_Error(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Prepare Error Note Email",
                        "delimiter": ", ",
                        "description": "Prepare Error Note Email",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b20b1b4a-2993-45c9-88da-5761a43e3dd7",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1582,
                        "line_start": 1558,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Prepare Error Note Email",
                        "number": 1,
                        "order": 42,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "filtered-data:Filter_out_user_email:condition_1:artifact:*.id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 480,
                            "y": 1880
                        },
                        "previous_function": "",
                        "previous_name": "Prepare_Error_Note_Email",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "ERROR: Email address cannot be retrieved, please check the field \"fromEmail\" in the Email Artifact whether it contains the sender's email address.\n\nArtifact ID: `{0}`\n\n\nfromEmail:\n```\n{1}\n```",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 2959
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 32
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def filter_actual_sender_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('filter_actual_sender_email() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail_actual_sender\", \"!=\", \"\"],\n        ],\n        name=\"filter_actual_sender_email:condition_1\",\n        scope=\"all\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        Email_reputation_TS(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "filter actual sender email",
                        "description": "filter actual sender email",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "55b7011e-e9e3-4439-ad27-b699898ef6e5",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1505,
                        "line_start": 1486,
                        "name": "filter",
                        "notes": "filter actual sender email",
                        "number": 32,
                        "order": 39,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail_actual_sender",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 760,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "filter_actual_sender_email",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 2964
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "artifact_scope": "all",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_result_from_getting_email_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_result_from_getting_email_address() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Retrieve_the_actual_sender_of_each_email:custom_function:total_email_count\", \">\", 0],\n        ],\n        scope=\"all\")\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        Add_actual_senders_email_address(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Prepare_Error_Note_Email(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check result from getting email address",
                        "description": "check result from getting email address",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d4104d22-0ec0-4381-b604-8970f8058a8c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1530,
                        "line_start": 1508,
                        "name": "decision",
                        "notes": "check result from getting email address",
                        "number": 1,
                        "order": 40,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": ">",
                                        "data_type": "",
                                        "param": "Retrieve_the_actual_sender_of_each_email:custom_function:total_email_count",
                                        "value": "0"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 300,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "check_result_from_getting_email_address",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 2965
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Retrieve the actual send..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Retrieve_the_actual_sender_of_each_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Retrieve_the_actual_sender_of_each_email() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_user_email:condition_1:artifact:*.id', 'filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n\n    Retrieve_the_actual_sender_of_each_email__email_list = None\n    Retrieve_the_actual_sender_of_each_email__total_email_count = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    import re\n    \n    artifact_list = filtered_artifacts_item_1_0\n    bodytext_list = filtered_artifacts_item_1_1\n    \n    email_list = {}\n    \n    init_search_pattern = r'(([^<>])*<)(\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+)(>)'\n    email_search_pattern = r'\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+'\n    init_pattern = re.compile(init_search_pattern)\n    email_pattern = re.compile(email_search_pattern)\n    \n    for i in range(len(artifact_list)):\n        target_line = init_pattern.search(bodytext_list[i])\n        if target_line:\n            target_line = target_line.group(0)\n            email = email_pattern.search(target_line)\n            if email:\n                email_list[artifact_list[i]] = email.group(0)\n            \n    Retrieve_the_actual_sender_of_each_email__email_list = email_list\n    Retrieve_the_actual_sender_of_each_email__total_email_count = len(email_list)\n    phantom.debug(Retrieve_the_actual_sender_of_each_email__email_list)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Retrieve_the_actual_sender_of_each_email:email_list', value=json.dumps(Retrieve_the_actual_sender_of_each_email__email_list))\n    phantom.save_run_data(key='Retrieve_the_actual_sender_of_each_email:total_email_count', value=json.dumps(Retrieve_the_actual_sender_of_each_email__total_email_count))\n    check_result_from_getting_email_address(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 13,
                        "custom_callback": "",
                        "custom_code": "def Retrieve_the_actual_sender_of_each_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Retrieve_the_actual_sender_of_each_email() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_user_email:condition_1:artifact:*.id', 'filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n\n    Retrieve_the_actual_sender_of_each_email__email_list = None\n    Retrieve_the_actual_sender_of_each_email__total_email_count = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    import re\n    \n    artifact_list = filtered_artifacts_item_1_0\n    bodytext_list = filtered_artifacts_item_1_1\n    \n    email_list = {}\n    \n    init_search_pattern = r'(([^<>])*<)(\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+)(>)'\n    email_search_pattern = r'\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+'\n    init_pattern = re.compile(init_search_pattern)\n    email_pattern = re.compile(email_search_pattern)\n    \n    for i in range(len(artifact_list)):\n        target_line = init_pattern.search(bodytext_list[i])\n        if target_line:\n            target_line = target_line.group(0)\n            email = email_pattern.search(target_line)\n            if email:\n                email_list[artifact_list[i]] = email.group(0)\n            \n    Retrieve_the_actual_sender_of_each_email__email_list = email_list\n    Retrieve_the_actual_sender_of_each_email__total_email_count = len(email_list)\n    phantom.debug(Retrieve_the_actual_sender_of_each_email__email_list)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='Retrieve_the_actual_sender_of_each_email:email_list', value=json.dumps(Retrieve_the_actual_sender_of_each_email__email_list))\n    phantom.save_run_data(key='Retrieve_the_actual_sender_of_each_email:total_email_count', value=json.dumps(Retrieve_the_actual_sender_of_each_email__total_email_count))\n    check_result_from_getting_email_address(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Retrieve the actual sender of each email",
                        "description": "Retrieve the actual sender of each email",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4955e789-6853-4895-9ce8-7fedbf2bd7e0",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1445,
                        "line_start": 1396,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Retrieve the actual sender of each email",
                        "number": 36,
                        "order": 37,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "email_list"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "total_email_count"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "filtered-data:Filter_out_user_email:condition_1:artifact:*.id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "filtered-data:Filter_out_user_email:condition_1:artifact:*.cef.fromEmail"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 20,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Retrieve_the_actual_sender_of_each_email",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    import re\n    \n    artifact_list = filtered_artifacts_item_1_0\n    bodytext_list = filtered_artifacts_item_1_1\n    \n    email_list = {}\n    \n    init_search_pattern = r'(([^<>])*<)(\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+)(>)'\n    email_search_pattern = r'\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+'\n    init_pattern = re.compile(init_search_pattern)\n    email_pattern = re.compile(email_search_pattern)\n    \n    for i in range(len(artifact_list)):\n        target_line = init_pattern.search(bodytext_list[i])\n        if target_line:\n            target_line = target_line.group(0)\n            email = email_pattern.search(target_line)\n            if email:\n                email_list[artifact_list[i]] = email.group(0)\n            \n    Retrieve_the_actual_sender_of_each_email__email_list = email_list\n    Retrieve_the_actual_sender_of_each_email__total_email_count = len(email_list)\n    phantom.debug(Retrieve_the_actual_sender_of_each_email__email_list)\n\n",
                        "warn": false,
                        "z": 2966
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "Add actual senders email..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Add_actual_senders_email_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_actual_senders_email_address() called')\n    \n    Retrieve_the_actual_sender_of_each_email__email_list = json.loads(phantom.get_run_data(key='Retrieve_the_actual_sender_of_each_email:email_list'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    parameters = []\n    data = Retrieve_the_actual_sender_of_each_email__email_list\n    for artifact in data:\n        cef_json = {\"fromEmail_actual_sender\" : data[artifact]}\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\", callback=filter_actual_sender_email)\n    return\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    filter_actual_sender_email(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def Add_actual_senders_email_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_actual_senders_email_address() called')\n    \n    Retrieve_the_actual_sender_of_each_email__email_list = json.loads(phantom.get_run_data(key='Retrieve_the_actual_sender_of_each_email:email_list'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    parameters = []\n    data = Retrieve_the_actual_sender_of_each_email__email_list\n    for artifact in data:\n        cef_json = {\"fromEmail_actual_sender\" : data[artifact]}\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\", callback=filter_actual_sender_email)\n    return\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    filter_actual_sender_email(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Add actual senders email address",
                        "description": "Add actual sender's email address",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5530bb08-9b38-49cd-9fe6-6cded5e31902",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 1483,
                        "line_start": 1448,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Add actual sender's email address",
                        "number": 37,
                        "order": 38,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Retrieve_the_actual_sender_of_each_email:custom_function:email_list"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 480,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Add_actual_senders_email_address",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    parameters = []\n    data = Retrieve_the_actual_sender_of_each_email__email_list\n    for artifact in data:\n        cef_json = {\"fromEmail_actual_sender\" : data[artifact]}\n        parameters.append({\n            'artifact_id': artifact,\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_email\", callback=filter_actual_sender_email)\n    return\n\n",
                        "warn": false,
                        "z": 2967
                    },
                    {
                        "action": "url reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "limit": 1000,
                            "url": "filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL"
                        },
                        "angle": 0,
                        "app": "ThreatStream",
                        "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "approver": "",
                        "artifact_scope": "all",
                        "assets": [
                            {
                                "action": "url reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "limit": 1000,
                                    "url": "filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL"
                                },
                                "has_app": true,
                                "id": 13,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream cloud",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://122.122.122.122/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_address",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_created",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_email",
                                        "data_type": "string",
                                        "example_values": [
                                            "test@test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Protection of Private Person"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_org",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_phone",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_updated",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "url"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on URL"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    },
                                    "url": {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to investigate",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "13",
                                "type": "threat intel"
                            },
                            {
                                "action": "url reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream hybrid vm",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "limit": 1000,
                                    "url": "filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL"
                                },
                                "has_app": true,
                                "id": 15,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream hybrid vm",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://122.122.122.122/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_address",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_created",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_email",
                                        "data_type": "string",
                                        "example_values": [
                                            "test@test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Protection of Private Person"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_org",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_phone",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.registrant_updated",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "url"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on URL"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    },
                                    "url": {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to investigate",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "15",
                                "type": "threat intel"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "URL Reputation TS"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def URL_Reputation_TS(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('URL_Reputation_TS() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'URL_Reputation_TS' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.cef.requestURL', 'filtered-data:Filter_External_URL_to_artifact_record:condition_1:artifact:*.id'], scope=\"all\")\n\n    parameters = []\n    \n    # build parameters list for 'URL_Reputation_TS' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'url': filtered_artifacts_item_1[0],\n                'limit': 1000,\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"url reputation\", parameters=parameters, assets=['threatstream cloud','threatstream hybrid vm'], callback=Collect_all_results_requestURL, name=\"URL_Reputation_TS\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "URL Reputation VT",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "URL Reputation TS",
                        "delay": 0,
                        "description": "URL Reputation TS",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "beae9e79-4b96-4a10-be0c-9ef759d7f554",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 250,
                        "line_start": 226,
                        "message": "Configuring now",
                        "name": "url reputation",
                        "notes": "URL Reputation TS",
                        "number": 2,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 980,
                            "y": 740
                        },
                        "previous_function": "",
                        "previous_name": "URL_Reputation_TS",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2968
                    },
                    {
                        "action": "domain reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain",
                            "limit": 1000
                        },
                        "angle": 0,
                        "app": "ThreatStream",
                        "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "approver": "",
                        "assets": [
                            {
                                "action": "domain reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 13,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream cloud",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 6,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.Google Safe Browsing",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.URLVoid",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.VirusTotal",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.Web of Trust",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.urlscan.io",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://test.io/domain/uponvoice.net"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 2,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "IP",
                                        "column_order": 1,
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "domain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on Domain"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to investigate",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "13",
                                "type": "threat intel"
                            },
                            {
                                "action": "domain reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream hybrid vm",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 15,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream hybrid vm",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 6,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.Google Safe Browsing",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.URLVoid",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.VirusTotal",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.Web of Trust",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.urlscan.io",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://test.io/domain/uponvoice.net"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 2,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "IP",
                                        "column_order": 1,
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "domain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on Domain"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to investigate",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "15",
                                "type": "threat intel"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Domain Reputation TS"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Domain_Reputation_TS(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Domain_Reputation_TS() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Domain_Reputation_TS' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.cef.destinationDnsDomain', 'filtered-data:Filter_External_Domain_to_artifact_recor:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'Domain_Reputation_TS' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'limit': 1000,\n                'domain': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"domain reputation\", parameters=parameters, assets=['threatstream cloud','threatstream hybrid vm'], callback=Domain_Reputation_UBL, name=\"Domain_Reputation_TS\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Domain Reputation VT",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Domain Reputation TS",
                        "delay": 0,
                        "description": "Domain Reputation TS",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "505b325b-67d1-4ef6-b445-6f3358eb515a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 716,
                        "line_start": 692,
                        "message": "Configuring now",
                        "name": "domain reputation",
                        "notes": "Domain Reputation TS",
                        "number": 2,
                        "order": 20,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 980,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Domain_Reputation_TS",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2969
                    },
                    {
                        "action": "add note",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "container_id": "",
                            "content": "Prepare_Error_Note_Email:formatted_data",
                            "phase_id": "",
                            "title": "Email address cannot be retrieved"
                        },
                        "angle": 0,
                        "app": "Phantom",
                        "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "approver": "",
                        "artifact_scope": "all",
                        "assets": [
                            {
                                "action": "add note",
                                "actions": [
                                    "no op",
                                    "update list",
                                    "get action result",
                                    "create container",
                                    "import container",
                                    "export container",
                                    "deflate item",
                                    "add artifact",
                                    "find listitem",
                                    "add listitem",
                                    "find artifacts",
                                    "update artifact tags",
                                    "add note",
                                    "update artifact",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Phantom",
                                "app_version": "3.2.17",
                                "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                                "asset_name": "phantom asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "container_id": "",
                                    "content": "Prepare_Error_Note_Email:formatted_data",
                                    "phase_id": "",
                                    "title": "Email address cannot be retrieved"
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "phantom container id"
                                        ],
                                        "data_path": "action_result.parameter.container_id",
                                        "data_type": "numeric",
                                        "example_values": [
                                            35
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.content",
                                        "data_type": "string",
                                        "example_values": [
                                            "Adding a note via app action"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.phase_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.title",
                                        "data_type": "string",
                                        "example_values": [
                                            "Note test",
                                            "Testing note"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Status",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Note created"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "container_id": {
                                        "contains": [
                                            "phantom container id"
                                        ],
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "The container id (defaults to current container)",
                                        "key": "container_id",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "content": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Note content",
                                        "key": "content",
                                        "order": 1,
                                        "required": false
                                    },
                                    "phase_id": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Phase the note will be associated with",
                                        "key": "phase_id",
                                        "order": 3,
                                        "required": false
                                    },
                                    "title": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Title for the note",
                                        "key": "title",
                                        "order": 0,
                                        "required": true
                                    }
                                },
                                "product_name": "Phantom",
                                "product_vendor": "Phantom",
                                "targets": "10",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Add note Email Error"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Add_note_Email_Error(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Add_note_Email_Error() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Add_note_Email_Error' call\n    formatted_data_1 = phantom.get_format_data(name='Prepare_Error_Note_Email')\n\n    parameters = []\n    \n    # build parameters list for 'Add_note_Email_Error' call\n    parameters.append({\n        'title': \"Email address cannot be retrieved\",\n        'content': formatted_data_1,\n        'phase_id': \"\",\n        'container_id': \"\",\n    })\n\n    phantom.act(action=\"add note\", parameters=parameters, assets=['phantom asset'], name=\"Add_note_Email_Error\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Add note Email Error",
                        "delay": "0",
                        "description": "Add note Email Error",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2741e153-135b-490a-b640-2d1aefa36a30",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 1555,
                        "line_start": 1533,
                        "message": "Configuring now",
                        "name": "add note",
                        "notes": "Add note Email Error",
                        "number": 1,
                        "order": 41,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 960,
                            "y": 1880
                        },
                        "previous_function": "",
                        "previous_name": "Add_note_Email_Error",
                        "required_params": {
                            "title": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2972
                    },
                    {
                        "action": "email reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "email": "filtered-data:filter_actual_sender_email:condition_1:artifact:*.cef.fromEmail_actual_sender",
                            "limit": 1000
                        },
                        "angle": 0,
                        "app": "ThreatStream",
                        "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "approver": "",
                        "artifact_scope": "all",
                        "assets": [
                            {
                                "action": "email reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream cloud",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "email": "filtered-data:filter_actual_sender_email:condition_1:artifact:*.cef.fromEmail_actual_sender",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 16,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream cloud",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.parameter.email",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.remote_api",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "test@test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "email"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on Email"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "email": {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Email to investigate",
                                        "key": "email",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "16",
                                "type": "threat intel"
                            },
                            {
                                "action": "email reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream hybrid vm",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "email": "filtered-data:filter_actual_sender_email:condition_1:artifact:*.cef.fromEmail_actual_sender",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 15,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream hybrid vm",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.parameter.email",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.remote_api",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "test@test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "email"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on Email"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "email": {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Email to investigate",
                                        "key": "email",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "15",
                                "type": "threat intel"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Email reputation TS"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Email_reputation_TS(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Email_reputation_TS() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Email_reputation_TS' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_actual_sender_email:condition_1:artifact:*.cef.fromEmail_actual_sender', 'filtered-data:filter_actual_sender_email:condition_1:artifact:*.id'], scope=\"all\")\n\n    parameters = []\n    \n    # build parameters list for 'Email_reputation_TS' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'email': filtered_artifacts_item_1[0],\n                'limit': 1000,\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"email reputation\", parameters=parameters, assets=['threatstream cloud','threatstream hybrid vm'], callback=Collect_all_results_email, name=\"Email_reputation_TS\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Set_last_automated_action",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Email reputation TS",
                        "delay": "0",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e6d7203d-54c2-4c1f-b970-54c60e5aba16",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 997,
                        "line_start": 973,
                        "message": "Configuring now",
                        "name": "email reputation",
                        "notes": "",
                        "number": 1,
                        "order": 28,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 960,
                            "y": 1700
                        },
                        "previous_function": "",
                        "previous_name": "Email_reputation_TS",
                        "required_params": {
                            "email": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2973
                    },
                    {
                        "action": "file reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hash": "filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256",
                            "limit": 1000
                        },
                        "angle": 0,
                        "app": "ThreatStream",
                        "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "approver": "",
                        "assets": [
                            {
                                "action": "file reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 13,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream cloud",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1",
                                            "sha256",
                                            "md5",
                                            "hash"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "9bfc3649f7e6067764ce8ef18e8bfbb837bc68f2dd83e37daa05477c604492b2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.VirusTotal",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.remote_api",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "md5"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on File"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "sha1",
                                            "sha256",
                                            "md5",
                                            "hash"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hash of file",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "13",
                                "type": "threat intel"
                            },
                            {
                                "action": "file reputation",
                                "actions": [
                                    "delete actor",
                                    "delete vulnerability",
                                    "delete threat bulletin",
                                    "update actor",
                                    "create actor",
                                    "update vulnerability",
                                    "create vulnerability",
                                    "list imports",
                                    "list actors",
                                    "remove association",
                                    "add association",
                                    "delete rule",
                                    "list rules",
                                    "update rule",
                                    "create rule",
                                    "list associations",
                                    "list threat bulletins",
                                    "update threat bulletin",
                                    "create threat bulletin",
                                    "list threat models",
                                    "update import session",
                                    "list import sessions",
                                    "run query",
                                    "on poll",
                                    "get report",
                                    "get status",
                                    "detonate url",
                                    "detonate file",
                                    "get pcap",
                                    "tag observable",
                                    "import observables",
                                    "import email observable",
                                    "import file observable",
                                    "import ip observable",
                                    "import url observable",
                                    "import domain observable",
                                    "update incident",
                                    "create incident",
                                    "get incident",
                                    "delete incident",
                                    "list incidents",
                                    "list vulnerabilities",
                                    "get vulnerability",
                                    "list observables",
                                    "get observable",
                                    "whois domain",
                                    "whois ip",
                                    "url reputation",
                                    "email reputation",
                                    "ip reputation",
                                    "domain reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "ThreatStream",
                                "app_version": "3.0.3",
                                "appid": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                                "asset_name": "threatstream hybrid vm",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256",
                                    "limit": 1000
                                },
                                "has_app": true,
                                "id": 15,
                                "loaded": false,
                                "missing": false,
                                "name": "threatstream hybrid vm",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1",
                                            "sha256",
                                            "md5",
                                            "hash"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "9bfc3649f7e6067764ce8ef18e8bfbb837bc68f2dd83e37daa05477c604492b2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.limit",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Confidence",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "First Found",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.created_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.extended_source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.VirusTotal",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.external_references.remote_api",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.feed_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "column_name": "Intel ID",
                                        "column_order": 1,
                                        "contains": [
                                            "threatstream intelligence id"
                                        ],
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.import_session_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_anonymous",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_editable",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_public",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Indicator",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.itype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.detail2",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.severity",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.modified_ts",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.org",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "threatstream organization id"
                                        ],
                                        "data_path": "action_result.data.*.owner_organization_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.rdns",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.resource_uri",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.retina_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source_reported_confidence",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.org_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tags.*.source_user_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threatscore",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.threatscore",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.tlp",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.trusted_circle_ids",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "md5"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "4cf3228b-0de4-45f0-a66d-255b6ff32eaa"
                                        ]
                                    },
                                    {
                                        "column_name": "Value",
                                        "column_order": 0,
                                        "contains": [
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.value",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully retrieved information on File"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "sha1",
                                            "sha256",
                                            "md5",
                                            "hash"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hash of file",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "limit": {
                                        "data_type": "numeric",
                                        "default": 1000,
                                        "description": "Total number of observables to return",
                                        "key": "limit",
                                        "order": 1,
                                        "required": false
                                    }
                                },
                                "product_name": "ThreatStream",
                                "product_vendor": "Anomali",
                                "targets": "15",
                                "type": "threat intel"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "File reputation TS"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def File_reputation_TS(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('File_reputation_TS() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'File_reputation_TS' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:Filter_out_fileHash:condition_1:artifact:*.cef.fileHashSha256', 'filtered-data:Filter_out_fileHash:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'File_reputation_TS' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'hash': filtered_artifacts_item_1[0],\n                'limit': 1000,\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"file reputation\", parameters=parameters, assets=['threatstream cloud','threatstream hybrid vm'], callback=Collect_all_results_fileHash, name=\"File_reputation_TS\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "File reputation VT",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "File reputation TS",
                        "delay": 0,
                        "description": "File reputation TS",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6fd40547-8672-4b3c-b73e-28197a58db46",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 454,
                        "line_start": 430,
                        "message": "Configuring now",
                        "name": "file reputation",
                        "notes": "File reputation TS",
                        "number": 2,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 960,
                            "y": 1400
                        },
                        "previous_function": "",
                        "previous_name": "File_reputation_TS",
                        "required_params": {
                            "hash": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 2974
                    }
                ]
            },
            "notes": "Inputs:\nTriggered by parent playbook.\n\nInteractions:\nPhantom, VirusTotal, Splunk, Anomali ThreatStream\n\nActions:\nFile Reputation, URL Reputation, IP Reputation, Domain Reputation, Run Query, Update artifact, Add note\nArtifacts:\nP1: Perform enrichment tasks on the indicatorsFilter out deviceHostname"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.7.63984"
    },
    "create_time": "2022-06-01T10:24:58.258467+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}