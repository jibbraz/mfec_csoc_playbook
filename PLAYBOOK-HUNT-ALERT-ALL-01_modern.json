{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "The playbook automates tasks related to the triage, investigation and containment of persistent external attacks on ORG public servers by an intrusion detection/prevention system that monitors for incoming external request to publicly hosted services in ORG.",
            "edges": [
                {
                    "id": "port_0_to_port_21",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_3",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_1",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_5",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_23",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_23_to_port_7",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_8_to_port_17",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_9",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_10_to_port_1",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_15_to_port_10",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_9_to_port_18",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_18_to_port_15",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_24",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_14",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_14_to_port_10",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_12",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_12_to_port_13",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_11_to_port_1",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_13_to_port_22",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_11",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_18_to_port_19",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_19_to_port_26",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "26",
                    "targetPort": "26_in"
                },
                {
                    "id": "port_26_to_port_25",
                    "sourceNode": "26",
                    "sourcePort": "26_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_25_to_port_10",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_21_to_port_20",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_4",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_2",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_1",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "4e4609108c188762e1197cff4542d392528257ce",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": -40,
                    "y": -340
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 240,
                    "y": 2880
                },
                "10": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 6,
                        "functionName": "set_status_set_severity_6",
                        "id": "10",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "open"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 720,
                    "y": 1660
                },
                "11": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 7,
                        "functionName": "promote_to_case_7",
                        "id": "11",
                        "type": "utility",
                        "utilities": {
                            "promote": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "templates",
                                        "description": "",
                                        "label": "template",
                                        "name": "template",
                                        "placeholder": "Select a template",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "promote to case",
                                "name": "promote",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "promote": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "template": "KTB Workbook"
                            }
                        }
                    },
                    "errors": {},
                    "id": "11",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 280,
                    "y": 2400
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare for showing attacker IP",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 6,
                        "functionName": "prepare_for_showing_attacker_ip",
                        "id": "12",
                        "parameters": [
                            "public_ip_in_white_list:custom_function:NonWhitellist"
                        ],
                        "template": "Attackers IP address(es):\n%%\n  - {0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "format",
                    "warnings": {},
                    "x": 280,
                    "y": 1660
                },
                "13": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add note for showing attackers IP",
                            "customNameId": 0,
                            "delayTime": 0.0,
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_note_for_showing_attackers_ip",
                        "id": "13",
                        "parameters": {
                            "container_id": "",
                            "content": "prepare_for_showing_attacker_ip:formatted_data",
                            "phase_id": "",
                            "title": "Attackers IP address"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "action",
                    "warnings": {},
                    "x": 280,
                    "y": 1920
                },
                "14": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "public_ip_in_white_list:custom_function:NonWhitellist",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 8,
                        "functionName": "decision_8",
                        "id": "14",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "decision",
                    "warnings": {},
                    "x": 240,
                    "y": 1420
                },
                "15": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.tags",
                                        "value": "[\"indicator_malicious\",]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "decision_6",
                        "id": "15",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "decision",
                    "warnings": {},
                    "x": 320,
                    "y": 680
                },
                "16": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.external_ip",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.external_ip_malicious",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "filter_3",
                        "id": "16",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "filter",
                    "warnings": {},
                    "x": 320,
                    "y": 900
                },
                "17": {
                    "customCode": "def add_artifact_of_observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_artifact_of_observations() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'add_artifact_of_observations' call\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_to_get_observation_detail:action_result.data.*.id', 'run_query_to_get_observation_detail:action_result.data.*.external_ip'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'add_artifact_of_observations' call\n    i = 0\n    for results_item_1 in results_data_1:\n        if i > 6:\n            break\n        parameters.append({\n            'name': \"Observation artifact\",\n            'label': \"event\",\n            'cef_name': \"test\",\n            'contains': \"\",\n            'cef_value': \"\",\n            'container_id': \"\",\n            'cef_dictionary': \"{\\\"observation_id\\\": \" + results_item_1[0] + \",\" + \"\\\"external_ip\\\": \\\"\" + results_item_1[1] + \"\\\"}\",\n            'run_automation': \"false\",\n            'source_data_identifier': f\"sw-cloud-observation-id-{results_item_1[0]}\",\n            # context (artifact id) is added to associate results with the artifact\n            #'context': {'artifact_id': results_item_1[0]},\n        })\n        i += 1\n\n    phantom.act(action=\"add artifact\", parameters=parameters, assets=['phantom asset'], name=\"add_artifact_of_observations\", parent_action=action, callback=playbook_local_KTB_ENRICH_EXTERNAL_IP_1)\n\n    return",
                    "data": {
                        "action": "add artifact",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add artifact of observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_artifact_of_observations",
                        "id": "17",
                        "parameters": {
                            "cef_dictionary": "test",
                            "cef_name": "",
                            "cef_value": "",
                            "container_id": "",
                            "contains": "",
                            "label": "event",
                            "name": "User created artifact",
                            "run_automation": true,
                            "source_data_identifier": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "source_data_identifier"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "warnings": {},
                    "x": -360,
                    "y": 1680
                },
                "18": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "run_query_to_get_observation_detail:action_result.data.*.external_ip_country_code",
                                        "value": "[\"TH\",\"KH\"]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "decision_7",
                        "id": "18",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "decision",
                    "warnings": {},
                    "x": 0,
                    "y": 620
                },
                "19": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "run_query_to_get_observation_detail:action_result.data.*.external_ip_country_code",
                                        "value": "[\"TH\",\"KH\"]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "filter_4",
                        "id": "19",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "filter",
                    "warnings": {},
                    "x": 0,
                    "y": 780
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Filter SW Alert",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.alert_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "filter_sw_alert",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "warnings": {},
                    "x": -360,
                    "y": 180
                },
                "20": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "container:status",
                                        "value": "closed"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 10,
                        "functionName": "decision_10",
                        "id": "20",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "decision",
                    "warnings": {},
                    "x": -80,
                    "y": 20
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "playbook_local_KTB_Triage_Playbook_for_Generic_Label_1",
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_local_ktb_triage_playbook_for_generic_label_1",
                        "id": "21",
                        "inputs": {},
                        "playbookName": "KTB Triage Playbook for Generic Label_modern",
                        "playbookRepo": 3,
                        "playbookRepoName": "mfec_csoc_playbook",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "playbook",
                    "warnings": {},
                    "x": -80,
                    "y": -220
                },
                "22": {
                    "customCode": "def update_the_attackers_ip_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_the_attackers_ip_address() called')\n    \n    public_ip_in_white_list__nonwhitellist = json.loads(phantom.get_run_data(key='public_ip_in_white_list:NonWhitellist'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    for ip in public_ip_in_white_list__nonwhitellist:\n        success, message, num_of_matching_row = phantom.check_list(list_name=\"Attacker IP address\", value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=\"Attacker IP address\", values=[ip])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    promote_to_case_7(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update the attackers IP address",
                            "customNameId": 0,
                            "description": "Update the attackers IP address ",
                            "join": [],
                            "note": "Update the attackers IP address "
                        },
                        "functionId": 7,
                        "functionName": "update_the_attackers_ip_address",
                        "id": "22",
                        "inputParameters": [
                            "public_ip_in_white_list:custom_function:NonWhitellist"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    for ip in public_ip_in_white_list__nonwhitellist:\n        success, message, num_of_matching_row = phantom.check_list(list_name=\"Attacker IP address\", value=ip, case_sensitive=True, substring=False)\n        #phantom.debug(num_of_matching_row)\n        if num_of_matching_row == 0:\n            phantom.add_list(list_name=\"Attacker IP address\", values=[ip])\n\n",
                    "warnings": {},
                    "x": 280,
                    "y": 2160
                },
                "23": {
                    "customCode": "def prepare_a_list_of_observation_id_in_str(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('prepare_a_list_of_observation_id_in_str() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_to_get_observations:action_result.data.*.observations'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    prepare_a_list_of_observation_id_in_str__observation_list_str = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    if results_item_1_0 != []:\n        prepare_a_list_of_observation_id_in_str__observation_list_str = \", \".join(results_item_1_0[0])\n        phantom.debug(prepare_a_list_of_observation_id_in_str__observation_list_str)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='prepare_a_list_of_observation_id_in_str:observation_list_str', value=json.dumps(prepare_a_list_of_observation_id_in_str__observation_list_str))\n    format_data_to_get_observation_detail(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Prepare a list of observation id in str",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 6,
                        "functionName": "prepare_a_list_of_observation_id_in_str",
                        "id": "23",
                        "inputParameters": [
                            "run_query_to_get_observations:action_result.data.*.observations"
                        ],
                        "outputVariables": [
                            "observation_list_str"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    if results_item_1_0 != []:\n        prepare_a_list_of_observation_id_in_str__observation_list_str = \", \".join(results_item_1_0[0])\n        phantom.debug(prepare_a_list_of_observation_id_in_str__observation_list_str)\n\n",
                    "warnings": {},
                    "x": -360,
                    "y": 860
                },
                "24": {
                    "customCode": "def public_ip_in_white_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('public_ip_in_white_list() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_3:condition_1:artifact:*.cef.external_ip'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    public_ip_in_white_list__inwhitelist = None\n    public_ip_in_white_list__nonwhitellist = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    Watchlist = []\n    NonWatchlist = []\n    success, message, iplist = phantom.get_list(list_name='nocontainmentlist')\n    phantom.debug(iplist)\n    phantom.debug(filtered_artifacts_item_1_0)\n    if iplist is not None:\n        for item in filtered_artifacts_item_1_0:\n            if not any(item in ip for ip in iplist):\n                NonWatchlist.append(item)\n            else:\n                Watchlist.append(item)\n\n    public_ip_in_white_list__inwhitelist = Watchlist\n    public_ip_in_white_list__nonwhitellist = NonWatchlist\n    \n    phantom.debug(public_ip_in_white_list__nonwhitellist)\n    # Write your custom code here...\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='public_ip_in_white_list:InWhitelist', value=json.dumps(public_ip_in_white_list__inwhitelist))\n    phantom.save_run_data(key='public_ip_in_white_list:NonWhitellist', value=json.dumps(public_ip_in_white_list__nonwhitellist))\n    decision_8(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Public IP in white list",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "public_ip_in_white_list",
                        "id": "24",
                        "inputParameters": [
                            "filtered-data:filter_3:condition_1:artifact:*.cef.external_ip"
                        ],
                        "outputVariables": [
                            "InWhitelist",
                            "NonWhitellist"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "code",
                    "userCode": "    Watchlist = []\n    NonWatchlist = []\n    success, message, iplist = phantom.get_list(list_name='nocontainmentlist')\n    phantom.debug(iplist)\n    phantom.debug(filtered_artifacts_item_1_0)\n    if iplist is not None:\n        for item in filtered_artifacts_item_1_0:\n            if not any(item in ip for ip in iplist):\n                NonWatchlist.append(item)\n            else:\n                Watchlist.append(item)\n\n    public_ip_in_white_list__inwhitelist = Watchlist\n    public_ip_in_white_list__nonwhitellist = NonWatchlist\n    \n    phantom.debug(public_ip_in_white_list__nonwhitellist)\n    # Write your custom code here...\n    # Write your custom code here...\n\n",
                    "warnings": {},
                    "x": 320,
                    "y": 1120
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "Persistent External Attack Detected",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "approver": {
                            "type": "role",
                            "value": "Tier2 Analyst"
                        },
                        "functionId": 1,
                        "functionName": "persistent_external_attack_detected",
                        "id": "25",
                        "message": "{0}",
                        "parameters": [
                            "prepare_for_the_prompt:formatted_data"
                        ],
                        "responseTime": 30.0,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "",
                                "responseType": "yes/no"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {
                        "responses": [
                            {
                                "responsePrompt": "Questions cannot be empty."
                            }
                        ]
                    },
                    "id": "25",
                    "type": "prompt",
                    "warnings": {},
                    "x": 0,
                    "y": 1220
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare for the prompt",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 7,
                        "functionName": "prepare_for_the_prompt",
                        "id": "26",
                        "parameters": [
                            "filtered-data:filter_4:condition_1:run_query_to_get_observation_detail:action_result.data.*.external_ip",
                            "container:id"
                        ],
                        "template": "Here is the list of  suspected IP address(es) in Thailand / Cambodia Found:\n\n%%\n  - {0}\n%%\n\nEvent link for more detail: https://phantom.csoc.krungthai.local/mission/{1}/analyst/timeline",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "26",
                    "type": "format",
                    "warnings": {},
                    "x": 0,
                    "y": 900
                },
                "3": {
                    "customCode": "def clear_all_existing_observation_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('clear_all_existing_observation_artifacts() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_existing_observations:condition_1:artifact:*.id'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    for artifact in filtered_artifacts_item_1_0:\n        result = phantom.delete_artifact(artifact_id=artifact)\n        phantom.debug('phantom.delete_artifact results: {} '.format(result))\n        \n    ####\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Clear all existing observation artifacts",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 5,
                        "functionName": "clear_all_existing_observation_artifacts",
                        "id": "3",
                        "inputParameters": [
                            "filtered-data:filter_existing_observations:condition_1:artifact:*.id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    for artifact in filtered_artifacts_item_1_0:\n        result = phantom.delete_artifact(artifact_id=artifact)\n        phantom.debug('phantom.delete_artifact results: {} '.format(result))\n        \n    ####",
                    "warnings": {},
                    "x": -640,
                    "y": 340
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Filter Existing Observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.observation_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_existing_observations",
                        "id": "4",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "filter",
                    "warnings": {},
                    "x": -640,
                    "y": 180
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to get observations",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 4,
                        "functionName": "format_data_to_get_observations",
                        "id": "5",
                        "parameters": [
                            "filtered-data:filter_sw_alert:condition_1:artifact:*.cef.alert_id"
                        ],
                        "template": "index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:alert\"| spath id | search id={0} | spath \"observations{{}}\" | table text, \"observations{{}}\" | rename \"observations{{}}\" as observations",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "format",
                    "warnings": {},
                    "x": -360,
                    "y": 340
                },
                "6": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run Query to get observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "run_query_to_get_observations",
                        "id": "6",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_get_observations:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "action",
                    "warnings": {},
                    "x": -360,
                    "y": 580
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to get observation detail",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 5,
                        "functionName": "format_data_to_get_observation_detail",
                        "id": "7",
                        "parameters": [
                            "prepare_a_list_of_observation_id_in_str:custom_function:observation_list_str"
                        ],
                        "template": "index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:observation\"| spath id | search id IN ({0}) | table id, external_ip, external_ip_country_code",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "format",
                    "warnings": {},
                    "x": -360,
                    "y": 1180
                },
                "8": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query to get observation detail",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 5,
                        "functionName": "run_query_to_get_observation_detail",
                        "id": "8",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_get_observation_detail:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "warnings": {},
                    "x": -360,
                    "y": 1420
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "playbook_local_KTB_ENRICH_EXTERNAL_IP_1",
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_local_KTB_ENRICH_EXTERNAL_IP_1",
                        "id": "9",
                        "inputs": {},
                        "playbookName": "KTB-ENRICH-EXTERNAL-IP_modern",
                        "playbookRepo": 3,
                        "playbookRepoName": "mfec_csoc_playbook",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "playbook",
                    "warnings": {},
                    "x": 0,
                    "y": 340
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 229,
                "playbook_name": "PLAYBOOK-HUNT-ALERT-ALL-01",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "4.10.7.63984"
    },
    "create_time": "2025-03-27T15:21:05.150284+00:00",
    "draft_mode": false,
    "labels": [
        "persistent-remote-cloud"
    ],
    "tags": []
}