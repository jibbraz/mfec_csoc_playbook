{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "The playbook covers the investigation of a security alert generated by the CSOC public cloud monitoring platform, Cisco StealthWatch Cloud (Cisco Secure Cloud Analytics), which monitors VPC flow logs for KTB\u2019s services hosted on GCP.",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_9",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_23_to_port_7",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_16_to_port_3",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_11",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_11_to_port_15",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_22",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_24",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_26_to_port_16",
                    "sourceNode": "26",
                    "sourcePort": "26_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_2",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_27",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "id": "port_24_to_port_5",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_9_to_port_6",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_23",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_14_to_port_8",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_8_to_port_1",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_7_to_port_10",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_1",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_5_to_port_13",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_13_to_port_12",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_12_to_port_18",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_18_to_port_17",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_19",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_19_to_port_21",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_21_to_port_20",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_20_to_port_14",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_27_to_port_25",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_25_to_port_4",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_25_to_port_26",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "26",
                    "targetPort": "26_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_25_to_port_1",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "997f7f52b826d6da459c9bd7f2cd376619eb9ea8",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 160,
                    "y": -380
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1400,
                    "y": 2360
                },
                "10": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "add_tag_3",
                        "id": "10",
                        "type": "utility",
                        "utilities": {
                            "add_tags": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "tags",
                                        "description": "",
                                        "label": "tag",
                                        "name": "tags",
                                        "placeholder": "Enter a tag",
                                        "renderType": "combobox",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add tag",
                                "name": "add_tags",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "add_tags": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "tags": "GCP_to_contain"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 1160,
                    "y": 1280
                },
                "11": {
                    "customCode": "def prepare_a_list_of_observation_id_in_str(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('prepare_a_list_of_observation_id_in_str() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_to_get_observations:action_result.data.*.observations'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    prepare_a_list_of_observation_id_in_str__observation_list_str = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #phantom.debug(results_item_1_0[0])\n    if results_item_1_0 != []:\n        prepare_a_list_of_observation_id_in_str__observation_list_str = \", \".join(results_item_1_0[0])\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='prepare_a_list_of_observation_id_in_str:observation_list_str', value=json.dumps(prepare_a_list_of_observation_id_in_str__observation_list_str))\n    format_data_to_get_observation_detail(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Prepare a list of observation id in str",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 5,
                        "functionName": "prepare_a_list_of_observation_id_in_str",
                        "id": "11",
                        "inputParameters": [
                            "run_query_to_get_observations:action_result.data.*.observations"
                        ],
                        "outputVariables": [
                            "observation_list_str"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    #phantom.debug(results_item_1_0[0])\n    if results_item_1_0 != []:\n        prepare_a_list_of_observation_id_in_str__observation_list_str = \", \".join(results_item_1_0[0])\n\n",
                    "warnings": {},
                    "x": -160,
                    "y": 920
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare Observation Note",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 7,
                        "functionName": "prepare_observation_note",
                        "id": "12",
                        "parameters": [
                            "retrieve_first_last_observation:custom_function:number_of_observations",
                            "retrieve_first_last_observation:custom_function:first_observation_id",
                            "retrieve_first_last_observation:custom_function:first_observation_ext_ip",
                            "retrieve_first_last_observation:custom_function:last_observation_id",
                            "retrieve_first_last_observation:custom_function:last_observation_ext_ip"
                        ],
                        "template": "- Number of observation(s):  {0}\n---\n- First observation ID: {1}\n- First observation External IP address: {2}\n---\n- Last observation ID: {3}\n- Last observation External IP address: {4}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "format",
                    "warnings": {},
                    "x": 160,
                    "y": 940
                },
                "13": {
                    "customCode": "def retrieve_first_last_observation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('retrieve_first_last_observation() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_to_get_observation_detail:action_result.data.*.id', 'run_query_to_get_observation_detail:action_result.data.*.external_ip'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    retrieve_first_last_observation__number_of_observations = None\n    retrieve_first_last_observation__first_observation_id = None\n    retrieve_first_last_observation__first_observation_ext_ip = None\n    retrieve_first_last_observation__last_observation_id = None\n    retrieve_first_last_observation__last_observation_ext_ip = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    data = {}\n    observation_id_list = [int(i) for i in results_item_1_0]\n    ext_ip_list = results_item_1_1\n    \n    for i in range(len(observation_id_list)):\n        data[observation_id_list[i]] = ext_ip_list[i]\n    \n    retrieve_first_last_observation__number_of_observations = len(observation_id_list)\n    retrieve_first_last_observation__first_observation_id = min(observation_id_list)\n    retrieve_first_last_observation__first_observation_ext_ip = data[retrieve_first_last_observation__first_observation_id]\n    retrieve_first_last_observation__last_observation_id = max(observation_id_list)\n    retrieve_first_last_observation__last_observation_ext_ip = data[retrieve_first_last_observation__last_observation_id]\n    \n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='retrieve_first_last_observation:number_of_observations', value=json.dumps(retrieve_first_last_observation__number_of_observations))\n    phantom.save_run_data(key='retrieve_first_last_observation:first_observation_id', value=json.dumps(retrieve_first_last_observation__first_observation_id))\n    phantom.save_run_data(key='retrieve_first_last_observation:first_observation_ext_ip', value=json.dumps(retrieve_first_last_observation__first_observation_ext_ip))\n    phantom.save_run_data(key='retrieve_first_last_observation:last_observation_id', value=json.dumps(retrieve_first_last_observation__last_observation_id))\n    phantom.save_run_data(key='retrieve_first_last_observation:last_observation_ext_ip', value=json.dumps(retrieve_first_last_observation__last_observation_ext_ip))\n    prepare_observation_note(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Retrieve first last observation",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 7,
                        "functionName": "retrieve_first_last_observation",
                        "id": "13",
                        "inputParameters": [
                            "run_query_to_get_observation_detail:action_result.data.*.id",
                            "run_query_to_get_observation_detail:action_result.data.*.external_ip"
                        ],
                        "outputVariables": [
                            "number_of_observations",
                            "first_observation_id",
                            "first_observation_ext_ip",
                            "last_observation_id",
                            "last_observation_ext_ip"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    data = {}\n    observation_id_list = [int(i) for i in results_item_1_0]\n    ext_ip_list = results_item_1_1\n    \n    for i in range(len(observation_id_list)):\n        data[observation_id_list[i]] = ext_ip_list[i]\n    \n    retrieve_first_last_observation__number_of_observations = len(observation_id_list)\n    retrieve_first_last_observation__first_observation_id = min(observation_id_list)\n    retrieve_first_last_observation__first_observation_ext_ip = data[retrieve_first_last_observation__first_observation_id]\n    retrieve_first_last_observation__last_observation_id = max(observation_id_list)\n    retrieve_first_last_observation__last_observation_ext_ip = data[retrieve_first_last_observation__last_observation_id]\n    \n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################",
                    "warnings": {},
                    "x": 160,
                    "y": 640
                },
                "14": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.tags",
                                        "value": "[\"indicator_malicious\",]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "14",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "decision",
                    "warnings": {},
                    "x": 880,
                    "y": 240
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to get observation detail",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 5,
                        "functionName": "format_data_to_get_observation_detail",
                        "id": "15",
                        "parameters": [
                            "prepare_a_list_of_observation_id_in_str:custom_function:observation_list_str"
                        ],
                        "template": "index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:observation\"| spath id | search id IN ({0}) | table id, table external_ip",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "format",
                    "warnings": {},
                    "x": -160,
                    "y": 1220
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to get observations",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 4,
                        "functionName": "format_data_to_get_observations",
                        "id": "16",
                        "parameters": [
                            "filtered-data:filter_sw_alert:condition_1:artifact:*.cef.alert_id"
                        ],
                        "template": "index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:alert\"| spath id | search id={0} | spath \"observations{{}}\" | table text, \"observations{{}}\" | rename \"observations{{}}\" as observations",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "format",
                    "warnings": {},
                    "x": -160,
                    "y": 340
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare for retrieving GCP CE info",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 8,
                        "functionName": "prepare_for_retrieving_gcp_ce_info",
                        "id": "17",
                        "parameters": [
                            "filtered-data:filter_sw_alert:condition_1:artifact:*.cef.alert_id"
                        ],
                        "template": "index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:alert\"| spath id | search id={0} \n|  table id, \"source_info.hostnames{{}}\", \"source_info.ips{{}}\", source_info.vpc, description \n|  rename \"source_info.hostnames{{}}\" as hostnames, \"source_info.ips{{}}\" as ips, source_info.vpc as vpc",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "format",
                    "warnings": {},
                    "x": 480,
                    "y": 340
                },
                "18": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add note observation details",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "add_note_observation_details",
                        "id": "18",
                        "parameters": {
                            "container_id": "",
                            "content": "prepare_observation_note:formatted_data",
                            "phase_id": "",
                            "title": "Observation Information"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "action",
                    "warnings": {},
                    "x": 160,
                    "y": 1220
                },
                "19": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Retrieve GCP CE info",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "retrieve_gcp_ce_info",
                        "id": "19",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "prepare_for_retrieving_gcp_ce_info:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "action",
                    "warnings": {},
                    "x": 480,
                    "y": 640
                },
                "2": {
                    "customCode": "def clear_all_existing_observation_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('clear_all_existing_observation_artifacts() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(scope=\"all\", container=container, datapath=['filtered-data:filter_existing_observations:condition_1:artifact:*.id'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    # phantom.debug(artifacts)\n    for artifact in filtered_artifacts_item_1_0:\n        result = phantom.delete_artifact(artifact_id=artifact)\n        phantom.debug('phantom.delete_artifact results: {} '.format(result))\n\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Clear all existing observation artifacts",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 6,
                        "functionName": "clear_all_existing_observation_artifacts",
                        "id": "2",
                        "inputParameters": [
                            "filtered-data:filter_existing_observations:condition_1:artifact:*.id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    # phantom.debug(artifacts)\n    for artifact in filtered_artifacts_item_1_0:\n        result = phantom.delete_artifact(artifact_id=artifact)\n        phantom.debug('phantom.delete_artifact results: {} '.format(result))\n\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################\n    ###############################",
                    "warnings": {},
                    "x": -520,
                    "y": 340
                },
                "20": {
                    "data": {
                        "action": "add note",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add note GCP CE info",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "add_note_gcp_ce_info",
                        "id": "20",
                        "parameters": {
                            "container_id": "",
                            "content": "prepare_for_gcp_ce_info_note:formatted_data",
                            "phase_id": "",
                            "title": "GCP CE Information"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "title"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "action",
                    "warnings": {},
                    "x": 480,
                    "y": 1220
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "Prepare for GCP CE info Note",
                            "customNameId": 0,
                            "join": [],
                            "separator": ", "
                        },
                        "functionId": 9,
                        "functionName": "prepare_for_gcp_ce_info_note",
                        "id": "21",
                        "parameters": [
                            "retrieve_gcp_ce_info:action_result.data.*.hostnames",
                            "retrieve_gcp_ce_info:action_result.data.*.ips",
                            "retrieve_gcp_ce_info:action_result.data.*.vpc",
                            "retrieve_gcp_ce_info:action_result.data.*.description"
                        ],
                        "template": "- DNS name(s): \n%%\n  - {0}\n%%\n- Private IP address(s): \n%%\n  - {1}\n%%\n- VPC: {2}\n- Description: {3}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "format",
                    "warnings": {},
                    "x": 480,
                    "y": 940
                },
                "22": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query to get observation detail",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 5,
                        "functionName": "run_query_to_get_observation_detail",
                        "id": "22",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_get_observation_detail:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "action",
                    "warnings": {},
                    "x": -160,
                    "y": 1540
                },
                "23": {
                    "customCode": "def check_if_it_is_in_whitelist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_it_is_in_whitelist() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.external_ip', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    check_if_it_is_in_whitelist__inwhitelist = None\n    check_if_it_is_in_whitelist__notinwhitelist = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    # Write your custom code here...\n    Inwhitelist = []\n    NotInwhitelist = []\n    success, message, devicelist = phantom.get_list(list_name='GCP_CE_no_containment_list')\n    if devicelist is not None:        \n        for item in container_item_0:\n            if devicelist is not None:\n                if not any(item in device for device in devicelist):\n                     NotInwhitelist.append(item)\n                else:\n                     Inwhitelist.append(item)\n                \n    check_if_it_is_in_whitelist__inwhitelist = Inwhitelist\n    check_if_it_is_in_whitelist__notinwhitelist = NotInwhitelist\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_it_is_in_whitelist:Inwhitelist', value=json.dumps(check_if_it_is_in_whitelist__inwhitelist))\n    phantom.save_run_data(key='check_if_it_is_in_whitelist:NotInwhitelist', value=json.dumps(check_if_it_is_in_whitelist__notinwhitelist))\n    decision_2(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if it is in whitelist",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "check_if_it_is_in_whitelist",
                        "id": "23",
                        "inputParameters": [
                            "artifact:*.cef.external_ip"
                        ],
                        "outputVariables": [
                            "Inwhitelist",
                            "NotInwhitelist"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "code",
                    "userCode": "    # Write your custom code here...\n    Inwhitelist = []\n    NotInwhitelist = []\n    success, message, devicelist = phantom.get_list(list_name='GCP_CE_no_containment_list')\n    if devicelist is not None:        \n        for item in container_item_0:\n            if devicelist is not None:\n                if not any(item in device for device in devicelist):\n                     NotInwhitelist.append(item)\n                else:\n                     Inwhitelist.append(item)\n                \n    check_if_it_is_in_whitelist__inwhitelist = Inwhitelist\n    check_if_it_is_in_whitelist__notinwhitelist = NotInwhitelist\n    # Write your custom code here...\n\n",
                    "warnings": {},
                    "x": 880,
                    "y": 980
                },
                "24": {
                    "customCode": "def add_artifact_of_observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_artifact_of_observations() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'add_artifact_of_observations' call\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_to_get_observation_detail:action_result.data.*.id', 'run_query_to_get_observation_detail:action_result.data.*.external_ip'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'add_artifact_of_observations' call\n    i = 0\n    for results_item_1 in results_data_1:\n        if i > 6:\n            break\n        parameters.append({\n            'name': \"Observation artifact\",\n            'label': \"event\",\n            'cef_name': \"test\",\n            'contains': \"\",\n            'cef_value': \"\",\n            'container_id': \"\",\n            'cef_dictionary': \"{\\\"observation_id\\\": \" + results_item_1[0] + \",\" + \"\\\"external_ip\\\": \\\"\" + results_item_1[1] + \"\\\"}\",\n            'run_automation': \"false\",\n            'source_data_identifier': f\"sw-cloud-observation-id-{results_item_1[0]}\",\n            # context (artifact id) is added to associate results with the artifact\n            #'context': {'artifact_id': results_item_1[0]},\n        })\n        i += 1\n\n    phantom.act(action=\"add artifact\", parameters=parameters, assets=['phantom asset'], name=\"add_artifact_of_observations\", parent_action=action, callback=playbook_local_KTB_ENRICH_EXTERNAL_IP_2)\n\n    return",
                    "data": {
                        "action": "add artifact",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Add artifact of observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_artifact_of_observations",
                        "id": "24",
                        "parameters": {
                            "cef_dictionary": "",
                            "cef_name": "test",
                            "cef_value": "run_query_to_get_observation_detail:action_result.data.*.id",
                            "container_id": "",
                            "contains": "",
                            "label": "event",
                            "name": "User created artifact",
                            "run_automation": true,
                            "source_data_identifier": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "source_data_identifier"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "action",
                    "warnings": {},
                    "x": -160,
                    "y": 1860
                },
                "25": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "container:status",
                                        "value": "closed"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "decision_3",
                        "id": "25",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "decision",
                    "warnings": {},
                    "x": 120,
                    "y": 20
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "Filter SW Alert",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.alert_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_sw_alert",
                        "id": "26",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "26",
                    "type": "filter",
                    "warnings": {},
                    "x": -160,
                    "y": 160
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "playbook_local_KTB_Triage_Playbook_for_Attivo_Label_1",
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_local_KTB_Triage_Playbook_for_Attivo_Label_1",
                        "id": "27",
                        "inputs": {},
                        "playbookName": "KTB Triage Playbook for Generic Label_modern",
                        "playbookRepo": 3,
                        "playbookRepoName": "mfec_csoc_playbook",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "playbook",
                    "warnings": {},
                    "x": 120,
                    "y": -240
                },
                "3": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run Query to get observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "run_query_to_get_observations",
                        "id": "3",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_get_observations:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "warnings": {},
                    "x": -160,
                    "y": 640
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Filter Existing Observations",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.observation_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "filter_existing_observations",
                        "id": "4",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "filter",
                    "warnings": {},
                    "x": -520,
                    "y": 160
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "playbook_local_KTB_ENRICH_EXTERNAL_IP_2",
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "playbook_local_KTB_ENRICH_EXTERNAL_IP_2",
                        "id": "5",
                        "inputs": {},
                        "playbookName": "KTB-ENRICH-EXTERNAL-IP_modern",
                        "playbookRepo": 3,
                        "playbookRepoName": "mfec_csoc_playbook",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "playbook",
                    "warnings": {},
                    "x": 160,
                    "y": 340
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.external_ip_malicious",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "filter_4",
                        "id": "6",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "filter",
                    "warnings": {},
                    "x": 880,
                    "y": 740
                },
                "7": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "check_if_it_is_in_whitelist:custom_function:NotInwhitelist",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "7",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "decision",
                    "warnings": {},
                    "x": 880,
                    "y": 1240
                },
                "8": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "set_severity_set_status_2",
                        "id": "8",
                        "type": "utility",
                        "utilities": {
                            "set_severity": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableSeverity",
                                        "description": "",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Select severity",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    }
                                ],
                                "label": "set severity",
                                "name": "set_severity",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "set_severity": {
                                "_internal": [
                                    "container"
                                ],
                                "severity": "low"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "open"
                            }
                        }
                    },
                    "errors": {},
                    "id": "8",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 1200,
                    "y": 420
                },
                "9": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "promote_to_case_set_status_1",
                        "id": "9",
                        "type": "utility",
                        "utilities": {
                            "promote": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "templates",
                                        "description": "",
                                        "label": "template",
                                        "name": "template",
                                        "placeholder": "Select a template",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "promote to case",
                                "name": "promote",
                                "refreshNotableData": true
                            },
                            "set_status": {
                                "description": "",
                                "fields": [
                                    {
                                        "choices": "notableStatus",
                                        "description": "",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "Select status",
                                        "renderType": "dropdown",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "set status",
                                "name": "set_status",
                                "refreshNotableData": true
                            }
                        },
                        "values": {
                            "promote": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "template": "KTB Workbook"
                            },
                            "set_status": {
                                "_internal": [
                                    "container",
                                    "trace"
                                ],
                                "status": "in progress"
                            }
                        }
                    },
                    "errors": {},
                    "id": "9",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 880,
                    "y": 420
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 231,
                "playbook_name": "PLAYBOOK-INVESTIGATE-ALERT-CLOUD-01",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "4.10.7.63984"
    },
    "create_time": "2025-03-27T15:21:05.151714+00:00",
    "draft_mode": false,
    "labels": [
        "sw_cloud_inv"
    ],
    "tags": []
}