"""
USE CASE: This playbook will perform triage tasks, identify false positive; else perform enrichment,
containment and notification
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'playbook_local_KTB_Triage_Playbook_for_inbound_1' block
    playbook_local_KTB_Triage_Playbook_for_inbound_1(container=container)

    return

"""
If similar
events found
in last 7 days
and are false
positive
"""
def If_similar_events_found_in_last_7_days_a(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('If_similar_events_found_in_last_7_days_a() called')
    
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            [status_param, "==", "closed"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2
    Set_status_to_In_progress(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

"""
If
event is
generated by
AMP /
Kaspersky /
McAfee
"""
def If_event_is_generated_by_AMP_Kaspersky(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('If_event_is_generated_by_AMP_Kaspersky() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        Format_data_ro_query(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    return

"""
Call Enrich Playbook
"""
def Call_Enrich_Playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Call_Enrich_Playbook() called')
    
    # call playbook "local/KTB - Enrich Playbook", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB - Enrich Playbook", container=container, name="Call_Enrich_Playbook", callback=IOC_is_suspicious)

    return

"""
IOC is
suspicious
"""
def IOC_is_suspicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('IOC_is_suspicious() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["Query_stats_total_count_for_last_1hour:action_result.data.*.count", ">=", 1000],
            ["artifact:*.cef.sourceAddres_malicious", "==", True],
        ],
        logical_operator='and')

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2

    return

"""
Call Contain
Playbook
"""
def Call_Contain_Playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Call_Contain_Playbook() called')
    
    # call playbook "local/KTB - UC1 Malware - Contain Playbook_with _Internal-Contain", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB - UC1 Malware - Contain Playbook_with _Internal-Contain", container=container, name="Call_Contain_Playbook")

    return

def Set_status_to_In_progress(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Set_status_to_In_progress() called')

    phantom.set_status(container=container, status="In progress")
    promote_to_case_6(container=container)

    return

def promote_to_case_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('promote_to_case_6() called')

    phantom.promote(container=container, template="KTB Workbook")
    If_event_is_generated_by_AMP_Kaspersky(container=container)
    playbook_local_KTB_UC_SEND_EMAIL_CASE_PROMOTION_1(container=container)

    return

def playbook_local_KTB_UC_SEND_EMAIL_CASE_PROMOTION_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_KTB_UC_SEND_EMAIL_CASE_PROMOTION_1() called')
    
    # call playbook "local/KTB UC SEND EMAIL CASE PROMOTION", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB UC SEND EMAIL CASE PROMOTION", container=container)

    return

def playbook_local_KTB_Triage_Playbook_for_inbound_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_KTB_Triage_Playbook_for_inbound_1() called')
    
    # call playbook "local/KTB -Triage Playbook for inbound", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB -Triage Playbook for inbound", container=container, name="playbook_local_KTB_Triage_Playbook_for_inbound_1", callback=If_similar_events_found_in_last_7_days_a)

    return

def Format_data_ro_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Format_data_ro_query() called')
    
    template = """summariesonly=true allow_old_summaries=true max(_time) AS lastTime count FROM datamodel=Network_Traffic where (sourcetype=fortigate_traffic OR sourcetype=pan:traffic) AND All_Traffic.src_ip={0} AND (earliest=-4h@h latest=now) by  _time span=1h sourcetype All_Traffic.action 
| rename \"All_Traffic.*\" as \"*\""""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.sourceAddress",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Format_data_ro_query", separator=", ")

    Query_stats_by_sourcetype(container=container)

    return

def Query_stats_by_sourcetype(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Query_stats_by_sourcetype() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Query_stats_by_sourcetype' call
    formatted_data_1 = phantom.get_format_data(name='Format_data_ro_query')

    parameters = []
    
    # build parameters list for 'Query_stats_by_sourcetype' call
    parameters.append({
        'query': formatted_data_1,
        'command': "tstats",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=Format_data_to_query_total_count, name="Query_stats_by_sourcetype")

    return

def Format_data_to_query_total_count(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Format_data_to_query_total_count() called')
    
    template = """summariesonly=true allow_old_summaries=true count FROM datamodel=Network_Traffic where (sourcetype=fortigate_traffic OR sourcetype=pan:traffic) AND All_Traffic.src_ip={0} earliest=-4h@h latest=now
| rename \"All_Traffic.*\" as \"*\""""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.sourceAddress",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Format_data_to_query_total_count", separator=", ")

    Query_stats_total_count_for_last_1hour(container=container)

    return

def Query_stats_total_count_for_last_1hour(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Query_stats_total_count_for_last_1hour() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Query_stats_total_count_for_last_1hour' call
    formatted_data_1 = phantom.get_format_data(name='Format_data_to_query_total_count')

    parameters = []
    
    # build parameters list for 'Query_stats_total_count_for_last_1hour' call
    parameters.append({
        'query': formatted_data_1,
        'command': "tstats",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=Tstats_query_total_numver, name="Query_stats_total_count_for_last_1hour")

    return

def Tstats_query_total_numver(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Tstats_query_total_numver() called')

    results_data_1 = phantom.collect2(container=container, datapath=['Query_stats_total_count_for_last_1hour:action_result.data.*.count'], action_results=results)

    results_item_1_0 = [item[0] for item in results_data_1]

    note_title = "Total count of  tstats run query"
    note_content = results_item_1_0
    note_format = "markdown"
    phantom.add_note(container=container, note_type="general", title=note_title, content=note_content, note_format=note_format)
    Call_Enrich_Playbook(container=container)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return