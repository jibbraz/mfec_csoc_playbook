"""
The playbook covers the investigation of a security alert generated by the CSOC public cloud monitoring platform, Cisco StealthWatch Cloud (Cisco Secure Cloud Analytics), which monitors VPC flow logs for KTBâ€™s services hosted on GCP.
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'playbook_local_KTB_Triage_Playbook_for_Generic_Label_1' block
    playbook_local_KTB_Triage_Playbook_for_Generic_Label_1(container=container)

    return

def playbook_local_KTB_Triage_Playbook_for_Generic_Label_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_KTB_Triage_Playbook_for_Generic_Label_1() called')
    
    # call playbook "local/KTB Triage Playbook for Generic Label", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB Triage Playbook for Generic Label", container=container, name="playbook_local_KTB_Triage_Playbook_for_Generic_Label_1", callback=decision_3)

    return

def playbook_local_KTB_ENRICH_EXTERNAL_IP_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_KTB_ENRICH_EXTERNAL_IP_2() called')
    
    # call playbook "local/KTB-ENRICH-EXTERNAL-IP", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/KTB-ENRICH-EXTERNAL-IP", container=container, name="playbook_local_KTB_ENRICH_EXTERNAL_IP_2", callback=Retrieve_first_last_observation)

    return

def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_1() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.tags", "in", ["indicator_malicious",]],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        promote_to_case_set_status_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    set_severity_set_status_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_2() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["Check_if_it_is_in_whitelist:custom_function:NotInwhitelist", "==", []],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        return

    # call connected blocks for 'else' condition 2
    add_tag_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def promote_to_case_set_status_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('promote_to_case_set_status_1() called')

    phantom.promote(container=container, template="KTB Workbook")

    phantom.set_status(container=container, status="In progress")
    filter_4(container=container)

    return

def Check_if_it_is_in_whitelist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Check_if_it_is_in_whitelist() called')
    
    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.external_ip', 'artifact:*.id'])
    container_item_0 = [item[0] for item in container_data]

    Check_if_it_is_in_whitelist__Inwhitelist = None
    Check_if_it_is_in_whitelist__NotInwhitelist = None

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    Inwhitelist = []
    NotInwhitelist = []
    success, message, devicelist = phantom.get_list(list_name='GCP_CE_no_containment_list')
    if devicelist is not None:        
        for item in container_item_0:
            if devicelist is not None:
                if not any(item in device for device in devicelist):
                     NotInwhitelist.append(item)
                else:
                     Inwhitelist.append(item)
                
    Check_if_it_is_in_whitelist__Inwhitelist = Inwhitelist
    Check_if_it_is_in_whitelist__NotInwhitelist = NotInwhitelist
    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key='Check_if_it_is_in_whitelist:Inwhitelist', value=json.dumps(Check_if_it_is_in_whitelist__Inwhitelist))
    phantom.save_run_data(key='Check_if_it_is_in_whitelist:NotInwhitelist', value=json.dumps(Check_if_it_is_in_whitelist__NotInwhitelist))
    decision_2(container=container)

    return

def Format_data_to_get_observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Format_data_to_get_observations() called')
    
    template = """index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:alert\"| spath id | search id={0} | spath \"observations{{}}\" | table text, \"observations{{}}\" | rename \"observations{{}}\" as observations"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:Filter_SW_Alert:condition_1:artifact:*.cef.alert_id",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Format_data_to_get_observations", separator=", ")

    Run_Query_to_get_observations(container=container)

    return

def Run_Query_to_get_observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Run_Query_to_get_observations() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Run_Query_to_get_observations' call
    formatted_data_1 = phantom.get_format_data(name='Format_data_to_get_observations')

    parameters = []
    
    # build parameters list for 'Run_Query_to_get_observations' call
    parameters.append({
        'query': formatted_data_1,
        'command': "search",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=Prepare_a_list_of_observation_id_in_str, name="Run_Query_to_get_observations")

    return

def Prepare_a_list_of_observation_id_in_str(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Prepare_a_list_of_observation_id_in_str() called')
    
    results_data_1 = phantom.collect2(container=container, datapath=['Run_Query_to_get_observations:action_result.data.*.observations'], action_results=results)
    results_item_1_0 = [item[0] for item in results_data_1]

    Prepare_a_list_of_observation_id_in_str__observation_list_str = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    #phantom.debug(results_item_1_0[0])
    if results_item_1_0 != []:
        Prepare_a_list_of_observation_id_in_str__observation_list_str = ", ".join(results_item_1_0[0])

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key='Prepare_a_list_of_observation_id_in_str:observation_list_str', value=json.dumps(Prepare_a_list_of_observation_id_in_str__observation_list_str))
    Format_data_to_get_observation_detail(container=container)

    return

def Format_data_to_get_observation_detail(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Format_data_to_get_observation_detail() called')
    
    template = """index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:observation\"| spath id | search id IN ({0}) | table id, table external_ip"""

    # parameter list for template variable replacement
    parameters = [
        "Prepare_a_list_of_observation_id_in_str:custom_function:observation_list_str",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Format_data_to_get_observation_detail", separator=", ")

    Run_query_to_get_observation_detail(container=container)

    return

def Run_query_to_get_observation_detail(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Run_query_to_get_observation_detail() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Run_query_to_get_observation_detail' call
    formatted_data_1 = phantom.get_format_data(name='Format_data_to_get_observation_detail')

    parameters = []
    
    # build parameters list for 'Run_query_to_get_observation_detail' call
    parameters.append({
        'query': formatted_data_1,
        'command': "search",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=Add_artifact_of_observations, name="Run_query_to_get_observation_detail")

    return

def Add_artifact_of_observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Add_artifact_of_observations() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Add_artifact_of_observations' call
    results_data_1 = phantom.collect2(container=container, datapath=['Run_query_to_get_observation_detail:action_result.data.*.id', 'Run_query_to_get_observation_detail:action_result.data.*.external_ip'], action_results=results)

    parameters = []
    
    # build parameters list for 'Add_artifact_of_observations' call
    i = 0
    for results_item_1 in results_data_1:
        if i > 6:
            break
        parameters.append({
            'name': "Observation artifact",
            'label': "event",
            'cef_name': "test",
            'contains': "",
            'cef_value': "",
            'container_id': "",
            'cef_dictionary': "{\"observation_id\": " + results_item_1[0] + "," + "\"external_ip\": \"" + results_item_1[1] + "\"}",
            'run_automation': "false",
            'source_data_identifier': f"sw-cloud-observation-id-{results_item_1[0]}",
            # context (artifact id) is added to associate results with the artifact
            #'context': {'artifact_id': results_item_1[0]},
        })
        i += 1

    phantom.act(action="add artifact", parameters=parameters, assets=['phantom asset'], name="Add_artifact_of_observations", parent_action=action, callback=playbook_local_KTB_ENRICH_EXTERNAL_IP_2)

    return

def Filter_SW_Alert(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Filter_SW_Alert() called')

    # collect filtered artifact ids for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.alert_id", "!=", ""],
        ],
        name="Filter_SW_Alert:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        Format_data_to_get_observations(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return

def Clear_all_existing_observation_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Clear_all_existing_observation_artifacts() called')
    
    filtered_artifacts_data_1 = phantom.collect2(scope="all", container=container, datapath=['filtered-data:Filter_Existing_Observations:condition_1:artifact:*.id'])
    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    # phantom.debug(artifacts)
    for artifact in filtered_artifacts_item_1_0:
        result = phantom.delete_artifact(artifact_id=artifact)
        phantom.debug('phantom.delete_artifact results: {} '.format(result))

    ###############################
    ###############################
    ###############################
    ###############################
    ###############################
    ###############################
    ###############################
    ################################################################################
    ## Custom Code End
    ################################################################################

    return

def Filter_Existing_Observations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Filter_Existing_Observations() called')

    # collect filtered artifact ids for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.observation_id", "!=", ""],
        ],
        name="Filter_Existing_Observations:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        Clear_all_existing_observation_artifacts(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return

def filter_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('filter_4() called')

    # collect filtered artifact ids for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.external_ip_malicious", "==", True],
        ],
        name="filter_4:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        Check_if_it_is_in_whitelist(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return

def set_severity_set_status_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('set_severity_set_status_2() called')

    phantom.set_severity(container=container, severity="Low")

    phantom.set_status(container=container, status="Open")

    return

def add_tag_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_tag_3() called')

    phantom.add_tags(container=container, tags="GCP_to_contain")

    return

def Retrieve_first_last_observation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Retrieve_first_last_observation() called')
    
    results_data_1 = phantom.collect2(container=container, datapath=['Run_query_to_get_observation_detail:action_result.data.*.id', 'Run_query_to_get_observation_detail:action_result.data.*.external_ip'], action_results=results)
    results_item_1_0 = [item[0] for item in results_data_1]
    results_item_1_1 = [item[1] for item in results_data_1]

    Retrieve_first_last_observation__number_of_observations = None
    Retrieve_first_last_observation__first_observation_id = None
    Retrieve_first_last_observation__first_observation_ext_ip = None
    Retrieve_first_last_observation__last_observation_id = None
    Retrieve_first_last_observation__last_observation_ext_ip = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    data = {}
    observation_id_list = [int(i) for i in results_item_1_0]
    ext_ip_list = results_item_1_1
    
    for i in range(len(observation_id_list)):
        data[observation_id_list[i]] = ext_ip_list[i]
    
    Retrieve_first_last_observation__number_of_observations = len(observation_id_list)
    Retrieve_first_last_observation__first_observation_id = min(observation_id_list)
    Retrieve_first_last_observation__first_observation_ext_ip = data[Retrieve_first_last_observation__first_observation_id]
    Retrieve_first_last_observation__last_observation_id = max(observation_id_list)
    Retrieve_first_last_observation__last_observation_ext_ip = data[Retrieve_first_last_observation__last_observation_id]
    
    ###############################
    ###############################
    ###############################
    ###############################
    ###############################
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key='Retrieve_first_last_observation:number_of_observations', value=json.dumps(Retrieve_first_last_observation__number_of_observations))
    phantom.save_run_data(key='Retrieve_first_last_observation:first_observation_id', value=json.dumps(Retrieve_first_last_observation__first_observation_id))
    phantom.save_run_data(key='Retrieve_first_last_observation:first_observation_ext_ip', value=json.dumps(Retrieve_first_last_observation__first_observation_ext_ip))
    phantom.save_run_data(key='Retrieve_first_last_observation:last_observation_id', value=json.dumps(Retrieve_first_last_observation__last_observation_id))
    phantom.save_run_data(key='Retrieve_first_last_observation:last_observation_ext_ip', value=json.dumps(Retrieve_first_last_observation__last_observation_ext_ip))
    Prepare_Observation_Note(container=container)

    return

def Prepare_Observation_Note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Prepare_Observation_Note() called')
    
    template = """- Number of observation(s):  {0}
---
- First observation ID: {1}
- First observation External IP address: {2}
---
- Last observation ID: {3}
- Last observation External IP address: {4}"""

    # parameter list for template variable replacement
    parameters = [
        "Retrieve_first_last_observation:custom_function:number_of_observations",
        "Retrieve_first_last_observation:custom_function:first_observation_id",
        "Retrieve_first_last_observation:custom_function:first_observation_ext_ip",
        "Retrieve_first_last_observation:custom_function:last_observation_id",
        "Retrieve_first_last_observation:custom_function:last_observation_ext_ip",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Prepare_Observation_Note", separator=", ")

    Add_note_observation_details(container=container)

    return

def Add_note_observation_details(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Add_note_observation_details() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Add_note_observation_details' call
    formatted_data_1 = phantom.get_format_data(name='Prepare_Observation_Note')

    parameters = []
    
    # build parameters list for 'Add_note_observation_details' call
    parameters.append({
        'title': "Observation Information",
        'content': formatted_data_1,
        'phase_id': "",
        'container_id': "",
    })

    phantom.act(action="add note", parameters=parameters, assets=['phantom asset'], callback=Prepare_for_retrieving_GCP_CE_info, name="Add_note_observation_details")

    return

def Prepare_for_retrieving_GCP_CE_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Prepare_for_retrieving_GCP_CE_info() called')
    
    template = """index=ktb_csoc_default sourcetype=\"cisco:stealthwatchcloud:alert\"| spath id | search id={0} 
|  table id, \"source_info.hostnames{{}}\", \"source_info.ips{{}}\", source_info.vpc, description 
|  rename \"source_info.hostnames{{}}\" as hostnames, \"source_info.ips{{}}\" as ips, source_info.vpc as vpc"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:Filter_SW_Alert:condition_1:artifact:*.cef.alert_id",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Prepare_for_retrieving_GCP_CE_info", separator=", ")

    Retrieve_GCP_CE_info(container=container)

    return

def Retrieve_GCP_CE_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Retrieve_GCP_CE_info() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Retrieve_GCP_CE_info' call
    formatted_data_1 = phantom.get_format_data(name='Prepare_for_retrieving_GCP_CE_info')

    parameters = []
    
    # build parameters list for 'Retrieve_GCP_CE_info' call
    parameters.append({
        'query': formatted_data_1,
        'command': "search",
        'display': "",
        'parse_only': "",
    })

    phantom.act(action="run query", parameters=parameters, assets=['splunk es asset'], callback=Prepare_for_GCP_CE_info_Note, name="Retrieve_GCP_CE_info")

    return

def Prepare_for_GCP_CE_info_Note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Prepare_for_GCP_CE_info_Note() called')
    
    template = """- DNS name(s): 
%%
  - {0}
%%
- Private IP address(s): 
%%
  - {1}
%%
- VPC: {2}
- Description: {3}"""

    # parameter list for template variable replacement
    parameters = [
        "Retrieve_GCP_CE_info:action_result.data.*.hostnames",
        "Retrieve_GCP_CE_info:action_result.data.*.ips",
        "Retrieve_GCP_CE_info:action_result.data.*.vpc",
        "Retrieve_GCP_CE_info:action_result.data.*.description",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Prepare_for_GCP_CE_info_Note", separator=", ")

    Add_note_GCP_CE_info(container=container)

    return

def Add_note_GCP_CE_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Add_note_GCP_CE_info() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Add_note_GCP_CE_info' call
    formatted_data_1 = phantom.get_format_data(name='Prepare_for_GCP_CE_info_Note')

    parameters = []
    
    # build parameters list for 'Add_note_GCP_CE_info' call
    parameters.append({
        'title': "GCP CE Information",
        'content': formatted_data_1,
        'phase_id': "",
        'container_id': "",
    })

    phantom.act(action="add note", parameters=parameters, assets=['phantom asset'], callback=decision_1, name="Add_note_GCP_CE_info")

    return

def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_3() called')
    
    status_param = container.get('status', None)

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            [status_param, "!=", "closed"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        Filter_Existing_Observations(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        Filter_SW_Alert(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return