{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "",
            "joint": {
                "cells": [
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3d05a3b9-831b-4fad-b2dc-81e02c3ed933",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8fb04e4f-65c2-4d05-adbe-9b8e28a9d6dc",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6ea61f98-6262-4dec-b678-7245a6d964e1",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 113
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9098b651-eb41-487d-a3ac-49a7c461bc39",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6ea61f98-6262-4dec-b678-7245a6d964e1",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 195
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bea4df05-682a-47d8-8117-c92e36e3a884",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a76dada7-2336-48bc-93d1-3d69920a5f97",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "dbe31fc7-cc3d-4fe5-b241-38e187a80d5f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 329
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "84ffd55d-a27c-485a-9133-f80422e43dfe",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "dbe31fc7-cc3d-4fe5-b241-38e187a80d5f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1a48bc93-3b09-44c9-820d-9dd5f747a1f1",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 357
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d7a35403-eec4-42fa-a2b9-ad10bb9b3106",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1a48bc93-3b09-44c9-820d-9dd5f747a1f1",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c72cece3-522f-4989-ad41-2d4a349e6451",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 359
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7ae65412-252c-45a9-9c61-711ac139e9a2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6ea61f98-6262-4dec-b678-7245a6d964e1",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "51497a66-d927-4776-aac6-e53260c3d403",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 362
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0557314c-b4e0-4a83-96fb-6ed0f1d3b66b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "51497a66-d927-4776-aac6-e53260c3d403",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8dd6efb-543b-4a6f-9ed3-765c79c18b1a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 365
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a5e0f26b-608e-44e2-abaf-e9b3eb10546c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8dd6efb-543b-4a6f-9ed3-765c79c18b1a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "80654ae4-1834-44ce-988e-dc0497ad87e3",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 379
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4da98922-9ba9-4c29-86b9-6be004402479",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "80654ae4-1834-44ce-988e-dc0497ad87e3",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "61a02671-3d48-4a34-a795-7fcacb60358f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 382
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76de28dc-54c1-40c6-a58f-8c335114337a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "61a02671-3d48-4a34-a795-7fcacb60358f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "164bb59d-7627-4947-9040-b939e13c33a9",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 454
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "682f7abc-3e0d-425d-a85a-c4d9b6fde986",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "edf53aac-8b98-459f-b594-a3eedd726de4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cef7d5af-c32d-454d-9fcf-6cf148e95c06",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 479
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eb77bc5e-2f0a-424e-807e-f9abfb34c2cf",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cef7d5af-c32d-454d-9fcf-6cf148e95c06",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 483
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data, get device info, run query 1, run query against 3 ad",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 584,
                        "line_start": 571,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 21,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1720,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 485
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f29404a1-bb6c-4d4a-8a51-4c42a511c605",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "639a8fb1-26da-47f1-9c78-1b03bdbc5a67",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 496
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f538bc07-788a-49fe-b6c4-7876ba90f31e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c72cece3-522f-4989-ad41-2d4a349e6451",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 501
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8d920312-220c-4a73-a596-e65e92b86b5f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ef19afa9-41e5-4451-bb1c-d9f89ec696bc",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "13498753-5acd-4266-9baa-9d39f8f4e1a9",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 552
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3b74503b-175c-45da-98ec-5d0cb01e722f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "13498753-5acd-4266-9baa-9d39f8f4e1a9",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "639a8fb1-26da-47f1-9c78-1b03bdbc5a67",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 559
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "288bc4ad-3c2d-4d6d-a65f-8f4285f7e191",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "164bb59d-7627-4947-9040-b939e13c33a9",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ef19afa9-41e5-4451-bb1c-d9f89ec696bc",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 562
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0ddcaac9-7d41-4ac9-9c18-573c9a3a68ec",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "164bb59d-7627-4947-9040-b939e13c33a9",
                            "port": "out-3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a76dada7-2336-48bc-93d1-3d69920a5f97",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 566
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "49094f24-f6da-47f6-8086-a3b5c07f243b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "164bb59d-7627-4947-9040-b939e13c33a9",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "edf53aac-8b98-459f-b594-a3eedd726de4",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 568
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_2() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.sourceAddress\", \"!=\", \"\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        format_amp_query_ip(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6ea61f98-6262-4dec-b678-7245a6d964e1",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 37,
                        "line_start": 18,
                        "name": "decision",
                        "notes": "",
                        "number": 2,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "decision_2",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 569
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9fa301e6-9ce5-4ecd-82eb-d3f515e883ad",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8fb04e4f-65c2-4d05-adbe-9b8e28a9d6dc",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9c8339db-5891-401c-8b4d-367f2984c0d1",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 571
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6ab4c1c0-f9cb-4533-be4d-c8369e42d256",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d7a1ce12-60b8-48c6-8a38-ffe0fc0db557",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "db229a65-ba50-456b-9c28-7738ff838f43",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 582
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dbf34dfb-975f-492e-be0c-71a656863194",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9c8339db-5891-401c-8b4d-367f2984c0d1",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2982a163-6c32-4920-8916-e55944a6cfd2",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 607
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "fa105169-1081-4055-8e0d-450a5cb22b71",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2982a163-6c32-4920-8916-e55944a6cfd2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d7a1ce12-60b8-48c6-8a38-ffe0fc0db557",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 608
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "efb46b58-291c-4e6d-b2bc-197638d79705",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "db229a65-ba50-456b-9c28-7738ff838f43",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "33988c07-ace2-4603-9ab7-ee6836af9daa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 617
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add note",
                        "attrs": {
                            ".api": {
                                "text": "add note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def add_note_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_2() called')\n\n    formatted_data_1 = phantom.get_format_data(name='format_multiple_active_guid_found')\n\n    note_title = \"update connector_guid found\"\n    note_content = formatted_data_1\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addNoteContent": "format_multiple_active_guid_found:formatted_data",
                                "addNoteNoteFormat": "markdown",
                                "addNoteTitle": "update connector_guid found",
                                "key": "add-note"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cef7d5af-c32d-454d-9fcf-6cf148e95c06",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 373,
                        "line_start": 361,
                        "message": "Configuring now",
                        "name": "add note",
                        "notes": "",
                        "number": 2,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 680
                        },
                        "previous_function": "",
                        "previous_name": "add_note_2",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 628
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 3
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_3() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"run_query_1:action_result.summary.total_events\", \"==\", 1],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        update_artifact_macaddr_from_ise(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run query 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1a48bc93-3b09-44c9-820d-9dd5f747a1f1",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 214,
                        "line_start": 196,
                        "name": "decision",
                        "notes": "",
                        "number": 3,
                        "order": 8,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "run_query_1:action_result.summary.total_events",
                                        "value": "1"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1000,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "decision_3",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 631
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format ISE query"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_ISE_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_ISE_query() called')\n    \n    template = \"\"\"index=ktb_mgmt_default earliest=-15m@m latest=now sourcetype=\\\"cisco:ise:syslog\\\"  Framed_IP_Address={0} |  dedup Framed_IP_Address\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.sourceAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_ISE_query\", separator=\", \")\n\n    run_query_1(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format ISE query",
                        "delimiter": ", ",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a76dada7-2336-48bc-93d1-3d69920a5f97",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 126,
                        "line_start": 110,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 10,
                        "order": 5,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.sourceAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "format_ISE_query",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "index=ktb_mgmt_default earliest=-15m@m latest=now sourcetype=\"cisco:ise:syslog\"  Framed_IP_Address={0} |  dedup Framed_IP_Address",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 632
                    },
                    {
                        "action": "run query",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_ISE_query:formatted_data"
                        },
                        "angle": 0,
                        "app": "Splunk",
                        "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run query",
                                "actions": [
                                    "post data",
                                    "update event",
                                    "run query",
                                    "on poll",
                                    "get host events",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Splunk",
                                "app_version": "2.3.3",
                                "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                                "asset_name": "splunk es asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "command": "search",
                                    "display": "",
                                    "parse_only": "",
                                    "query": "format_ISE_query:formatted_data"
                                },
                                "has_app": true,
                                "id": 35,
                                "loaded": false,
                                "missing": false,
                                "name": "splunk es asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string",
                                        "example_values": [
                                            "savedsearch"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.display",
                                        "data_type": "string",
                                        "example_values": [
                                            "_time",
                                            "index"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.parse_only",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_path": "action_result.parameter.query",
                                        "data_type": "string",
                                        "example_values": [
                                            "\"Send to test\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*._bkt",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._cd",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._indextime",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._kv",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "column_name": "Raw",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*._raw",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._serial",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._si",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._subsecond",
                                        "data_type": "string",
                                        "example_value": ".427"
                                    },
                                    {
                                        "column_name": "Time",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*._time",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.a",
                                        "data_type": "string",
                                        "example_value": "abc"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.host",
                                        "data_type": "string",
                                        "example_value": "test"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.info",
                                        "data_type": "string",
                                        "example_value": "granted"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.search",
                                        "data_type": "string",
                                        "example_value": "search [| makeresults | eval myfield = \"test\" | table search] `notable` | table event_id"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.search_type",
                                        "data_type": "string",
                                        "example_value": "adhoc"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.sid",
                                        "data_type": "string",
                                        "example_value": "1621953839.25275"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.source",
                                        "data_type": "string",
                                        "example_value": "source"
                                    },
                                    {
                                        "data_path": "action_result.data.*.content.sourcetype",
                                        "data_type": "string",
                                        "example_value": "source"
                                    },
                                    {
                                        "data_path": "action_result.data.*.count",
                                        "data_type": "string",
                                        "example_value": "3058733"
                                    },
                                    {
                                        "data_path": "action_result.data.*.count(host)",
                                        "data_type": "string",
                                        "example_value": "28"
                                    },
                                    {
                                        "column_name": "Host",
                                        "column_order": 0,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.host",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.1.67.187:8088"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.index",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Acceleration_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Adhoc_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Failed_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Realtime_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Scheduled_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_Subsearch_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Acceleration_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Adhoc_Jobs",
                                        "data_type": "string",
                                        "example_value": "0"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Failed_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Realtime_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Scheduled_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.is_not_Subsearch_Jobs",
                                        "data_type": "string",
                                        "example_value": "1"
                                    },
                                    {
                                        "data_path": "action_result.data.*.linecount",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.splunk_server",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.user",
                                        "data_type": "string",
                                        "example_value": "admin"
                                    },
                                    {
                                        "data_path": "action_result.data.*.values(source)",
                                        "data_type": "string",
                                        "example_value": "/opt/splunk/var/log/splunk/scheduler.log"
                                    },
                                    {
                                        "data_path": "action_result.summary.sid",
                                        "data_type": "string",
                                        "example_values": [
                                            "1612177958.977510"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_events",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Sid: 1612177958.977510, Total events: 2"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "command": {
                                        "data_type": "string",
                                        "default": "search",
                                        "description": "Beginning command (in Splunk Processing Language)",
                                        "key": "command",
                                        "order": 0,
                                        "required": false,
                                        "value_list": [
                                            "search",
                                            "eval",
                                            "savedsearch",
                                            "stats",
                                            "table",
                                            "tstats"
                                        ]
                                    },
                                    "display": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Display fields (comma-separated)",
                                        "key": "display",
                                        "order": 2,
                                        "required": false
                                    },
                                    "parse_only": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Parse only",
                                        "key": "parse_only",
                                        "order": 3,
                                        "required": false
                                    },
                                    "query": {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Query to run (in Splunk Processing Language)",
                                        "key": "query",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Splunk Enterprise",
                                "product_vendor": "Splunk Inc.",
                                "targets": "35",
                                "type": "siem"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "run query 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def run_query_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('run_query_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'run_query_1' call\n    formatted_data_1 = phantom.get_format_data(name='format_ISE_query')\n\n    parameters = []\n    \n    # build parameters list for 'run_query_1' call\n    parameters.append({\n        'query': formatted_data_1,\n        'command': \"search\",\n        'display': \"\",\n        'parse_only': \"\",\n    })\n\n    phantom.act(action=\"run query\", parameters=parameters, assets=['splunk es asset'], callback=decision_3, name=\"run_query_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 194,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "dbe31fc7-cc3d-4fe5-b241-38e187a80d5f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 148,
                        "line_start": 126,
                        "message": "Configuring now",
                        "name": "run query",
                        "notes": "",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "run_query_1",
                        "required_params": {
                            "query": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 633
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'decision_2' block\n    decision_2(container=container)\n\n    # call 'decision_7' block\n    decision_7(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8fb04e4f-65c2-4d05-adbe-9b8e28a9d6dc",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 18,
                        "line_start": 7,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -100,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 635
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 7
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_7() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationUserName\", \"!=\", \"\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        format_user_AD_query(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": false,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9c8339db-5891-401c-8b4d-367f2984c0d1",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 428,
                        "line_start": 411,
                        "name": "decision",
                        "notes": "",
                        "number": 7,
                        "order": 17,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "decision_7",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 636
                    },
                    {
                        "action": "get device info",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "connector_guid": "count_guid:custom_function:connector_guid"
                        },
                        "angle": 0,
                        "app": "FireAMP",
                        "appid": "897890aa-14f5-4d6c-b68c-e557ff30d251",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get device info",
                                "actions": [
                                    "get device info",
                                    "hunt url",
                                    "hunt ip",
                                    "hunt file",
                                    "list endpoints",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "FireAMP",
                                "app_version": "2.0.5",
                                "appid": "897890aa-14f5-4d6c-b68c-e557ff30d251",
                                "asset_name": "cisco fireamp asset",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "connector_guid": "count_guid:custom_function:connector_guid"
                                },
                                "has_app": true,
                                "id": 13,
                                "loaded": false,
                                "missing": false,
                                "name": "cisco fireamp asset",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "fireamp connector guid"
                                        ],
                                        "data_path": "action_result.parameter.connector_guid",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Active",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.data.active",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Connector GUID",
                                        "column_order": 2,
                                        "contains": [
                                            "fireamp connector guid"
                                        ],
                                        "data_path": "action_result.data.*.data.connector_guid",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.connector_version",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.external_ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.group_guid",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Host Name",
                                        "column_order": 1,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.data.hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.install_date",
                                        "data_type": "string",
                                        "example_value": "2021-03-01T08:34:23Z"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.internal_ips",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.is_compromised",
                                        "data_type": "boolean",
                                        "example_value": false
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.isolation.available",
                                        "data_type": "boolean",
                                        "example_value": false
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.isolation.status",
                                        "data_type": "string",
                                        "example_value": "not_isolated"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.last_seen",
                                        "data_type": "string",
                                        "example_value": "2021-03-01T08:37:05Z"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.links.computer",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.links.group",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.links.trajectory",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "IPs",
                                        "column_order": 0,
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.network_addresses.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.network_addresses.*.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "mac address"
                                        ],
                                        "data_path": "action_result.data.*.data.network_addresses.*.mac",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Operating System",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.data.operating_system",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.orbital.status",
                                        "data_type": "string",
                                        "example_value": "not_enabled"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.policy.guid",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.policy.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.windows_processor_id",
                                        "data_type": "string",
                                        "example_value": "b927af6438501de"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.metadata.links.self",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.version",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.total_endpoints",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "connector_guid": {
                                        "contains": [
                                            "fireamp connector guid"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Connector GUID on endpoint",
                                        "key": "connector_guid",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "FireAMP",
                                "product_vendor": "Cisco Systems",
                                "targets": "13",
                                "type": "endpoint"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get device info"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_device_info_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_device_info_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    count_guid__connector_guid = json.loads(phantom.get_run_data(key='count_guid:connector_guid'))\n    # collect data for 'get_device_info_2' call\n\n    parameters = []\n    \n    # build parameters list for 'get_device_info_2' call\n    parameters.append({\n        'connector_guid': count_guid__connector_guid,\n    })\n\n    phantom.act(action=\"get device info\", parameters=parameters, assets=['cisco fireamp asset'], callback=check_active_IP_match_source_Address, name=\"get_device_info_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 58,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": "0",
                        "description": "Gets information about an endpoint where Cisco AMP is installed.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ef19afa9-41e5-4451-bb1c-d9f89ec696bc",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 59,
                        "line_start": 40,
                        "message": "Configuring now",
                        "name": "get device info",
                        "notes": "",
                        "number": 2,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 560
                        },
                        "previous_function": "",
                        "previous_name": "get_device_info_2",
                        "required_params": {
                            "connector_guid": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 640
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "update artifact connecto..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def update_artifact_connector_guid(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_connector_guid() called')\n    \n    check_active_IP_match_source_Address__matched_guid = json.loads(phantom.get_run_data(key='check_active_IP_match_source_Address:matched_guid'))\n    check_active_IP_match_source_Address__matched_mac = json.loads(phantom.get_run_data(key='check_active_IP_match_source_Address:matched_mac'))\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    parameters = []\n    \n    cef_json = {\"sourceAddress_connector_guid\" : check_active_IP_match_source_Address__matched_guid[0] , \"sourceAddress_MacAddresss\" : check_active_IP_match_source_Address__matched_mac[0] , \"sourceAddress_QueryFrom\" : \"AMP\" }\n    \n    # build parameters list for 'update_guid' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_guid\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get device info",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 4,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def update_artifact_connector_guid(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_connector_guid() called')\n    \n    check_active_IP_match_source_Address__matched_guid = json.loads(phantom.get_run_data(key='check_active_IP_match_source_Address:matched_guid'))\n    check_active_IP_match_source_Address__matched_mac = json.loads(phantom.get_run_data(key='check_active_IP_match_source_Address:matched_mac'))\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    parameters = []\n    \n    cef_json = {\"sourceAddress_connector_guid\" : check_active_IP_match_source_Address__matched_guid[0] , \"sourceAddress_MacAddresss\" : check_active_IP_match_source_Address__matched_mac[0] , \"sourceAddress_QueryFrom\" : \"AMP\" }\n    \n    # build parameters list for 'update_guid' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_guid\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "update artifact connector guid",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "639a8fb1-26da-47f1-9c78-1b03bdbc5a67",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 411,
                        "line_start": 373,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 5,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "check_active_IP_match_source_Address:custom_function:matched_guid"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "check_active_IP_match_source_Address:custom_function:matched_mac"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 560
                        },
                        "previous_function": "",
                        "previous_name": "update_artifact_connector_guid",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    parameters = []\n    \n    cef_json = {\"sourceAddress_connector_guid\" : check_active_IP_match_source_Address__matched_guid[0] , \"sourceAddress_MacAddresss\" : check_active_IP_match_source_Address__matched_mac[0] , \"sourceAddress_QueryFrom\" : \"AMP\" }\n    \n    # build parameters list for 'update_guid' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_guid\")\n\n",
                        "warn": false,
                        "z": 641
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 4
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_4() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"get_amp_event_data:action_result.status\", \"==\", \"success\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        count_guid(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": false,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "80654ae4-1834-44ce-988e-dc0497ad87e3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 304,
                        "line_start": 286,
                        "name": "decision",
                        "notes": "",
                        "number": 4,
                        "order": 12,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "get_amp_event_data:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 840,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "decision_4",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 645
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "{\"Authorization\": \"Basic NzU4MWVjYTU3YjAzMjZhMTJiM2U6ODJjNGFhZmYtNzExMS00N2JmLTg4YjUtNzg2N2E0MTQzZTY1\"}",
                            "location": "format_amp_query_ip:formatted_data",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "HTTP",
                        "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "3.2.3",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "cisco amp base64",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "{\"Authorization\": \"Basic NzU4MWVjYTU3YjAzMjZhMTJiM2U6ODJjNGFhZmYtNzExMS00N2JmLTg4YjUtNzg2N2E0MTQzZTY1\"}",
                                    "location": "format_amp_query_ip:formatted_data",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 103,
                                "loaded": false,
                                "missing": false,
                                "name": "cisco amp base64",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "103",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get amp event data"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_amp_event_data(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_amp_event_data() called')\n\n    # collect data for 'get_amp_event_data' call\n    formatted_data_1 = phantom.get_format_data(name='format_amp_query_ip')\n\n    parameters = []\n    \n    # build parameters list for 'get_amp_event_data' call\n    parameters.append({\n        'headers': \"{\\\"Authorization\\\": \\\"Basic NzU4MWVjYTU3YjAzMjZhMTJiM2U6ODJjNGFhZmYtNzExMS00N2JmLTg4YjUtNzg2N2E0MTQzZTY1\\\"}\",\n        'location': formatted_data_1,\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['cisco amp base64'], callback=decision_4, name=\"get_amp_event_data\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get amp event data",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8dd6efb-543b-4a6f-9ed3-765c79c18b1a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 249,
                        "line_start": 230,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "",
                        "number": 1,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "get_amp_event_data",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "warn",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 647
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "count guid"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def count_guid(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('count_guid() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_amp_event_data:action_result.status', 'get_amp_event_data:action_result.data.*.response_body'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    count_guid__connector_guid = None\n    count_guid__connector_guid_count = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    connector_guid = 0\n    connector_guid_count = 0\n    #phantom.debug(results_item_1_0)\n    for item in results_item_1_1[0]['data']:\n        if item['connector_guid']:\n            connector_guid = item['connector_guid']\n            connector_guid_count += 1\n            \n    count_guid__connector_guid = connector_guid\n    count_guid__connector_guid_count = connector_guid_count\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='count_guid:connector_guid', value=json.dumps(count_guid__connector_guid))\n    phantom.save_run_data(key='count_guid:connector_guid_count', value=json.dumps(count_guid__connector_guid_count))\n    decision_6(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 13,
                        "custom_callback": "",
                        "custom_code": "def count_guid(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('custom_function_4() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_data_1:action_result.status', 'get_data_1:action_result.data.*.response_body'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    count_guid__connector_guid = None\n    count_guid__connector_guid_count = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    connector_guid = 0\n    connector_guid_count = 0\n    #phantom.debug(results_item_1_0)\n    for item in results_item_1_1[0]['data']:\n        if item['connector_guid']:\n            connector_guid = item['connector_guid']\n            connector_guid_count += 1\n            \n    count_guid__connector_guid = connector_guid\n    count_guid__connector_guid_count = connector_guid_count\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='custom_function_4:connector_guid', value=json.dumps(count_guid__connector_guid))\n    phantom.save_run_data(key='custom_function_4:connector_guid_count', value=json.dumps(count_guid__connector_guid_count))\n    decision_6(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "count guid",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "61a02671-3d48-4a34-a795-7fcacb60358f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 286,
                        "line_start": 249,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 4,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "connector_guid"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "connector_guid_count"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_amp_event_data:action_result.status"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_amp_event_data:action_result.data.*.response_body"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1000,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "count_guid",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    \n    connector_guid = 0\n    connector_guid_count = 0\n    #phantom.debug(results_item_1_0)\n    for item in results_item_1_1[0]['data']:\n        if item['connector_guid']:\n            connector_guid = item['connector_guid']\n            connector_guid_count += 1\n            \n    count_guid__connector_guid = connector_guid\n    count_guid__connector_guid_count = connector_guid_count\n\n",
                        "warn": false,
                        "z": 648
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 6
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_6() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"count_guid:custom_function:connector_guid_count\", \"==\", 1],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        get_device_info_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # check for 'elif' condition 2\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"count_guid:custom_function:connector_guid_count\", \">\", 1],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched:\n        format_multiple_active_guid_found(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 3\n    format_ISE_query(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "164bb59d-7627-4947-9040-b939e13c33a9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 338,
                        "line_start": 304,
                        "name": "decision",
                        "notes": "",
                        "number": 6,
                        "order": 13,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "count_guid:custom_function:connector_guid_count",
                                        "value": "1"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": ">",
                                        "data_type": "",
                                        "param": "count_guid:custom_function:connector_guid_count",
                                        "value": "1"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 560
                        },
                        "previous_function": "",
                        "previous_name": "decision_6",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 649
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format multiple active gu..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_multiple_active_guid_found(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_multiple_active_guid_found() called')\n    \n    template = \"\"\"Active IP {2} on {0} endpoints with following connector_guid:\n\n%%\n{1}\n\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"count_guid:custom_function:connector_guid_count\",\n        \"count_guid:custom_function:connector_guid\",\n        \"artifact:*.cef.sourceAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_multiple_active_guid_found\", separator=\", \")\n\n    add_note_2(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get amp event data",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format multiple active guid found",
                        "delimiter": ", ",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "edf53aac-8b98-459f-b594-a3eedd726de4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 379,
                        "line_end": 361,
                        "line_start": 338,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 12,
                        "order": 14,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "count_guid:custom_function:connector_guid_count"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "count_guid:custom_function:connector_guid"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.cef.sourceAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 680
                        },
                        "previous_function": "",
                        "previous_name": "format_multiple_active_guid_found",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "Active IP {2} on {0} endpoints with following connector_guid:\n\n%%\n{1}\n\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 650
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "check active IP match so..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def check_active_IP_match_source_Address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_active_IP_match_source_Address() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.sourceAddress', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['get_device_info_2:action_result.data.*.data.active', 'get_device_info_2:action_result.data.*.data.internal_ips', 'get_device_info_2:action_result.data.*.data.connector_guid', 'get_device_info_2:action_result.data.*.data.network_addresses.*.mac'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_1_2 = [item[2] for item in results_data_1]\n    results_item_1_3 = [item[3] for item in results_data_1]\n\n    check_active_IP_match_source_Address__matched_guid = None\n    check_active_IP_match_source_Address__matched_guid_count = None\n    check_active_IP_match_source_Address__matched_mac = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #phantom.debug(results_data_1)\n    matched_guid = []\n    matched_mac = []\n    matched_guid_count = 0\n    phantom.debug(container_item_0)\n    phantom.debug(results_data_1)\n    for cguid in results_data_1:\n        if  cguid[0] == True and container_item_0[0] in cguid[1]:\n            matched_guid.append(cguid[2])\n            matched_mac.append(cguid[3])\n            matched_guid_count += 1\n    phantom.debug(matched_guid)\n    \n    check_active_IP_match_source_Address__matched_guid = matched_guid\n    check_active_IP_match_source_Address__matched_guid_count = matched_guid_count\n    check_active_IP_match_source_Address__matched_mac = matched_mac\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_guid', value=json.dumps(check_active_IP_match_source_Address__matched_guid))\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_guid_count', value=json.dumps(check_active_IP_match_source_Address__matched_guid_count))\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_mac', value=json.dumps(check_active_IP_match_source_Address__matched_mac))\n    update_artifact_connector_guid(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get device info",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 9,
                        "customCodeStartLine": 18,
                        "custom_callback": "",
                        "custom_code": "def check_active_IP_match_source_Address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_active_IP_match_source_Address() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.sourceAddress', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['get_device_info_2:action_result.data.*.data.active', 'get_device_info_2:action_result.data.*.data.internal_ips', 'get_device_info_2:action_result.data.*.data.connector_guid', 'get_device_info_2:action_result.data.*.data.network_addresses.*.mac'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_1_2 = [item[2] for item in results_data_1]\n    results_item_1_3 = [item[3] for item in results_data_1]\n\n    check_active_IP_match_source_Address__matched_guid = None\n    check_active_IP_match_source_Address__matched_guid_count = None\n    check_active_IP_match_source_Address__matched_mac = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #phantom.debug(results_data_1)\n    matched_guid = []\n    matched_mac = []\n    matched_guid_count = 0\n    phantom.debug(container_item_0)\n    phantom.debug(results_data_1)\n    for cguid in results_data_1:\n        if  cguid[0] == True and container_item_0[0] in cguid[1]:\n            matched_guid.append(cguid[2])\n            matched_mac.append(cguid[3])\n            matched_guid_count += 1\n    phantom.debug(matched_guid)\n    \n    check_active_IP_match_source_Address__matched_guid = matched_guid\n    check_active_IP_match_source_Address__matched_guid_count = matched_guid_count\n    check_active_IP_match_source_Address__matched_mac = matched_mac\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_guid', value=json.dumps(check_active_IP_match_source_Address__matched_guid))\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_guid_count', value=json.dumps(check_active_IP_match_source_Address__matched_guid_count))\n    phantom.save_run_data(key='check_active_IP_match_source_Address:matched_mac', value=json.dumps(check_active_IP_match_source_Address__matched_mac))\n    decision_7(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "check active IP match source Address",
                        "description": "check recent IP in each result to match sourceaddress from container",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "13498753-5acd-4266-9baa-9d39f8f4e1a9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 117,
                        "legacy": true,
                        "line_end": 110,
                        "line_start": 62,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "matched_guid"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "matched_guid_count"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "matched_mac"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.cef.sourceAddress"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_device_info_2:action_result.data.*.data.active"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_device_info_2:action_result.data.*.data.internal_ips"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_device_info_2:action_result.data.*.data.connector_guid"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_device_info_2:action_result.data.*.data.network_addresses.*.mac"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 560
                        },
                        "previous_function": "",
                        "previous_name": "check_active_IP_match_source_Address",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    #phantom.debug(results_data_1)\n    matched_guid = []\n    matched_mac = []\n    matched_guid_count = 0\n    phantom.debug(container_item_0)\n    phantom.debug(results_data_1)\n    for cguid in results_data_1:\n        if  cguid[0] == True and container_item_0[0] in cguid[1]:\n            matched_guid.append(cguid[2])\n            matched_mac.append(cguid[3])\n            matched_guid_count += 1\n    phantom.debug(matched_guid)\n    \n    check_active_IP_match_source_Address__matched_guid = matched_guid\n    check_active_IP_match_source_Address__matched_guid_count = matched_guid_count\n    check_active_IP_match_source_Address__matched_mac = matched_mac\n\n",
                        "warn": false,
                        "z": 651
                    },
                    {
                        "action": "run query",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "attributes": "samaccountname;mail;userprincipalname;distinguishedname",
                            "filter": "format_user_AD_query:formatted_data",
                            "search_base": ""
                        },
                        "angle": 0,
                        "app": "AD LDAP",
                        "appid": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run query",
                                "actions": [
                                    "set attribute",
                                    "get attributes",
                                    "run query",
                                    "move object",
                                    "set password",
                                    "reset password",
                                    "enable account",
                                    "disable account",
                                    "unlock account",
                                    "remove group members",
                                    "add group members",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "AD LDAP",
                                "app_version": "2.0.4",
                                "appid": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                                "asset_name": "csoc ad ldap asset containment",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "attributes": "samaccountname;mail;userprincipalname;distinguishedname",
                                    "filter": "format_user_AD_query:formatted_data",
                                    "search_base": ""
                                },
                                "has_app": true,
                                "id": 21,
                                "loaded": false,
                                "missing": false,
                                "name": "csoc ad ldap asset containment",
                                "output": [
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.filter",
                                        "data_type": "string",
                                        "example_values": [
                                            "(sAMAccountName=*)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.search_base",
                                        "data_type": "string",
                                        "example_values": [
                                            "ou=splunk,dc=splunk,dc=lab"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.attributes",
                                        "data_type": "string",
                                        "example_values": [
                                            "sAMAccountName"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Total objects: 1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.dn",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=SVC-SPLUNK,OU=SPLUNK,DC=SPLUNK,DC=LAB"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "SVC-SPLUNK"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attributes": {
                                        "data_type": "string",
                                        "default": "sAMAccountName",
                                        "description": "Semi-colon separated list of attributes to collect (e.g. sAMAccountName;mail)",
                                        "key": "attributes",
                                        "order": 2,
                                        "primary": false,
                                        "required": true
                                    },
                                    "filter": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The LDAP filter (must be in LDAP Syntax)",
                                        "key": "filter",
                                        "order": 0,
                                        "primary": false,
                                        "required": true
                                    },
                                    "search_base": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The search base to use in its distinguishedName format. If not specified, the 'defaultNamingContext' will be used",
                                        "key": "search_base",
                                        "order": 1,
                                        "primary": false,
                                        "required": false
                                    }
                                },
                                "product_name": "Active Directory LDAP",
                                "product_vendor": "Splunk",
                                "targets": "21",
                                "type": "identity management"
                            },
                            {
                                "action": "run query",
                                "actions": [
                                    "set attribute",
                                    "get attributes",
                                    "run query",
                                    "move object",
                                    "set password",
                                    "reset password",
                                    "enable account",
                                    "disable account",
                                    "unlock account",
                                    "remove group members",
                                    "add group members",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "AD LDAP",
                                "app_version": "2.0.4",
                                "appid": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                                "asset_name": "ktb domain ad",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "attributes": "samaccountname;mail;userprincipalname;distinguishedname",
                                    "filter": "format_user_AD_query:formatted_data",
                                    "search_base": ""
                                },
                                "has_app": true,
                                "id": 30,
                                "loaded": false,
                                "missing": false,
                                "name": "ktb domain ad",
                                "output": [
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.filter",
                                        "data_type": "string",
                                        "example_values": [
                                            "(sAMAccountName=*)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.search_base",
                                        "data_type": "string",
                                        "example_values": [
                                            "ou=splunk,dc=splunk,dc=lab"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.attributes",
                                        "data_type": "string",
                                        "example_values": [
                                            "sAMAccountName"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Total objects: 1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.dn",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=SVC-SPLUNK,OU=SPLUNK,DC=SPLUNK,DC=LAB"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "SVC-SPLUNK"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attributes": {
                                        "data_type": "string",
                                        "default": "sAMAccountName",
                                        "description": "Semi-colon separated list of attributes to collect (e.g. sAMAccountName;mail)",
                                        "key": "attributes",
                                        "order": 2,
                                        "primary": false,
                                        "required": true
                                    },
                                    "filter": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The LDAP filter (must be in LDAP Syntax)",
                                        "key": "filter",
                                        "order": 0,
                                        "primary": false,
                                        "required": true
                                    },
                                    "search_base": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The search base to use in its distinguishedName format. If not specified, the 'defaultNamingContext' will be used",
                                        "key": "search_base",
                                        "order": 1,
                                        "primary": false,
                                        "required": false
                                    }
                                },
                                "product_name": "Active Directory LDAP",
                                "product_vendor": "Splunk",
                                "targets": "30",
                                "type": "identity management"
                            },
                            {
                                "action": "run query",
                                "actions": [
                                    "set attribute",
                                    "get attributes",
                                    "run query",
                                    "move object",
                                    "set password",
                                    "reset password",
                                    "enable account",
                                    "disable account",
                                    "unlock account",
                                    "remove group members",
                                    "add group members",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "AD LDAP",
                                "app_version": "2.0.4",
                                "appid": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                                "asset_name": "ktbcs domain ad",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "attributes": "samaccountname;mail;userprincipalname;distinguishedname",
                                    "filter": "format_user_AD_query:formatted_data",
                                    "search_base": ""
                                },
                                "has_app": true,
                                "id": 31,
                                "loaded": false,
                                "missing": false,
                                "name": "ktbcs domain ad",
                                "output": [
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.filter",
                                        "data_type": "string",
                                        "example_values": [
                                            "(sAMAccountName=*)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.search_base",
                                        "data_type": "string",
                                        "example_values": [
                                            "ou=splunk,dc=splunk,dc=lab"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.attributes",
                                        "data_type": "string",
                                        "example_values": [
                                            "sAMAccountName"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Total objects: 1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.dn",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=SVC-SPLUNK,OU=SPLUNK,DC=SPLUNK,DC=LAB"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.entries.*.attributes.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "SVC-SPLUNK"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attributes": {
                                        "data_type": "string",
                                        "default": "sAMAccountName",
                                        "description": "Semi-colon separated list of attributes to collect (e.g. sAMAccountName;mail)",
                                        "key": "attributes",
                                        "order": 2,
                                        "primary": false,
                                        "required": true
                                    },
                                    "filter": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The LDAP filter (must be in LDAP Syntax)",
                                        "key": "filter",
                                        "order": 0,
                                        "primary": false,
                                        "required": true
                                    },
                                    "search_base": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The search base to use in its distinguishedName format. If not specified, the 'defaultNamingContext' will be used",
                                        "key": "search_base",
                                        "order": 1,
                                        "primary": false,
                                        "required": false
                                    }
                                },
                                "product_name": "Active Directory LDAP",
                                "product_vendor": "Splunk",
                                "targets": "31",
                                "type": "identity management"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "run query against 3 ad"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def run_query_against_3_ad(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('run_query_against_3_ad() called')\n\n    # collect data for 'run_query_against_3_ad' call\n    formatted_data_1 = phantom.get_format_data(name='format_user_AD_query')\n\n    parameters = []\n    \n    # build parameters list for 'run_query_against_3_ad' call\n    parameters.append({\n        'filter': formatted_data_1,\n        'attributes': \"samaccountname;mail;userprincipalname;distinguishedname\",\n        'search_base': \"\",\n    })\n\n    phantom.act(action=\"run query\", parameters=parameters, assets=['csoc ad ldap asset containment','ktb domain ad','ktbcs domain ad'], callback=update_artifact_active_directory, name=\"run_query_against_3_ad\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 467,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "run query against 3 ad",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d7a1ce12-60b8-48c6-8a38-ffe0fc0db557",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 463,
                        "line_start": 444,
                        "message": "Configuring now",
                        "name": "run query",
                        "notes": "",
                        "number": 2,
                        "order": 19,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "run_query_against_3_ad",
                        "required_params": {
                            "attributes": true,
                            "filter": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 653
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format amp query ip"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_amp_query_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_amp_query_ip() called')\n    \n    template = \"\"\"/v1/computers?internal_ip={0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.sourceAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_amp_query_ip\", separator=\", \")\n\n    get_amp_event_data(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format amp query ip",
                        "delimiter": ", ",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "51497a66-d927-4776-aac6-e53260c3d403",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 230,
                        "line_start": 214,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 11,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.sourceAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "format_amp_query_ip",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "/v1/computers?internal_ip={0}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 655
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format user AD query"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_user_AD_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_user_AD_query() called')\n    \n    template = \"\"\"(&(|(samaccountname={0})(userprincipalname={0}))(objectclass=user))\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.destinationUserName\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_user_AD_query\", separator=\", \")\n\n    run_query_against_3_ad(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format user AD query",
                        "delimiter": ", ",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2982a163-6c32-4920-8916-e55944a6cfd2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 444,
                        "line_start": 428,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 13,
                        "order": 18,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.destinationUserName"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "format_user_AD_query",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "(&(|(samaccountname={0})(userprincipalname={0}))(objectclass=user))",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 656
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "update artifact macaddr ..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def update_artifact_macaddr_from_ise(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_macaddr_from_ise() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_1:action_result.data.*.raw_msg'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    parameters = []\n\n    for item in results_item_1_0:\n        ltmp = item.split(',')\n        for item2 in ltmp:\n            if item2.split('=')[0].strip() == \"Calling-Station-ID\":\n                cef_json = {\"sourceAddress_MacAddress\" : item2.split('=')[1].replace('-',':') , \"sourceAddress_QueryFrom\" : \"ISE\" }\n                \n    # build parameters list for 'update_mac' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_mac\")\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run query 1",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 4,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def update_artifact_macaddr_from_ise(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_macaddr_from_ise() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_1:action_result.data.*.raw_msg'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    parameters = []\n\n    for item in results_item_1_0:\n        ltmp = item.split(',')\n        for item2 in ltmp:\n            if item2.split('=')[0].strip() == \"Calling-Station-ID\":\n                cef_json = {\"sourceAddress_MacAddress\" : item2.split('=')[1].replace('-',':') , \"sourceAddress_QueryFrom\" : \"ISE\" }\n                \n    # build parameters list for 'update_mac' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_mac\")\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "update artifact macaddr from ise",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c72cece3-522f-4989-ad41-2d4a349e6451",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 196,
                        "line_start": 148,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 3,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.id"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "run_query_1:action_result.data.*.raw_msg"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "update_artifact_macaddr_from_ise",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    parameters = []\n\n    for item in results_item_1_0:\n        ltmp = item.split(',')\n        for item2 in ltmp:\n            if item2.split('=')[0].strip() == \"Calling-Station-ID\":\n                cef_json = {\"sourceAddress_MacAddress\" : item2.split('=')[1].replace('-',':') , \"sourceAddress_QueryFrom\" : \"ISE\" }\n                \n    # build parameters list for 'update_mac' call\n    parameters.append({\n    'artifact_id': container_item_0[0],\n    'name': \"\",\n    'label': \"\",\n    'severity': \"\",\n    'cef_json': cef_json,\n    'cef_types_json': \"\",\n    'tags': \"\",\n    'overwrite': \"\",\n    'artifact_json': \"\",\n    })\n    \n    phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress_mac\")\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################\n    #####################################",
                        "warn": false,
                        "z": 658
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "update artifact active dir..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def update_artifact_active_directory(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_active_directory() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_against_3_ad:action_result.data.*.entries.*.attributes'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    user_found = False\n    for item in results_item_1_0:\n        if item and item['distinguishedname'].find('OU=CSOC-Users,DC=csoc,DC=krungthai,DC=local') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"CSOC AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=KTBDOMAIN') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTB AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=ktbcs') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTBCS AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n    if not user_found:\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"user not found\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run query against 3 ad",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 4,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def update_artifact_active_directory(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_artifact_active_directory() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.id', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_against_3_ad:action_result.data.*.entries.*.attributes'], action_results=results)\n    container_item_0 = [item[0] for item in container_data]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    user_found = False\n    for item in results_item_1_0:\n        if item and item['distinguishedname'].find('OU=CSOC-Users,DC=csoc,DC=krungthai,DC=local') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"CSOC AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=KTBDOMAIN') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTB AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=ktbcs') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTBCS AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n    if not user_found:\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"user not found\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "update artifact active directory",
                        "description": "run query against 3 AD (csoc, ktb and ktbcs). append artifact regarding AD found.",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "db229a65-ba50-456b-9c28-7738ff838f43",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 571,
                        "line_start": 466,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "run query against 3 AD (csoc, ktb and ktbcs). append artifact regarding AD found.",
                        "number": 6,
                        "order": 20,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "run_query_against_3_ad:action_result.data.*.entries.*.attributes"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1400,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "update_artifact_active_directory",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    user_found = False\n    for item in results_item_1_0:\n        if item and item['distinguishedname'].find('OU=CSOC-Users,DC=csoc,DC=krungthai,DC=local') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"CSOC AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=KTBDOMAIN') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTB AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n        elif item and item['distinguishedname'].find('DC=ktbcs') != -1:\n            phantom.debug(item['userprincipalname'])\n            phantom.debug(item['distinguishedname'])\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"KTBCS AD\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n            user_found = True\n    if not user_found:\n            parameters = []\n            cef_json = {\"destinationUserName_AD\" : \"user not found\" }\n            # build parameters list for 'update_guid' call\n            parameters.append({\n            'artifact_id': container_item_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n            })\n            phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_ad\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                        "warn": false,
                        "z": 659
                    }
                ]
            },
            "notes": ""
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.7.63984"
    },
    "create_time": "2022-03-25T08:50:28.632619+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}