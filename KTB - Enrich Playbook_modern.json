{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "USE CASE: This playbook will perform enrichment tasks on the indicators",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_11_to_port_10",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_25",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_25_to_port_1",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_70",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "70",
                    "targetPort": "70_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_70_to_port_71",
                    "sourceNode": "70",
                    "sourcePort": "70_out",
                    "targetNode": "71",
                    "targetPort": "71_in"
                },
                {
                    "id": "port_23_to_port_79",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "79",
                    "targetPort": "79_in"
                },
                {
                    "id": "port_79_to_port_33",
                    "sourceNode": "79",
                    "sourcePort": "79_out",
                    "targetNode": "33",
                    "targetPort": "33_in"
                },
                {
                    "id": "port_29_to_port_87",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "87",
                    "targetPort": "87_in"
                },
                {
                    "id": "port_87_to_port_80",
                    "sourceNode": "87",
                    "sourcePort": "87_out",
                    "targetNode": "80",
                    "targetPort": "80_in"
                },
                {
                    "id": "port_80_to_port_67",
                    "sourceNode": "80",
                    "sourcePort": "80_out",
                    "targetNode": "67",
                    "targetPort": "67_in"
                },
                {
                    "id": "port_67_to_port_7",
                    "sourceNode": "67",
                    "sourcePort": "67_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_20_to_port_31",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_33_to_port_1",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_7_to_port_2",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_20",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_0_to_port_63",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "63",
                    "targetPort": "63_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_63_to_port_72",
                    "sourceNode": "63",
                    "sourcePort": "63_out",
                    "targetNode": "72",
                    "targetPort": "72_in"
                },
                {
                    "id": "port_71_to_port_73",
                    "sourceNode": "71",
                    "sourcePort": "71_out",
                    "targetNode": "73",
                    "targetPort": "73_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_73_to_port_23",
                    "sourceNode": "73",
                    "sourcePort": "73_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_72_to_port_65",
                    "sourceNode": "72",
                    "sourcePort": "72_out",
                    "targetNode": "65",
                    "targetPort": "65_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_65_to_port_6",
                    "sourceNode": "65",
                    "sourcePort": "65_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_82",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "82",
                    "targetPort": "82_in"
                },
                {
                    "id": "port_82_to_port_32",
                    "sourceNode": "82",
                    "sourcePort": "82_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_32_to_port_1",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_73_to_port_30",
                    "sourceNode": "73",
                    "sourcePort": "73_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "id": "port_30_to_port_29",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_65_to_port_21",
                    "sourceNode": "65",
                    "sourcePort": "65_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_21_to_port_24",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_81",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "81",
                    "targetPort": "81_in"
                },
                {
                    "id": "port_81_to_port_83",
                    "sourceNode": "81",
                    "sourcePort": "81_out",
                    "targetNode": "83",
                    "targetPort": "83_in"
                },
                {
                    "id": "port_83_to_port_68",
                    "sourceNode": "83",
                    "sourcePort": "83_out",
                    "targetNode": "68",
                    "targetPort": "68_in"
                },
                {
                    "id": "port_68_to_port_66",
                    "sourceNode": "68",
                    "sourcePort": "68_out",
                    "targetNode": "66",
                    "targetPort": "66_in"
                },
                {
                    "id": "port_66_to_port_19",
                    "sourceNode": "66",
                    "sourcePort": "66_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_19_to_port_64",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "64",
                    "targetPort": "64_in"
                },
                {
                    "id": "port_64_to_port_69",
                    "sourceNode": "64",
                    "sourcePort": "64_out",
                    "targetNode": "69",
                    "targetPort": "69_in"
                },
                {
                    "id": "port_0_to_port_53",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "53",
                    "targetPort": "53_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_53_to_port_40",
                    "sourceNode": "53",
                    "sourcePort": "53_out",
                    "targetNode": "40",
                    "targetPort": "40_in"
                },
                {
                    "id": "port_40_to_port_3",
                    "sourceNode": "40",
                    "sourcePort": "40_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_26",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "26",
                    "targetPort": "26_in"
                },
                {
                    "id": "port_26_to_port_27",
                    "sourceNode": "26",
                    "sourcePort": "26_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_3_to_port_13",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_13_to_port_14",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_27_to_port_85",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "85",
                    "targetPort": "85_in"
                },
                {
                    "id": "port_85_to_port_15",
                    "sourceNode": "85",
                    "sourcePort": "85_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_16_to_port_12",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_12_to_port_78",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "78",
                    "targetPort": "78_in"
                },
                {
                    "id": "port_78_to_port_28",
                    "sourceNode": "78",
                    "sourcePort": "78_out",
                    "targetNode": "28",
                    "targetPort": "28_in"
                },
                {
                    "id": "port_0_to_port_54",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "54",
                    "targetPort": "54_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_54_to_port_75",
                    "sourceNode": "54",
                    "sourcePort": "54_out",
                    "targetNode": "75",
                    "targetPort": "75_in"
                },
                {
                    "id": "port_75_to_port_86",
                    "sourceNode": "75",
                    "sourcePort": "75_out",
                    "targetNode": "86",
                    "targetPort": "86_in"
                },
                {
                    "id": "port_76_to_port_5",
                    "sourceNode": "76",
                    "sourcePort": "76_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_74",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "74",
                    "targetPort": "74_in"
                },
                {
                    "id": "port_74_to_port_62",
                    "sourceNode": "74",
                    "sourcePort": "74_out",
                    "targetNode": "62",
                    "targetPort": "62_in"
                },
                {
                    "id": "port_0_to_port_60",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "60",
                    "targetPort": "60_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_60_to_port_41",
                    "sourceNode": "60",
                    "sourcePort": "60_out",
                    "targetNode": "41",
                    "targetPort": "41_in"
                },
                {
                    "id": "port_59_to_port_61",
                    "sourceNode": "59",
                    "sourcePort": "59_out",
                    "targetNode": "61",
                    "targetPort": "61_in"
                },
                {
                    "id": "port_61_to_port_1",
                    "sourceNode": "61",
                    "sourcePort": "61_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_55",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "55",
                    "targetPort": "55_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_55_to_port_42",
                    "sourceNode": "55",
                    "sourcePort": "55_out",
                    "targetNode": "42",
                    "targetPort": "42_in"
                },
                {
                    "id": "port_42_to_port_51",
                    "sourceNode": "42",
                    "sourcePort": "42_out",
                    "targetNode": "51",
                    "targetPort": "51_in"
                },
                {
                    "id": "port_51_to_port_1",
                    "sourceNode": "51",
                    "sourcePort": "51_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_52",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "52",
                    "targetPort": "52_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_52_to_port_39",
                    "sourceNode": "52",
                    "sourcePort": "52_out",
                    "targetNode": "39",
                    "targetPort": "39_in"
                },
                {
                    "id": "port_39_to_port_38",
                    "sourceNode": "39",
                    "sourcePort": "39_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_38_to_port_36",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_36_to_port_22",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_84",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "84",
                    "targetPort": "84_in"
                },
                {
                    "id": "port_84_to_port_17",
                    "sourceNode": "84",
                    "sourcePort": "84_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_18_to_port_4",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_58",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "58",
                    "targetPort": "58_in"
                },
                {
                    "id": "port_58_to_port_35",
                    "sourceNode": "58",
                    "sourcePort": "58_out",
                    "targetNode": "35",
                    "targetPort": "35_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_38_to_port_37",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "37",
                    "targetPort": "37_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_37_to_port_34",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "id": "port_34_to_port_1",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_10_to_port_8",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_0_to_port_56",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "56",
                    "targetPort": "56_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_56_to_port_43",
                    "sourceNode": "56",
                    "sourcePort": "56_out",
                    "targetNode": "43",
                    "targetPort": "43_in"
                },
                {
                    "id": "port_43_to_port_45",
                    "sourceNode": "43",
                    "sourcePort": "43_out",
                    "targetNode": "45",
                    "targetPort": "45_in"
                },
                {
                    "id": "port_43_to_port_47",
                    "sourceNode": "43",
                    "sourcePort": "43_out",
                    "targetNode": "47",
                    "targetPort": "47_in"
                },
                {
                    "id": "port_43_to_port_46",
                    "sourceNode": "43",
                    "sourcePort": "43_out",
                    "targetNode": "46",
                    "targetPort": "46_in"
                },
                {
                    "id": "port_45_to_port_48",
                    "sourceNode": "45",
                    "sourcePort": "45_out",
                    "targetNode": "48",
                    "targetPort": "48_in"
                },
                {
                    "id": "port_47_to_port_48",
                    "sourceNode": "47",
                    "sourcePort": "47_out",
                    "targetNode": "48",
                    "targetPort": "48_in"
                },
                {
                    "id": "port_46_to_port_48",
                    "sourceNode": "46",
                    "sourcePort": "46_out",
                    "targetNode": "48",
                    "targetPort": "48_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        },
                        {
                            "index": 2
                        },
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_48_to_port_49",
                    "sourceNode": "48",
                    "sourcePort": "48_out",
                    "targetNode": "49",
                    "targetPort": "49_in"
                },
                {
                    "id": "port_0_to_port_57",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "57",
                    "targetPort": "57_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_57_to_port_44",
                    "sourceNode": "57",
                    "sourcePort": "57_out",
                    "targetNode": "44",
                    "targetPort": "44_in"
                },
                {
                    "id": "port_49_to_port_1",
                    "sourceNode": "49",
                    "sourcePort": "49_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_69_to_port_50",
                    "sourceNode": "69",
                    "sourcePort": "69_out",
                    "targetNode": "50",
                    "targetPort": "50_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_50_to_port_1",
                    "sourceNode": "50",
                    "sourcePort": "50_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_31_to_port_50",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "50",
                    "targetPort": "50_in"
                },
                {
                    "id": "port_35_to_port_50",
                    "sourceNode": "35",
                    "sourcePort": "35_out",
                    "targetNode": "50",
                    "targetPort": "50_in"
                },
                {
                    "id": "port_28_to_port_50",
                    "sourceNode": "28",
                    "sourcePort": "28_out",
                    "targetNode": "50",
                    "targetPort": "50_in"
                },
                {
                    "id": "port_62_to_port_50",
                    "sourceNode": "62",
                    "sourcePort": "62_out",
                    "targetNode": "50",
                    "targetPort": "50_in"
                },
                {
                    "id": "port_14_to_port_1",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_41_to_port_61",
                    "sourceNode": "41",
                    "sourcePort": "41_out",
                    "targetNode": "61",
                    "targetPort": "61_in"
                },
                {
                    "id": "port_86_to_port_77",
                    "sourceNode": "86",
                    "sourcePort": "86_out",
                    "targetNode": "77",
                    "targetPort": "77_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_77_to_port_76",
                    "sourceNode": "77",
                    "sourcePort": "77_out",
                    "targetNode": "76",
                    "targetPort": "76_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_77_to_port_1",
                    "sourceNode": "77",
                    "sourcePort": "77_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "globalCustomCode": "import ipaddress",
            "hash": "287482aae2b0c6bddea2fee640ee272b2b70be03",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 960,
                    "y": -480
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 3240,
                    "y": 2640
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to run query to get event de",
                            "customNameId": 0,
                            "description": "Format data to run query to get event details",
                            "join": [],
                            "note": "Format data to run query to get event details",
                            "separator": ", "
                        },
                        "functionId": 2,
                        "functionName": "format_data_to_run_query_to_get_event_de",
                        "id": "10",
                        "parameters": [
                            "filtered-data:filter_out_notable_event_id:condition_1:artifact:*.cef.event_id"
                        ],
                        "template": "earliest=-48h@h  latest=now `notable` | search event_id={0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "format",
                    "warnings": {},
                    "x": 160,
                    "y": 0
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out notable event_id",
                            "customNameId": 0,
                            "description": "Filter out notable event_id ",
                            "join": [],
                            "note": "Filter out notable event_id "
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.event_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_out_notable_event_id",
                        "id": "11",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "filter",
                    "warnings": {},
                    "x": 160,
                    "y": -120
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "Link back requestURL to artifact record",
                            "customNameId": 0,
                            "description": "Link back requestURL to artifact record",
                            "join": [],
                            "note": "Link back requestURL to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": "check_if_requesturl_external:custom_function:requestURLExternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 11,
                        "functionName": "link_back_requesturl_to_artifact_record",
                        "id": "12",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "filter",
                    "warnings": {},
                    "x": 2120,
                    "y": 1960
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "Link URL to artifact record",
                            "customNameId": 0,
                            "description": "Link URL to artifact record",
                            "join": [],
                            "note": "Link URL to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": "check_if_requesturl_external:custom_function:requestURLInternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 10,
                        "functionName": "link_url_to_artifact_record",
                        "id": "13",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "filter",
                    "warnings": {},
                    "x": 2360,
                    "y": 620
                },
                "14": {
                    "data": {
                        "action": "update artifact",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Update internal requestURL artifact",
                            "customNameId": 0,
                            "description": "Update internal requestURL artifact",
                            "join": [],
                            "note": "Update internal requestURL artifact"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_internal_requesturl_artifact",
                        "id": "14",
                        "parameters": {
                            "artifact_id": "filtered-data:link_url_to_artifact_record:condition_1:artifact:*.id",
                            "artifact_json": "",
                            "cef_json": "{\"is_internalURL\": \"True\"}",
                            "cef_types_json": "",
                            "label": "",
                            "name": "",
                            "overwrite": "",
                            "severity": "",
                            "tags": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "artifact_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "action",
                    "warnings": {},
                    "x": 2360,
                    "y": 2360
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query requestURL",
                            "customNameId": 0,
                            "description": "Format data to query requestURL",
                            "join": [],
                            "note": "Format data to query requestURL",
                            "separator": ", "
                        },
                        "functionId": 12,
                        "functionName": "format_data_to_query_requesturl",
                        "id": "15",
                        "parameters": [
                            "url_reputation_1:action_result.parameter.url"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "format",
                    "warnings": {},
                    "x": 2120,
                    "y": 1420
                },
                "16": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query requestURL",
                            "customNameId": 0,
                            "description": "Run query requestURL",
                            "join": [],
                            "note": "Run query requestURL"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "run_query_requesturl",
                        "id": "16",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_requesturl:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "action",
                    "warnings": {},
                    "x": 2120,
                    "y": 1700
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query destinationDnsDomai",
                            "customNameId": 0,
                            "description": "Format data to query destinationDnsDomai",
                            "join": [],
                            "note": "Format data to query destinationDnsDomai",
                            "separator": ", "
                        },
                        "functionId": 16,
                        "functionName": "format_data_to_query_destinationdnsdomai",
                        "id": "17",
                        "parameters": [
                            "domain_reputation_vt:action_result.parameter.domain"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "format",
                    "warnings": {},
                    "x": 1480,
                    "y": 1420
                },
                "18": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query destinationDnsDomain",
                            "customNameId": 0,
                            "description": "Run query destinationDnsDomain",
                            "join": [],
                            "note": "Run query destinationDnsDomain"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 9,
                        "functionName": "run_query_destinationdnsdomain",
                        "id": "18",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_destinationdnsdomai:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "action",
                    "warnings": {},
                    "x": 1480,
                    "y": 1700
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "Link back dst IP to artifact record",
                            "customNameId": 0,
                            "description": "Link back dst IP to artifact record",
                            "join": [],
                            "note": "Link back dst IP to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": "check_if_destinationaddress_external:custom_function:destinationAddressExternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "link_back_dst_ip_to_artifact_record",
                        "id": "19",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "filter",
                    "warnings": {},
                    "x": 1000,
                    "y": 1960
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Link back src IP to artifact record",
                            "customNameId": 0,
                            "description": "Link back src IP to artifact record",
                            "join": [],
                            "note": "Link back src IP to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "check_if_sourceaddress_external:custom_function:sourceAddressExternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "link_back_src_ip_to_artifact_record",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "warnings": {},
                    "x": 520,
                    "y": 1960
                },
                "20": {
                    "customCode": "def add_note_src_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_src_ip() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_1:action_result.summary.detected_urls'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation_src_ip_ts:action_result.data.*.threat_type'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['whois_src_ip_ts:action_result.summary'], action_results=results)\n    results_data_4 = phantom.collect2(container=container, datapath=['run_query_src_ip:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.cef.sourceAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_4_0 = [item[0] for item in results_data_4]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    content = \"Source IP address: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal IP Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream IP Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) + \"\\n\" + \"\\n\" + \"WhoIS IP\" +\"\\n\" + \"Summary: \" + str(results_item_3_0[0]) + \"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_4_0[0])\n    \n    note_title = \"sourceAddress Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_src_ip_artifact(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note src IP",
                            "customNameId": 0,
                            "description": "Add note src IP",
                            "join": [],
                            "note": "Add note src IP"
                        },
                        "functionId": 3,
                        "functionName": "add_note_src_ip",
                        "id": "20",
                        "inputParameters": [
                            "filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.cef.sourceAddress",
                            "ip_reputation_1:action_result.summary.detected_urls",
                            "ip_reputation_src_ip_ts:action_result.data.*.threat_type",
                            "whois_src_ip_ts:action_result.summary",
                            "run_query_src_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    content = \"Source IP address: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal IP Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream IP Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) + \"\\n\" + \"\\n\" + \"WhoIS IP\" +\"\\n\" + \"Summary: \" + str(results_item_3_0[0]) + \"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_4_0[0])\n    \n    note_title = \"sourceAddress Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                    "warnings": {},
                    "x": 520,
                    "y": 1920
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "Format dst IP",
                            "customNameId": 0,
                            "description": "Format dst IP",
                            "join": [],
                            "note": "Format dst IP",
                            "separator": ", "
                        },
                        "functionId": 8,
                        "functionName": "format_dst_ip",
                        "id": "21",
                        "parameters": [
                            "check_if_destinationaddress_external:custom_function:destinationAddressExternal"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "format",
                    "warnings": {},
                    "x": 1000,
                    "y": 420
                },
                "22": {
                    "data": {
                        "action": "domain reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Domain Reputation VT",
                            "customNameId": 0,
                            "description": "Domain Reputation VT",
                            "join": [],
                            "note": "Domain Reputation VT"
                        },
                        "connector": "VirusTotal",
                        "connectorConfigs": [
                            "virustotal v3 asset"
                        ],
                        "connectorId": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "domain_reputation_vt",
                        "id": "22",
                        "parameters": {
                            "domain": "format_domain:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "domain"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "action",
                    "warnings": {},
                    "x": 1480,
                    "y": 700
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query on internal src IP",
                            "customNameId": 0,
                            "description": "Format data to query on internal src IP",
                            "join": [],
                            "note": "Format data to query on internal src IP",
                            "separator": ", "
                        },
                        "functionId": 4,
                        "functionName": "format_data_to_query_on_internal_src_ip",
                        "id": "23",
                        "parameters": [
                            "check_if_sourceaddress_external:custom_function:sourceAddressInternal"
                        ],
                        "template": "summariesonly=t count from datamodel=Network_Traffic.All_Traffic where All_Traffic.src={0} earliest=-4h@h latest=now by sourcetype",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "format",
                    "warnings": {},
                    "x": 760,
                    "y": 700
                },
                "24": {
                    "data": {
                        "action": "ip reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "description": "IP Reputation dst IP VT",
                            "join": [],
                            "note": "IP Reputation dst IP VT"
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "virustotal v3 asset"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "ip_reputation_3",
                        "id": "24",
                        "parameters": {
                            "ip": "format_dst_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "action",
                    "warnings": {},
                    "x": 1000,
                    "y": 700
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "Add event details as note",
                            "customNameId": 0,
                            "description": "Add event details as note",
                            "join": [],
                            "note": "Add event details as note"
                        },
                        "functionId": 1,
                        "functionName": "add_event_details_as_note",
                        "id": "25",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_data_to_add_event_details_as_note:formatted_data",
                                "note_format": "markdown",
                                "title": "Add event details as note"
                            }
                        }
                    },
                    "errors": {},
                    "id": "25",
                    "tab": "apis",
                    "type": "utility",
                    "warnings": {},
                    "x": 160,
                    "y": 2360
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "Format URL",
                            "customNameId": 0,
                            "description": "Format URL",
                            "join": [],
                            "note": "Format URL",
                            "separator": ", "
                        },
                        "functionId": 10,
                        "functionName": "format_url",
                        "id": "26",
                        "parameters": [
                            "check_if_requesturl_external:custom_function:requestURLExternal"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "26",
                    "type": "format",
                    "warnings": {},
                    "x": 2120,
                    "y": 400
                },
                "27": {
                    "data": {
                        "action": "url reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "description": "URL Reputation VT",
                            "join": [],
                            "note": "URL Reputation VT"
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "virustotal v3 asset"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "url_reputation_1",
                        "id": "27",
                        "parameters": {
                            "ip": "format_url:formatted_data",
                            "url": "format_url:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "action",
                    "warnings": {},
                    "x": 2120,
                    "y": 680
                },
                "28": {
                    "customCode": "def update_external_requesturl_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_external_requesturl_artifact() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['url_reputation_1:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['url_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_requesturl:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.cef.requestURL'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n    \n        parameters = []\n\n        cef_json = {\"requestURL_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_requestURL\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    \n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update external requestURL artifact",
                            "customNameId": 0,
                            "description": "Update external requestURL artifact",
                            "join": [],
                            "note": "Update external requestURL artifact"
                        },
                        "functionId": 11,
                        "functionName": "update_external_requesturl_artifact",
                        "id": "28",
                        "inputParameters": [
                            "filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.cef.requestURL",
                            "url_reputation_1:action_result.summary.malicious",
                            "url_reputation_ts:action_result.summary",
                            "run_query_requesturl:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "28",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n    \n        parameters = []\n\n        cef_json = {\"requestURL_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_requestURL\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    \n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 2120,
                    "y": 2360
                },
                "29": {
                    "data": {
                        "action": "ip reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "delayTime": 0.0,
                            "description": "IP Reputation src IP VT",
                            "join": [],
                            "note": "IP Reputation src IP VT"
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "virustotal v3 asset"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "ip_reputation_1",
                        "id": "29",
                        "parameters": {
                            "ip": "format_src_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "action",
                    "warnings": {},
                    "x": 480,
                    "y": 680
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "Check if requestURL is private",
                            "customNameId": 0,
                            "description": "Check if requestURL is private",
                            "join": [],
                            "note": "Check if requestURL is private"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "check_if_requesturl_external:custom_function:requestURLExternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "check_if_requesturl_external:custom_function:requestURLInternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "logic": "and"
                            }
                        ],
                        "functionId": 9,
                        "functionName": "check_if_requesturl_is_private",
                        "id": "3",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "filter",
                    "warnings": {},
                    "x": 2120,
                    "y": 240
                },
                "30": {
                    "data": {
                        "advanced": {
                            "customName": "Format src IP",
                            "customNameId": 0,
                            "description": "Format src IP",
                            "join": [],
                            "note": "Format src IP",
                            "separator": ", "
                        },
                        "functionId": 7,
                        "functionName": "format_src_ip",
                        "id": "30",
                        "parameters": [
                            "check_if_sourceaddress_external:custom_function:sourceAddressExternal"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "format",
                    "warnings": {},
                    "x": 520,
                    "y": 420
                },
                "31": {
                    "customCode": "def update_src_ip_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_src_ip_artifact() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_1:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation_src_ip_ts:action_result.data.*.threat_type'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['whois_src_ip_ts:action_result.summary'], action_results=results)\n    results_data_4 = phantom.collect2(container=container, datapath=['run_query_src_ip:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.cef.sourceAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_4_0 = [item[0] for item in results_data_4]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n        parameters = []   \n            \n        cef_json = {\"sourceAddress_malicious\" : \"True\"}\n         \n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update src IP artifact",
                            "customNameId": 0,
                            "description": "Update src IP artifact",
                            "join": [],
                            "note": "Update src IP artifact"
                        },
                        "functionId": 4,
                        "functionName": "update_src_ip_artifact",
                        "id": "31",
                        "inputParameters": [
                            "filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_src_ip_to_artifact_record:condition_1:artifact:*.cef.sourceAddress",
                            "ip_reputation_1:action_result.summary.malicious",
                            "ip_reputation_src_ip_ts:action_result.data.*.threat_type",
                            "whois_src_ip_ts:action_result.summary",
                            "run_query_src_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n        parameters = []   \n            \n        cef_json = {\"sourceAddress_malicious\" : \"True\"}\n         \n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_sourceAddress\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n",
                    "warnings": {},
                    "x": 520,
                    "y": 2140
                },
                "32": {
                    "customCode": "def add_note_details_on_internal_dst_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_details_on_internal_dst_ip() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_on_internal_dst_ip:action_result.summary.total_events'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    if  results_item_1_0[0] is not None:\n\n        content = \"Splunk Enteprise Search: \" + str(results_item_1_0[0])\n\n        note_title = \"Internal destinationAddress Investigation\"\n        note_content = content\n        note_format = \"markdown\"\n        phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note details on internal dst IP",
                            "customNameId": 0,
                            "description": "Add note details on internal dst IP",
                            "join": [],
                            "note": "Add note details on internal dst IP"
                        },
                        "functionId": 6,
                        "functionName": "add_note_details_on_internal_dst_ip",
                        "id": "32",
                        "inputParameters": [
                            "run_query_on_internal_dst_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "32",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    if  results_item_1_0[0] is not None:\n\n        content = \"Splunk Enteprise Search: \" + str(results_item_1_0[0])\n\n        note_title = \"Internal destinationAddress Investigation\"\n        note_content = content\n        note_format = \"markdown\"\n        phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 1240,
                    "y": 2360
                },
                "33": {
                    "customCode": "def add_note_details_on_internal_src_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_details_on_internal_src_ip() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['run_query_on_internal_src_ip:action_result.summary.total_events'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    if  results_item_1_0[0] is not None:\n        content = \"Splunk Enteprise Search: \" + str(results_item_1_0[0])\n\n        note_title = \"Internal sourceAddress Investigation\"\n        note_content = content\n        note_format = \"markdown\"\n        phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note details on internal src IP",
                            "customNameId": 0,
                            "description": "Add note details on internal src IP",
                            "join": [],
                            "note": "Add note details on internal src IP"
                        },
                        "functionId": 2,
                        "functionName": "add_note_details_on_internal_src_ip",
                        "id": "33",
                        "inputParameters": [
                            "run_query_on_internal_src_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "33",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    if  results_item_1_0[0] is not None:\n        content = \"Splunk Enteprise Search: \" + str(results_item_1_0[0])\n\n        note_title = \"Internal sourceAddress Investigation\"\n        note_content = content\n        note_format = \"markdown\"\n        phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                    "warnings": {},
                    "x": 760,
                    "y": 2360
                },
                "34": {
                    "data": {
                        "action": "update artifact",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Update internal destinationDnsDomain art",
                            "customNameId": 0,
                            "description": "Update internal destinationDnsDomain artifact",
                            "join": [],
                            "note": "Update internal destinationDnsDomain artifact"
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom asset"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "update_internal_destinationdnsdomain_art",
                        "id": "34",
                        "parameters": {
                            "artifact_id": "filtered-data:link_domain_to_artifact_record:condition_1:artifact:*.id",
                            "artifact_json": "",
                            "cef_json": "{\"is_internalDomain\": \"True\"}",
                            "cef_types_json": "",
                            "label": "",
                            "name": "",
                            "overwrite": "",
                            "severity": "",
                            "tags": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "artifact_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "34",
                    "type": "action",
                    "warnings": {},
                    "x": 1760,
                    "y": 2360
                },
                "35": {
                    "customCode": "def update_external_destinationdnsdomain_art(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_external_destinationdnsdomain_art() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['domain_reputation_vt:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['domain_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_destinationdnsdomain:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.id', 'filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.cef.destinationDnsDomain'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n        parameters = []\n\n        cef_json = {\"destinationDnsDomain_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationDnsDomain\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update external destinationDnsDomain art",
                            "customNameId": 0,
                            "description": "Update external destinationDnsDomain artifact",
                            "join": [],
                            "note": "Update external destinationDnsDomain artifact"
                        },
                        "functionId": 20,
                        "functionName": "update_external_destinationdnsdomain_art",
                        "id": "35",
                        "inputParameters": [
                            "filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.id",
                            "filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.cef.destinationDnsDomain",
                            "domain_reputation_vt:action_result.summary.malicious",
                            "domain_reputation_ts:action_result.summary",
                            "run_query_destinationdnsdomain:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "35",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    if results_item_2_0[0] != {} or results_item_1_0[0] > 2:\n        parameters = []\n\n        cef_json = {\"destinationDnsDomain_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationDnsDomain\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 1480,
                    "y": 2360
                },
                "36": {
                    "data": {
                        "advanced": {
                            "customName": "Format domain",
                            "customNameId": 0,
                            "description": "Format domain",
                            "join": [],
                            "note": "Format domain",
                            "separator": ", "
                        },
                        "functionId": 14,
                        "functionName": "format_domain",
                        "id": "36",
                        "parameters": [
                            "check_if_destinationdnsdomain_external:custom_function:destinationDnsDomainExternal"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "format",
                    "warnings": {},
                    "x": 1480,
                    "y": 420
                },
                "37": {
                    "data": {
                        "advanced": {
                            "customName": "Link domain to artifact record",
                            "customNameId": 0,
                            "description": "Link domain to artifact record",
                            "join": [],
                            "note": "Link domain to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "check_if_destinationdnsdomain_external:custom_function:destinationDnsDomainInternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 18,
                        "functionName": "link_domain_to_artifact_record",
                        "id": "37",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "37",
                    "type": "filter",
                    "warnings": {},
                    "x": 1760,
                    "y": 620
                },
                "38": {
                    "data": {
                        "advanced": {
                            "customName": "Check if destinationDnsDomain is private",
                            "customNameId": 0,
                            "description": "Check if destinationDnsDomain is private",
                            "join": [],
                            "note": "Check if destinationDnsDomain is private"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "check_if_destinationdnsdomain_external:custom_function:destinationDnsDomainExternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "check_if_destinationdnsdomain_external:custom_function:destinationDnsDomainInternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "logic": "and"
                            }
                        ],
                        "functionId": 16,
                        "functionName": "check_if_destinationdnsdomain_is_private",
                        "id": "38",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "38",
                    "type": "filter",
                    "warnings": {},
                    "x": 1480,
                    "y": 240
                },
                "39": {
                    "customCode": "def check_if_destinationdnsdomain_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_destinationdnsdomain_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_destinationdnsdomain:condition_1:artifact:*.cef.destinationDnsDomain'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    check_if_destinationdnsdomain_external__destinationdnsdomainexternal = None\n    check_if_destinationdnsdomain_external__destinationdnsdomaininternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    success, message, ktbdomainlist = phantom.get_list(list_name='ktbdomainlist')\n    \n    domainlist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    for item in domainlist:\n        if not any(item in sublist for sublist in ktbdomainlist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    check_if_destinationdnsdomain_external__destinationdnsdomainexternal = externaltemplist\n    check_if_destinationdnsdomain_external__destinationdnsdomaininternal = internaltemplist\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_destinationdnsdomain_external:destinationDnsDomainExternal', value=json.dumps(check_if_destinationdnsdomain_external__destinationdnsdomainexternal))\n    phantom.save_run_data(key='check_if_destinationdnsdomain_external:destinationDnsDomainInternal', value=json.dumps(check_if_destinationdnsdomain_external__destinationdnsdomaininternal))\n    check_if_destinationdnsdomain_is_private(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if destinationDnsDomain external",
                            "customNameId": 0,
                            "description": "Check if destinationDnsDomain external",
                            "join": [],
                            "note": "Check if destinationDnsDomain external"
                        },
                        "functionId": 17,
                        "functionName": "check_if_destinationdnsdomain_external",
                        "id": "39",
                        "inputParameters": [
                            "filtered-data:filter_out_destinationdnsdomain:condition_1:artifact:*.cef.destinationDnsDomain"
                        ],
                        "outputVariables": [
                            "destinationDnsDomainExternal",
                            "destinationDnsDomainInternal"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "39",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    success, message, ktbdomainlist = phantom.get_list(list_name='ktbdomainlist')\n    \n    domainlist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    for item in domainlist:\n        if not any(item in sublist for sublist in ktbdomainlist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    check_if_destinationdnsdomain_external__destinationdnsdomainexternal = externaltemplist\n    check_if_destinationdnsdomain_external__destinationdnsdomaininternal = internaltemplist\n    ################################################################################",
                    "warnings": {},
                    "x": 1480,
                    "y": 0
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Link back destinationDnsDoman to artifac",
                            "customNameId": 0,
                            "description": "Link back destinationDnsDoman to artifact record",
                            "join": [],
                            "note": "Link back destinationDnsDoman to artifact record"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "check_if_destinationdnsdomain_external:custom_function:destinationDnsDomainExternal"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 17,
                        "functionName": "link_back_destinationdnsdoman_to_artifac",
                        "id": "4",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "filter",
                    "warnings": {},
                    "x": 1480,
                    "y": 1960
                },
                "40": {
                    "customCode": "def check_if_requesturl_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_requesturl_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_requesturl:condition_1:artifact:*.cef.requestURL'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    check_if_requesturl_external__requesturlexternal = None\n    check_if_requesturl_external__requesturlinternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    # ktbdomainlist = [\"ktb.co.th\" , \"ktbcs.co.th\"]\n    success, message, ktburllist = phantom.get_list(list_name='ktburllist')\n    \n    urllist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    for item in urllist:\n        if not any(item in sublist for sublist in ktburllist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    check_if_requesturl_external__requesturlexternal = externaltemplist\n    check_if_requesturl_external__requesturlinternal = internaltemplist\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_requesturl_external:requestURLExternal', value=json.dumps(check_if_requesturl_external__requesturlexternal))\n    phantom.save_run_data(key='check_if_requesturl_external:requestURLInternal', value=json.dumps(check_if_requesturl_external__requesturlinternal))\n    check_if_requesturl_is_private(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if requestURL external",
                            "customNameId": 0,
                            "description": "Check if requestURL external",
                            "join": [],
                            "note": "Check if requestURL external"
                        },
                        "functionId": 9,
                        "functionName": "check_if_requesturl_external",
                        "id": "40",
                        "inputParameters": [
                            "filtered-data:filter_out_requesturl:condition_1:artifact:*.cef.requestURL"
                        ],
                        "outputVariables": [
                            "requestURLExternal",
                            "requestURLInternal"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "40",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    # ktbdomainlist = [\"ktb.co.th\" , \"ktbcs.co.th\"]\n    success, message, ktburllist = phantom.get_list(list_name='ktburllist')\n    \n    urllist = filtered_artifacts_item_1_0\n    externaltemplist = []\n    internaltemplist = []\n    for item in urllist:\n        if not any(item in sublist for sublist in ktburllist):\n            phantom.debug(\"{} is public\".format(item))\n            externaltemplist.append(item)\n        else:\n            phantom.debug(\"{} is private\".format(item))\n            internaltemplist.append(item)\n            \n    check_if_requesturl_external__requesturlexternal = externaltemplist\n    check_if_requesturl_external__requesturlinternal = internaltemplist\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################\n    ###################################################",
                    "warnings": {},
                    "x": 2120,
                    "y": 0
                },
                "41": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get user attribute",
                            "customNameId": 0,
                            "description": "Get user attribute",
                            "join": [],
                            "note": "Get user attribute"
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "csoc ad ldap asset containment"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_user_attribute",
                        "id": "41",
                        "parameters": {
                            "attributes": "sAMAccountName",
                            "principals": "filtered-data:filter_out_username:condition_1:artifact:*.cef.username"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "field": "principals"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "41",
                    "type": "action",
                    "warnings": {},
                    "x": 2920,
                    "y": 700
                },
                "42": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get system attribute",
                            "customNameId": 0,
                            "description": "Get system attribute",
                            "join": [],
                            "note": "Get system attribute"
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "csoc ad ldap asset containment"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "get_system_attribute",
                        "id": "42",
                        "parameters": {
                            "attributes": "sAMAccountName ; distinguishedName ; userprincipalname",
                            "principals": "filtered-data:filter_out_destinationhostname:condition_1:artifact:*.cef.destinationHostName"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "field": "principals"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "42",
                    "type": "action",
                    "warnings": {},
                    "x": 3200,
                    "y": 700
                },
                "43": {
                    "customCode": "def retrieve_username(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('retrieve_username() called')\n    \n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.sourceUserName', 'artifact:*.id'])\n    container_item_0 = [item[0] for item in container_data]\n\n    retrieve_username__PrincipleName = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    retrieve_username__PrincipleName = container_item_0[0].split(\"@\")[0]\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='retrieve_username:PrincipleName', value=json.dumps(retrieve_username__PrincipleName))\n    get_user_attribute_csoc(container=container)\n    get_user_attribute_ktb(container=container)\n    get_user_attribute_ktbcs(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "retrieve username",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 21,
                        "functionName": "retrieve_username",
                        "id": "43",
                        "inputParameters": [
                            "artifact:*.cef.sourceUserName"
                        ],
                        "outputVariables": [
                            "PrincipleName"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "43",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    retrieve_username__PrincipleName = container_item_0[0].split(\"@\")[0]\n\n",
                    "warnings": {},
                    "x": 3400,
                    "y": 140
                },
                "44": {
                    "data": {
                        "action": "lookup domain",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "query dns",
                            "customNameId": 0,
                            "join": [],
                            "note": "Get IP address by hostname"
                        },
                        "connector": "DNS",
                        "connectorConfigs": [
                            "csoc-dns"
                        ],
                        "connectorId": "876ab991-313e-48e7-bccd-e8c9650c239c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "query_dns",
                        "id": "44",
                        "parameters": {
                            "domain": "filtered-data:filter_out_hostname:condition_1:artifact:*.cef.deviceHostname",
                            "type": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "domain"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "44",
                    "type": "action",
                    "warnings": {},
                    "x": 4240,
                    "y": 480
                },
                "45": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get user attribute CSOC",
                            "customNameId": 0,
                            "join": [],
                            "note": "Get User Attribute"
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "csoc ad ldap asset containment"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "get_user_attribute_csoc",
                        "id": "45",
                        "parameters": {
                            "attributes": "sAMAccountName ; distinguishedName ; userprincipalname",
                            "principals": "retrieve_username:custom_function:PrincipleName"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "field": "principals"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "45",
                    "type": "action",
                    "warnings": {},
                    "x": 3480,
                    "y": 480
                },
                "46": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get user attribute KTBCS",
                            "customNameId": 0,
                            "join": [],
                            "note": "Get User Attribute"
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "ktbcs domain ad"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 5,
                        "functionName": "get_user_attribute_ktbcs",
                        "id": "46",
                        "parameters": {
                            "attributes": "sAMAccountName ; distinguishedName ; userprincipalname",
                            "principals": "retrieve_username:custom_function:PrincipleName"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "field": "principals"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "46",
                    "type": "action",
                    "warnings": {},
                    "x": 3960,
                    "y": 500
                },
                "47": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get user attribute KTB",
                            "customNameId": 0,
                            "join": [],
                            "note": "Get User Attribute"
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "ktb domain ad"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "get_user_attribute_ktb",
                        "id": "47",
                        "parameters": {
                            "attributes": "sAMAccountName ; distinguishedName ; userprincipalname",
                            "principals": "retrieve_username:custom_function:PrincipleName"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "field": "principals"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "47",
                    "type": "action",
                    "warnings": {},
                    "x": 3720,
                    "y": 480
                },
                "48": {
                    "data": {
                        "advanced": {
                            "customName": "Query result",
                            "customNameId": 0,
                            "join": [],
                            "note": "Filter out query result"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "get_user_attribute_csoc:action_result.summary.total_objects",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": ">",
                                        "param": "get_user_attribute_ktb:action_result.summary.total_objects",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 2,
                                        "op": ">",
                                        "param": "get_user_attribute_ktbcs:action_result.summary.total_objects",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 2,
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "query_result",
                        "id": "48",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "48",
                    "type": "decision",
                    "warnings": {},
                    "x": 3600,
                    "y": 780
                },
                "49": {
                    "customCode": "def print_query_result(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('print_query_result() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_user_attribute_csoc:action_result.summary.total_objects'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['get_user_attribute_ktb:action_result.summary.total_objects'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['get_user_attribute_ktbcs:action_result.summary.total_objects'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    phantom.debug(results_item_1_0)\n    phantom.debug(results_item_2_0)\n    phantom.debug(results_item_3_0)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Print query result",
                            "customNameId": 0,
                            "join": [],
                            "note": "Print result"
                        },
                        "functionId": 22,
                        "functionName": "print_query_result",
                        "id": "49",
                        "inputParameters": [
                            "get_user_attribute_csoc:action_result.summary.total_objects",
                            "get_user_attribute_ktb:action_result.summary.total_objects",
                            "get_user_attribute_ktbcs:action_result.summary.total_objects"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "49",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(results_item_1_0)\n    phantom.debug(results_item_2_0)\n    phantom.debug(results_item_3_0)\n\n",
                    "warnings": {},
                    "x": 3600,
                    "y": 1020
                },
                "5": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query fileHash",
                            "customNameId": 0,
                            "description": "Run query fileHash",
                            "join": [],
                            "note": "Run query fileHash"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 7,
                        "functionName": "run_query_filehash",
                        "id": "5",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_filehash:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "action",
                    "warnings": {},
                    "x": 2640,
                    "y": 1720
                },
                "50": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "1",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 21,
                        "functionName": "filter_21",
                        "id": "50",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "50",
                    "type": "filter",
                    "warnings": {},
                    "x": 1040,
                    "y": 3220
                },
                "51": {
                    "customCode": "def add_note_system(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_system() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_system_attribute:action_result.message'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_destinationhostname:condition_1:artifact:*.id', 'filtered-data:filter_out_destinationhostname:condition_1:artifact:*.cef.destinationHostName'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    content = \"Hostname: \"  + filtered_artifacts_item_1_1[0] + \"\\n\" + \"Results: \" + results_item_1_0[0]\n    \n    note_title = \"Get System Attribute\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note system",
                            "customNameId": 0,
                            "description": "Add note system",
                            "join": [],
                            "note": "Add note system"
                        },
                        "functionId": 16,
                        "functionName": "add_note_system",
                        "id": "51",
                        "inputParameters": [
                            "filtered-data:filter_out_destinationhostname:condition_1:artifact:*.id",
                            "filtered-data:filter_out_destinationhostname:condition_1:artifact:*.cef.destinationHostName",
                            "get_system_attribute:action_result.message"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "51",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    content = \"Hostname: \"  + filtered_artifacts_item_1_1[0] + \"\\n\" + \"Results: \" + results_item_1_0[0]\n    \n    note_title = \"Get System Attribute\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                    "warnings": {},
                    "x": 3200,
                    "y": 2360
                },
                "52": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out destinationDnsDomain",
                            "customNameId": 0,
                            "description": "Filter out destinationDnsDomain",
                            "join": [],
                            "note": "Filter out destinationDnsDomain"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 15,
                        "functionName": "filter_out_destinationdnsdomain",
                        "id": "52",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "52",
                    "type": "filter",
                    "warnings": {},
                    "x": 1480,
                    "y": -140
                },
                "53": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out requestURL",
                            "customNameId": 0,
                            "description": "Filter out requestURL",
                            "join": [],
                            "note": "Filter out requestURL"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 8,
                        "functionName": "filter_out_requesturl",
                        "id": "53",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "53",
                    "type": "filter",
                    "warnings": {},
                    "x": 2120,
                    "y": -140
                },
                "54": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out fileHash",
                            "customNameId": 0,
                            "description": "Filter out fileHash",
                            "join": [],
                            "note": "Filter out fileHash"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.fileHash",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 12,
                        "functionName": "filter_out_filehash",
                        "id": "54",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "54",
                    "type": "filter",
                    "warnings": {},
                    "x": 2680,
                    "y": -140
                },
                "55": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out destinationHostName",
                            "customNameId": 0,
                            "description": "Filter out destinationHostName",
                            "join": [],
                            "note": "Filter out destinationHostName"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 14,
                        "functionName": "filter_out_destinationhostname",
                        "id": "55",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "55",
                    "type": "filter",
                    "warnings": {},
                    "x": 3200,
                    "y": -140
                },
                "56": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "note": "Filter out source Username"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 19,
                        "functionName": "filter_19",
                        "id": "56",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "56",
                    "type": "filter",
                    "warnings": {},
                    "x": 3400,
                    "y": -140
                },
                "57": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out Hostname",
                            "customNameId": 0,
                            "join": [],
                            "note": "Filter out hostname and get IP"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.deviceHostname",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 20,
                        "functionName": "filter_out_hostname",
                        "id": "57",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "57",
                    "type": "filter",
                    "warnings": {},
                    "x": 3640,
                    "y": -140
                },
                "58": {
                    "customCode": "def add_note_destinationdnsdomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_destinationdnsdomain() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['domain_reputation_vt:action_result.summary.detected_urls'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['domain_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_destinationdnsdomain:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.id', 'filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.cef.destinationDnsDomain'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    content = \"Domain: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal Domain Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream Domain Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n    \n    note_title = \"Domain Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_external_destinationdnsdomain_art(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note destinationDnsDomain",
                            "customNameId": 0,
                            "description": "Add note destinationDnsDomain",
                            "join": [],
                            "note": "Add note destinationDnsDomain"
                        },
                        "functionId": 19,
                        "functionName": "add_note_destinationdnsdomain",
                        "id": "58",
                        "inputParameters": [
                            "filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.id",
                            "filtered-data:link_back_destinationdnsdoman_to_artifac:condition_1:artifact:*.cef.destinationDnsDomain",
                            "domain_reputation_vt:action_result.summary.detected_urls",
                            "domain_reputation_ts:action_result.summary",
                            "run_query_destinationdnsdomain:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "58",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    content = \"Domain: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal Domain Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream Domain Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n    \n    note_title = \"Domain Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 1480,
                    "y": 2120
                },
                "59": {
                    "customCode": "def create_artifact_user_email_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_artifact_user_email_address() called')\n    \n    id_value = container.get('id', None)\n    results_data_1 = phantom.collect2(container=container, datapath=['get_user_attribute:action_result.message'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    url = phantom.build_phantom_rest_url('container', id_value, 'artifacts') \n    url = url  + '?_filter_cef__toEmail__isnull=False'\n    phantom.debug(url)\n    response = phantom.requests.get(\n        url,\n     verify=False\n    )\n    phantom.debug(response.json())\n    r = response.json()\n    for i in r:\n        if i == 'count':\n            if r[i] > 0:\n                phantom.debug(\"toEmail exist\")\n            elif r[i] == 0:\n                phantom.debug(\"toEmail do not exist\")    \n                parameters = []\n                phantom.debug(results_item_1_0)\n\n                # build parameters list for 'add_artifact_1' call\n                parameters.append({\n                    'name': \"Email Artifact\",\n                    'container_id': \"\",\n                    'label': \"event\",\n                    'source_data_identifier': \"None\",\n                    'cef_name': \"toEmail\",\n                    'cef_value': \"someEmail\",\n                    'cef_dictionary': \"\",\n                    'contains': \"\",\n                    'run_automation': False,\n                })\n\n                phantom.act(action=\"add artifact\", parameters=parameters, assets=['phantom asset'], name=\"add_artifact_emailAddress\")\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_add_note_username(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Create Artifact User Email Address",
                            "customNameId": 0,
                            "description": "Create Artifact\nUser Email Address",
                            "join": [],
                            "note": "Create Artifact\nUser Email Address"
                        },
                        "functionId": 14,
                        "functionName": "create_artifact_user_email_address",
                        "id": "59",
                        "inputParameters": [
                            "get_user_attribute:action_result.message",
                            "container:id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "59",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    url = phantom.build_phantom_rest_url('container', id_value, 'artifacts') \n    url = url  + '?_filter_cef__toEmail__isnull=False'\n    phantom.debug(url)\n    response = phantom.requests.get(\n        url,\n     verify=False\n    )\n    phantom.debug(response.json())\n    r = response.json()\n    for i in r:\n        if i == 'count':\n            if r[i] > 0:\n                phantom.debug(\"toEmail exist\")\n            elif r[i] == 0:\n                phantom.debug(\"toEmail do not exist\")    \n                parameters = []\n                phantom.debug(results_item_1_0)\n\n                # build parameters list for 'add_artifact_1' call\n                parameters.append({\n                    'name': \"Email Artifact\",\n                    'container_id': \"\",\n                    'label': \"event\",\n                    'source_data_identifier': \"None\",\n                    'cef_name': \"toEmail\",\n                    'cef_value': \"someEmail\",\n                    'cef_dictionary': \"\",\n                    'contains': \"\",\n                    'run_automation': False,\n                })\n\n                phantom.act(action=\"add artifact\", parameters=parameters, assets=['phantom asset'], name=\"add_artifact_emailAddress\")\n\n",
                    "warnings": {},
                    "x": 2920,
                    "y": 2120
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query on internal dst IP",
                            "customNameId": 0,
                            "description": "Format data to query on internal dst IP",
                            "join": [],
                            "note": "Format data to query on internal dst IP",
                            "separator": ", "
                        },
                        "functionId": 6,
                        "functionName": "format_data_to_query_on_internal_dst_ip",
                        "id": "6",
                        "parameters": [
                            "check_if_destinationaddress_external:custom_function:destinationAddressInternal"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "format",
                    "warnings": {},
                    "x": 1240,
                    "y": 700
                },
                "60": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out username",
                            "customNameId": 0,
                            "description": "Filter out username",
                            "join": [],
                            "note": "Filter out username"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.username",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 13,
                        "functionName": "filter_out_username",
                        "id": "60",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "60",
                    "type": "filter",
                    "warnings": {},
                    "x": 2920,
                    "y": -140
                },
                "61": {
                    "customCode": "def add_note_username(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_username() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_user_attribute:action_result.message'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_username:condition_1:artifact:*.id', 'filtered-data:filter_out_username:condition_1:artifact:*.cef.username'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    content = \"Username: \"  + filtered_artifacts_item_1_1[0] + \"\\n\" + \"Results: \" + results_item_1_0[0]\n    \n    note_title = \"Get User Attribute\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note username",
                            "customNameId": 0,
                            "description": "Add note username",
                            "join": [],
                            "note": "Add note username"
                        },
                        "functionId": 15,
                        "functionName": "add_note_username",
                        "id": "61",
                        "inputParameters": [
                            "filtered-data:filter_out_username:condition_1:artifact:*.id",
                            "filtered-data:filter_out_username:condition_1:artifact:*.cef.username",
                            "get_user_attribute:action_result.message"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "61",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    content = \"Username: \"  + filtered_artifacts_item_1_1[0] + \"\\n\" + \"Results: \" + results_item_1_0[0]\n    \n    note_title = \"Get User Attribute\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                    "warnings": {},
                    "x": 2920,
                    "y": 2360
                },
                "62": {
                    "customCode": "def update_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_filehash() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['file_reputation_1:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['file_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_filehash:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_filehash:condition_1:artifact:*.id', 'filtered-data:filter_out_filehash:condition_1:artifact:*.cef.fileHash'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    if results_item_2_0[0] != {} or results_item_1_0[0] >= 1:\n    \n        parameters = []\n\n        cef_json = {\"fileHash_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_fileHash\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update fileHash",
                            "customNameId": 0,
                            "description": "Update fileHash",
                            "join": [],
                            "note": "Update fileHash"
                        },
                        "functionId": 13,
                        "functionName": "update_filehash",
                        "id": "62",
                        "inputParameters": [
                            "filtered-data:filter_out_filehash:condition_1:artifact:*.id",
                            "filtered-data:filter_out_filehash:condition_1:artifact:*.cef.fileHash",
                            "file_reputation_1:action_result.summary.malicious",
                            "file_reputation_ts:action_result.summary",
                            "run_query_filehash:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "62",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    if results_item_2_0[0] != {} or results_item_1_0[0] >= 1:\n    \n        parameters = []\n\n        cef_json = {\"fileHash_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_fileHash\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 2640,
                    "y": 2360
                },
                "63": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out destinationAddress",
                            "customNameId": 0,
                            "description": "Filter out destinationAddress",
                            "join": [],
                            "note": "Filter out destinationAddress"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "filter_out_destinationaddress",
                        "id": "63",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "63",
                    "type": "filter",
                    "warnings": {},
                    "x": 1000,
                    "y": -140
                },
                "64": {
                    "customCode": "def add_note_dst_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_dst_ip() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_3:action_result.summary.detected_urls'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation_dst_ip_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['whois_dst_ip_ts:action_result.summary'], action_results=results)\n    results_data_4 = phantom.collect2(container=container, datapath=['run_query_dst_ip:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.cef.destinationAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_4_0 = [item[0] for item in results_data_4]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    content = \"Destination IP address: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal IP Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream IP Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) + \"\\n\" + \"\\n\" + \"WhoIS IP\" +\"\\n\" + \"Summary: \" + str(results_item_3_0[0]) + \"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_4_0[0])\n    \n    note_title = \"destinationAddress Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_dst_ip_artifact(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note dst IP",
                            "customNameId": 0,
                            "description": "Add note dst IP",
                            "join": [],
                            "note": "Add note dst IP"
                        },
                        "functionId": 7,
                        "functionName": "add_note_dst_ip",
                        "id": "64",
                        "inputParameters": [
                            "filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.cef.destinationAddress",
                            "ip_reputation_3:action_result.summary.detected_urls",
                            "ip_reputation_dst_ip_ts:action_result.summary",
                            "whois_dst_ip_ts:action_result.summary",
                            "run_query_dst_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "64",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    content = \"Destination IP address: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal IP Reputation\" +\"\\n\" + \"Summary Detected URLs: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream IP Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) + \"\\n\" + \"\\n\" + \"WhoIS IP\" +\"\\n\" + \"Summary: \" + str(results_item_3_0[0]) + \"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_4_0[0])\n    \n    note_title = \"destinationAddress Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 1000,
                    "y": 2120
                },
                "65": {
                    "data": {
                        "advanced": {
                            "customName": "Check if destinationAddress is private",
                            "customNameId": 0,
                            "description": "Check if destinationAddress is private",
                            "join": [],
                            "note": "Check if destinationAddress is private"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "check_if_destinationaddress_external:custom_function:destinationAddressExternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "check_if_destinationaddress_external:custom_function:destinationAddressInternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "logic": "and"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "check_if_destinationaddress_is_private",
                        "id": "65",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "65",
                    "type": "filter",
                    "warnings": {},
                    "x": 1000,
                    "y": 240
                },
                "66": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query dst IP",
                            "customNameId": 0,
                            "description": "Run query dst IP",
                            "join": [],
                            "note": "Run query dst IP"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 5,
                        "functionName": "run_query_dst_ip",
                        "id": "66",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_dst_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "66",
                    "type": "action",
                    "warnings": {},
                    "x": 1000,
                    "y": 1700
                },
                "67": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query src IP",
                            "customNameId": 0,
                            "description": "Format data to query src IP",
                            "join": [],
                            "note": "Format data to query src IP",
                            "separator": ", "
                        },
                        "functionId": 5,
                        "functionName": "format_data_to_query_src_ip",
                        "id": "67",
                        "parameters": [
                            "format_src_ip:formatted_data"
                        ],
                        "template": "summariesonly=t count from datamodel=Network_Traffic.All_Traffic where All_Traffic.src={0} earliest=-1h@h latest=now | rename All_Traffic.* AS *",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "67",
                    "type": "format",
                    "warnings": {},
                    "x": 520,
                    "y": 1440
                },
                "68": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query dst IP",
                            "customNameId": 0,
                            "description": "Format data to query dst IP",
                            "join": [],
                            "note": "Format data to query dst IP",
                            "separator": ", "
                        },
                        "functionId": 9,
                        "functionName": "format_data_to_query_dst_ip",
                        "id": "68",
                        "parameters": [
                            "ip_reputation_3:action_result.parameter.ip"
                        ],
                        "template": "{0} earliest=-48h@h  latest=now `notable`",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "68",
                    "type": "format",
                    "warnings": {},
                    "x": 1000,
                    "y": 1440
                },
                "69": {
                    "customCode": "def update_dst_ip_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('update_dst_ip_artifact() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_3:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation_dst_ip_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['whois_dst_ip_ts:action_result.summary'], action_results=results)\n    results_data_4 = phantom.collect2(container=container, datapath=['run_query_dst_ip:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.cef.destinationAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_4_0 = [item[0] for item in results_data_4]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    phantom.debug('VT=' )\n    phantom.debug(results_item_1_0)\n    phantom.debug('TS=')\n    phantom.debug(results_item_2_0)\n    \n    if results_item_2_0[0] != {} or results_item_1_0[0] >= 2:\n        parameters = []\n\n        cef_json = {\"destinationAddress_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationAddress\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_filter_21(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Update dst IP artifact",
                            "customNameId": 0,
                            "description": "Update dst IP artifact",
                            "join": [],
                            "note": "Update dst IP artifact"
                        },
                        "functionId": 8,
                        "functionName": "update_dst_ip_artifact",
                        "id": "69",
                        "inputParameters": [
                            "filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_dst_ip_to_artifact_record:condition_1:artifact:*.cef.destinationAddress",
                            "ip_reputation_3:action_result.summary.malicious",
                            "ip_reputation_dst_ip_ts:action_result.summary",
                            "whois_dst_ip_ts:action_result.summary",
                            "run_query_dst_ip:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "69",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug('VT=' )\n    phantom.debug(results_item_1_0)\n    phantom.debug('TS=')\n    phantom.debug(results_item_2_0)\n    \n    if results_item_2_0[0] != {} or results_item_1_0[0] >= 2:\n        parameters = []\n\n        cef_json = {\"destinationAddress_malicious\" : \"True\"}\n\n        # build parameters list for 'update_artifact_2' call\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'name': \"\",\n            'label': \"\",\n            'severity': \"\",\n            'cef_json': cef_json,\n            'cef_types_json': \"\",\n            'tags': \"\",\n            'overwrite': \"\",\n            'artifact_json': \"\",\n        })\n\n        phantom.act(action=\"update artifact\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_destinationAddress\")\n\n        parameters = []\n        parameters.append({\n            'artifact_id': filtered_artifacts_item_1_0[0],\n            'add_tags': \"indicator_malicious\",\n            'remove_tags': \"\",\n        })\n\n        phantom.act(action=\"update artifact tags\", parameters=parameters, assets=['phantom asset'], name=\"update_artifact_tags\")\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 1000,
                    "y": 2360
                },
                "7": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query src IP",
                            "customNameId": 0,
                            "description": "Run query src IP",
                            "join": [],
                            "note": "Run query src IP"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "run_query_src_ip",
                        "id": "7",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_src_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "action",
                    "warnings": {},
                    "x": 520,
                    "y": 1700
                },
                "70": {
                    "data": {
                        "advanced": {
                            "customName": "Filter out sourceAddress",
                            "customNameId": 0,
                            "description": "Filter out sourceAddress",
                            "join": [],
                            "note": "Filter out sourceAddress"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "filter_out_sourceaddress",
                        "id": "70",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "70",
                    "type": "filter",
                    "warnings": {},
                    "x": 520,
                    "y": -120
                },
                "71": {
                    "customCode": "def check_if_sourceaddress_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_sourceaddress_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_sourceaddress:condition_1:artifact:*.cef.sourceAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    check_if_sourceaddress_external__sourceaddressexternal = None\n    check_if_sourceaddress_external__sourceaddressinternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    extemplist = []\n    intemplist = []\n    for ip in filtered_artifacts_item_1_0:\n        try:\n            private = ipaddress.ip_address(ip).is_private\n            if private == True:\n                phantom.debug(\"{} is private\".format(ip))\n                intemplist.append(ip)\n            else:\n                phantom.debug(\"{} is public\".format(ip))\n                extemplist.append(ip)\n        except:\n            continue\n            \n    check_if_sourceaddress_external__sourceaddressexternal = extemplist\n    check_if_sourceaddress_external__sourceaddressinternal = intemplist\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_sourceaddress_external:sourceAddressExternal', value=json.dumps(check_if_sourceaddress_external__sourceaddressexternal))\n    phantom.save_run_data(key='check_if_sourceaddress_external:sourceAddressInternal', value=json.dumps(check_if_sourceaddress_external__sourceaddressinternal))\n    check_if_sourceaddress_is_private(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if sourceAddress external",
                            "customNameId": 0,
                            "description": "Check if sourceAddress external",
                            "join": [],
                            "note": "Check if sourceAddress external"
                        },
                        "functionId": 1,
                        "functionName": "check_if_sourceaddress_external",
                        "id": "71",
                        "inputParameters": [
                            "filtered-data:filter_out_sourceaddress:condition_1:artifact:*.cef.sourceAddress"
                        ],
                        "outputVariables": [
                            "sourceAddressExternal",
                            "sourceAddressInternal"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "71",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    extemplist = []\n    intemplist = []\n    for ip in filtered_artifacts_item_1_0:\n        try:\n            private = ipaddress.ip_address(ip).is_private\n            if private == True:\n                phantom.debug(\"{} is private\".format(ip))\n                intemplist.append(ip)\n            else:\n                phantom.debug(\"{} is public\".format(ip))\n                extemplist.append(ip)\n        except:\n            continue\n            \n    check_if_sourceaddress_external__sourceaddressexternal = extemplist\n    check_if_sourceaddress_external__sourceaddressinternal = intemplist\n\n",
                    "warnings": {},
                    "x": 520,
                    "y": 0
                },
                "72": {
                    "customCode": "def check_if_destinationaddress_external(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_if_destinationaddress_external() called')\n    \n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_destinationaddress:condition_1:artifact:*.cef.destinationAddress'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    check_if_destinationaddress_external__destinationaddressexternal = None\n    check_if_destinationaddress_external__destinationaddressinternal = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    extemplist = []\n    intemplist = []\n    for ip in filtered_artifacts_item_1_0:\n        try:\n            private = ipaddress.ip_address(ip).is_private\n            if private == True:\n                phantom.debug(\"{} is private\".format(ip))\n                intemplist.append(ip)\n            else:\n                phantom.debug(\"{} is public\".format(ip))\n                extemplist.append(ip)\n        except:\n            continue\n            \n    check_if_destinationaddress_external__destinationaddressexternal = extemplist\n    check_if_destinationaddress_external__destinationaddressinternal = intemplist\n    ###################################################################\n    ###################################################################\n    ###################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='check_if_destinationaddress_external:destinationAddressExternal', value=json.dumps(check_if_destinationaddress_external__destinationaddressexternal))\n    phantom.save_run_data(key='check_if_destinationaddress_external:destinationAddressInternal', value=json.dumps(check_if_destinationaddress_external__destinationaddressinternal))\n    check_if_destinationaddress_is_private(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Check if destinationAddress external",
                            "customNameId": 0,
                            "description": "Check if destinationAddress external",
                            "join": [],
                            "note": "Check if destinationAddress external"
                        },
                        "functionId": 5,
                        "functionName": "check_if_destinationaddress_external",
                        "id": "72",
                        "inputParameters": [
                            "filtered-data:filter_out_destinationaddress:condition_1:artifact:*.cef.destinationAddress"
                        ],
                        "outputVariables": [
                            "destinationAddressExternal",
                            "destinationAddressInternal"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "72",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    extemplist = []\n    intemplist = []\n    for ip in filtered_artifacts_item_1_0:\n        try:\n            private = ipaddress.ip_address(ip).is_private\n            if private == True:\n                phantom.debug(\"{} is private\".format(ip))\n                intemplist.append(ip)\n            else:\n                phantom.debug(\"{} is public\".format(ip))\n                extemplist.append(ip)\n        except:\n            continue\n            \n    check_if_destinationaddress_external__destinationaddressexternal = extemplist\n    check_if_destinationaddress_external__destinationaddressinternal = intemplist\n    ###################################################################\n    ###################################################################\n    ###################################################################",
                    "warnings": {},
                    "x": 1000,
                    "y": 0
                },
                "73": {
                    "data": {
                        "advanced": {
                            "customName": "Check if sourceAddress is private",
                            "customNameId": 0,
                            "description": "Check if sourceAddress is private",
                            "join": [],
                            "note": "Check if sourceAddress is private"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "check_if_sourceaddress_external:custom_function:sourceAddressExternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "check_if_sourceaddress_external:custom_function:sourceAddressInternal",
                                        "value": "[]"
                                    }
                                ],
                                "conditionIndex": 1,
                                "logic": "and"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "check_if_sourceaddress_is_private",
                        "id": "73",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "73",
                    "type": "filter",
                    "warnings": {},
                    "x": 520,
                    "y": 220
                },
                "74": {
                    "customCode": "def add_note_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_filehash() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['file_reputation_1:action_result.summary.malicious'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['file_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_filehash:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_out_filehash:condition_1:artifact:*.id', 'filtered-data:filter_out_filehash:condition_1:artifact:*.cef.fileHash'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    \n    content = \"fileHash: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal File Reputation\" +\"\\n\" + \"Summar Malicious: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream File Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n    \n    note_title = \"fileHash Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_filehash(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note fileHash",
                            "customNameId": 0,
                            "description": "Add note fileHash",
                            "join": [],
                            "note": "Add note fileHash"
                        },
                        "functionId": 12,
                        "functionName": "add_note_filehash",
                        "id": "74",
                        "inputParameters": [
                            "filtered-data:filter_out_filehash:condition_1:artifact:*.id",
                            "filtered-data:filter_out_filehash:condition_1:artifact:*.cef.fileHash",
                            "file_reputation_1:action_result.summary.malicious",
                            "file_reputation_ts:action_result.summary",
                            "run_query_filehash:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "74",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    content = \"fileHash: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal File Reputation\" +\"\\n\" + \"Summar Malicious: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream File Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n    \n    note_title = \"fileHash Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n",
                    "warnings": {},
                    "x": 2640,
                    "y": 2120
                },
                "75": {
                    "data": {
                        "action": "file reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "description": "File reputation VT",
                            "join": [],
                            "note": "File reputation VT"
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "virustotal v3 asset"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "file_reputation_1",
                        "id": "75",
                        "parameters": {
                            "hash": "filtered-data:filter_out_filehash:condition_1:artifact:*.cef.fileHash"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "hash"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "75",
                    "type": "action",
                    "warnings": {},
                    "x": 2600,
                    "y": 700
                },
                "76": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to query fileHash",
                            "customNameId": 0,
                            "description": "Format data to query fileHash",
                            "join": [],
                            "note": "Format data to query fileHash",
                            "separator": ", "
                        },
                        "functionId": 13,
                        "functionName": "format_data_to_query_filehash",
                        "id": "76",
                        "parameters": [
                            "file_reputation_1:action_result.parameter.hash"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "76",
                    "type": "format",
                    "warnings": {},
                    "x": 2640,
                    "y": 1440
                },
                "77": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "file_reputation_1:action_result.status",
                                        "value": "failed"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "77",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "77",
                    "type": "decision",
                    "warnings": {},
                    "x": 2640,
                    "y": 1240
                },
                "78": {
                    "customCode": "def add_note_requesturl(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('add_note_requesturl() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['url_reputation_1:action_result.summary.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['url_reputation_ts:action_result.summary'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['run_query_requesturl:action_result.summary.total_events'], action_results=results)\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.id', 'filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.cef.requestURL'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n    filtered_artifacts_item_1_1 = [item[1] for item in filtered_artifacts_data_1]\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    content = \"URL: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal URL Reputation\" +\"\\n\" + \"Summary Positives: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream URL Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n\n    note_title = \"URL Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    update_external_requesturl_artifact(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Add note requestURL",
                            "customNameId": 0,
                            "description": "Add note requestURL",
                            "join": [],
                            "note": "Add note requestURL"
                        },
                        "functionId": 10,
                        "functionName": "add_note_requesturl",
                        "id": "78",
                        "inputParameters": [
                            "filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.id",
                            "filtered-data:link_back_requesturl_to_artifact_record:condition_1:artifact:*.cef.requestURL",
                            "url_reputation_1:action_result.summary.positives",
                            "url_reputation_ts:action_result.summary",
                            "run_query_requesturl:action_result.summary.total_events"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "78",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    content = \"URL: \" +  filtered_artifacts_item_1_1[0] +\"\\n\" + \"\\n\" + \"VirusTotal URL Reputation\" +\"\\n\" + \"Summary Positives: \" + str(results_item_1_0[0]) +\"\\n\" + \"\\n\" + \"ThreatStream URL Repuation\" +\"\\n\" + \"Summary: \" + str(results_item_2_0[0]) +\"\\n\" + \"\\n\" + \"Splunk Enterprise Search\" +\"\\n\" + \"Total Events: \" + str(results_item_3_0[0])\n\n    note_title = \"URL Investigation\"\n    note_content = content\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################\n    ################################################################################",
                    "warnings": {},
                    "x": 2120,
                    "y": 2100
                },
                "79": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query on internal src IP",
                            "customNameId": 0,
                            "description": "Run query on internal src IP",
                            "join": [],
                            "note": "Run query on internal src IP"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "run_query_on_internal_src_ip",
                        "id": "79",
                        "parameters": {
                            "command": "tstats",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_on_internal_src_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "79",
                    "type": "action",
                    "warnings": {},
                    "x": 760,
                    "y": 940
                },
                "8": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query to get event details",
                            "customNameId": 0,
                            "description": "Run query to get event details",
                            "join": [],
                            "note": "Run query to get event details"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "run_query_to_get_event_details",
                        "id": "8",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_run_query_to_get_event_de:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "warnings": {},
                    "x": 160,
                    "y": 460
                },
                "80": {
                    "data": {
                        "action": "whois ip",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "WhoIS src IP TS",
                            "customNameId": 0,
                            "description": "WhoIS src IP TS",
                            "join": [],
                            "note": "WhoIS src IP TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "whois_src_ip_ts",
                        "id": "80",
                        "parameters": {
                            "ip": "format_src_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "80",
                    "type": "action",
                    "warnings": {},
                    "x": 520,
                    "y": 1180
                },
                "81": {
                    "customCode": "def ip_reputation_dst_ip_ts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('ip_reputation_dst_ip_ts() called')\n    phantom.debug(results)   \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'ip_reputation_dst_ip_ts' call\n    formatted_data_1 = phantom.get_format_data(name='format_dst_ip')\n\n    parameters = []\n    \n    # build parameters list for 'ip_reputation_dst_ip_ts' call\n    parameters.append({\n        'ip': formatted_data_1,\n        'limit': 1000,\n    })\n\n    phantom.act(action=\"ip reputation\", parameters=parameters, assets=['threatstream cloud'], callback=whois_dst_ip_ts, name=\"ip_reputation_dst_ip_ts\", parent_action=action)\n\n    return",
                    "data": {
                        "action": "ip reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "IP Reputation dst IP TS",
                            "customNameId": 0,
                            "delayTime": 0.0,
                            "description": "IP Reputation src IP TS",
                            "join": [],
                            "note": "IP Reputation src IP TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "ip_reputation_dst_ip_ts",
                        "id": "81",
                        "parameters": {
                            "ip": "format_dst_ip:formatted_data",
                            "limit": 1000
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "81",
                    "type": "action",
                    "warnings": {},
                    "x": 1000,
                    "y": 940
                },
                "82": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Run query on internal dst IP",
                            "customNameId": 0,
                            "description": "Run query on internal dst IP",
                            "join": [],
                            "note": "Run query on internal dst IP"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk es asset"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "run_query_on_internal_dst_ip",
                        "id": "82",
                        "parameters": {
                            "command": "search",
                            "display": "",
                            "parse_only": "",
                            "query": "format_data_to_query_on_internal_dst_ip:formatted_data"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "82",
                    "type": "action",
                    "warnings": {},
                    "x": 1240,
                    "y": 940
                },
                "83": {
                    "data": {
                        "action": "whois ip",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "WhoIS dst IP TS",
                            "customNameId": 0,
                            "description": "WhoIS dst IP TS",
                            "join": [],
                            "note": "WhoIS dst IP TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "whois_dst_ip_ts",
                        "id": "83",
                        "parameters": {
                            "ip": "ip_reputation_3:action_result.parameter.ip"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "83",
                    "type": "action",
                    "warnings": {},
                    "x": 1000,
                    "y": 1180
                },
                "84": {
                    "data": {
                        "action": "domain reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Domain Reputation TS",
                            "customNameId": 0,
                            "description": "Domain Reputation TS",
                            "join": [],
                            "note": "Domain Reputation TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "domain_reputation_ts",
                        "id": "84",
                        "parameters": {
                            "domain": "domain_reputation_vt:action_result.parameter.domain",
                            "limit": 1000
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "domain"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "84",
                    "type": "action",
                    "warnings": {},
                    "x": 1480,
                    "y": 940
                },
                "85": {
                    "data": {
                        "action": "url reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "URL Reputation TS",
                            "customNameId": 0,
                            "description": "URL Reputation TS",
                            "join": [],
                            "note": "URL Reputation TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "url_reputation_ts",
                        "id": "85",
                        "parameters": {
                            "limit": 1000,
                            "url": "url_reputation_1:action_result.parameter.url"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "85",
                    "type": "action",
                    "warnings": {},
                    "x": 2120,
                    "y": 940
                },
                "86": {
                    "data": {
                        "action": "file reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "File reputation TS",
                            "customNameId": 0,
                            "description": "File reputation TS",
                            "join": [],
                            "note": "File reputation TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream cloud"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "file_reputation_ts",
                        "id": "86",
                        "parameters": {
                            "hash": "file_reputation_1:artifact:*.cef.fileHash",
                            "limit": 1000
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "hash"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "86",
                    "type": "action",
                    "warnings": {},
                    "x": 2600,
                    "y": 960
                },
                "87": {
                    "data": {
                        "action": "ip reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "IP Reputation src IP TS",
                            "customNameId": 0,
                            "description": "IP Reputation src IP TS",
                            "join": [],
                            "note": "IP Reputation src IP TS"
                        },
                        "connector": "ThreatStream",
                        "connectorConfigs": [
                            "threatstream hybrid vm"
                        ],
                        "connectorId": "5b4fca40-e1b8-499d-aa57-a2c8e0b1c5e7",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "ip_reputation_src_ip_ts",
                        "id": "87",
                        "parameters": {
                            "ip": "format_src_ip:formatted_data",
                            "limit": 1000
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "87",
                    "type": "action",
                    "warnings": {},
                    "x": 520,
                    "y": 940
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "Format data to add event details as note",
                            "customNameId": 0,
                            "description": "Format data to add event detail as note",
                            "join": [],
                            "note": "Format data to add event details as note",
                            "separator": ", "
                        },
                        "functionId": 3,
                        "functionName": "format_data_to_add_event_details_as_note",
                        "id": "9",
                        "parameters": [
                            "run_query_to_get_event_details:action_result.summary.total_events"
                        ],
                        "template": "event_id={0}  earliest=-48h@h  latest=now `notable`",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "format",
                    "warnings": {},
                    "x": 160,
                    "y": 840
                }
            },
            "notes": "Inputs:\nTriggered by parent playbook.\n\nInteractions:\nPhantom, VirusTotal, Splunk, Anomali ThreatStream\n\nActions:\nFile Reputation, URL Reputation, IP Reputation, Domain Reputation, Run Query, Update artifact, Add note\nArtifacts:\nP1: Perform enrichment tasks on the indicatorsFilter out deviceHostname",
            "origin": {
                "playbook_id": 145,
                "playbook_name": "KTB - Enrich Playbook",
                "playbook_repo_id": 3,
                "playbook_repo_name": "mfec_csoc_playbook"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "4.10.7.63984"
    },
    "create_time": "2025-03-27T15:21:02.055070+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}